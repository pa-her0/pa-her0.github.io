<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>情绪传播机制--Mechanism of emotion diffusion</title>
      <link href="/2025/07/05/%E6%83%85%E7%BB%AA%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6-Mechanism-of-emotion-diffusion/"/>
      <url>/2025/07/05/%E6%83%85%E7%BB%AA%E4%BC%A0%E6%92%AD%E6%9C%BA%E5%88%B6-Mechanism-of-emotion-diffusion/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>查找学习关于"人工网络中的情绪传播机制",以下是两篇我阅读学习的文献 --精读的很烂,太浮躁了,没有脚踏&gt; 实地的去读,如果内容有问题,请多包涵 ：）</p></blockquote><span id="more"></span><h1>An agent-based model for emotion contagion and competition in online social media</h1><h2 id="项目目的">项目目的</h2><ul class="lvl-0"><li class="lvl-2"><p>综合 “情绪相关性”,“情绪传播与网络结构的耦合性”</p></li><li class="lvl-2"><p>提出了一个"结合情绪影响力和联系强度偏好的特征"的情绪传染模型</p></li></ul><h2 id="网络结构基本信息">网络结构基本信息</h2><p>采用推特上面的真实数据集构建的有向网络结构</p><ol><li class="lvl-3"><p>节点: 推特账户</p></li><li class="lvl-3"><p>边: 账号关注的有向边</p></li><li class="lvl-3"><p>边权重: 关系强度(共同好友, 互相关注, 互相转发量)</p></li><li class="lvl-3"><p>信息列表: (发送方id + 带有情绪 i 的文章)</p></li></ol><h2 id="信息传播关键步骤">信息传播关键步骤</h2><ol><li class="lvl-3"><p>推文发表通过一个固定的概率 P 进行决定是否发表, P是通过真实数据集计算得来, 文章在发表的时候会赋予情绪, 不会随着转发的改变而改变</p></li><li class="lvl-3"><p>推文转发如果没有发送推文, 用户会在 信息列表中查询,如果 t(转发倾向) 大于阈值 t0,就会将文章进行转发</p></li><li class="lvl-3"><p>推文接收如果用户收到关注用户的推文,会将推文放置信息列表中,如果信息列表长度已满会删除最早放置列表中的推文<br><img src="https://dns.whalefall.fun/wenxian1_1.png" alt=""></p></li></ol><h2 id="相关计算公式">相关计算公式</h2><ol><li class="lvl-3"><p>t(转发倾向) = 边权重 * 情绪相关性可以通过调整情绪相关性来控制不同的情绪在网络中的传播范围)</p></li><li class="lvl-3"><p>文章的情绪是由固定的概率给出的(推特的数据集总结)</p></li><li class="lvl-3"><p>文章的发表也是固定的概率给出</p></li></ol><h2 id="信息的关键流程">信息的关键流程</h2><ol><li class="lvl-3"><p>随机选择用户 U<br>2.1 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.699ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 751 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container> 概率选择推文发送,发送至所有关注者<br>2.2 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.596ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 2473.4 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.4,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></svg></mjx-container> 概率选择查看信息列表,然后检查是否需要进行推文转发,转发给所有关注者</p></li></ol><h1>Agent-Based Simulations of Emotional Dialogs in the Online Social Network MySpace</h1><h2 id="研究内容和目的">研究内容和目的</h2><p>通过模拟社交网络,理解在线社交网络的传播机制在线社交网络中的情绪传播不是随机的，它受到网络结构、用户活动情绪本身特性的影响, 可以进行迁移, 但是相关参数需要从网络的相关数据集中进行推断</p><h2 id="网络结构基本信息-2">网络结构基本信息</h2><p>来自MySpace 社交网络中用户之间公开可用的对话数据集<br><img src="https://dns.whalefall.fun/wenxian2_1.png" alt=""></p><ol><li class="lvl-3"><p>节点:表示社交软件的用户</p></li><li class="lvl-3"><p>边: 用户发送消息的有向边</p></li><li class="lvl-3"><p>边的权重: 表示发送消息的数量</p></li><li class="lvl-3"><p>情感变量(基于心理学罗素模型): 效价 V (情绪的消极或者积极程度[-1,1]), 唤醒度 a (情绪引发的活动水平(活跃性)[0,1]),两者都会随时间的变化而变化(布朗代理)<br>$$<br>v_{i}(t+1) = (1 - \gamma_a) v_{i}(t) + \delta_{\theta_i,1} \mathcal{F}<em>v(t)<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.036ex" height="0.036ex" role="img" focusable="false" viewBox="0 0 16 16"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"></g></g></svg></mjx-container><br>a</em>{i}(t+1) = (1 - \gamma_a) a_{i}(t) + \delta_{\theta_i,1} \mathcal{F}<em>a(t)<br>$$<br>相关概念: $\gamma_a, \gamma_a表示实验固定常数, \delta</em>{\theta_i,1} 表示 delta 函数(取0,1), \mathcal{F}_a(t),\mathcal{F}_v(t)表示非线性函数,捕获信息墙如何影响情绪$</p></li><li class="lvl-3"><p>信息墙影响函数:</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>效价驱动函数<br>$$<br>\mathcal{F}<em>v(t) = [(1-q)h_i^v(t) + qh</em>{mf}^v(t)] \times [c_1 + c_2(v_i(t) - v_i^3(t))][1 - |v_i(t)|]<br>$$</p></li></ul><p>$$<br>\mathcal{F}<em>a(t) = {(1-q)[\epsilon h_i^a(t) + (1-\epsilon)\overline{h}<em>i^a(t)] + qh</em>{mf}^a(t)}[1 - a_i(t)]<br>$$<br>相关概念:$h</em>{mf}平均场信息,h_i^v(t)自身墙效价信,c1,c2,q为固定常数$</p><p>即情感越接近极端，其对相同强度的外部刺激的响应可能越趋于平缓,当 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="78.906ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 34876.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1660,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2049,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">趋</text></g><g data-mml-node="mi" transform="translate(3049,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(4049,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mn" transform="translate(5049,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(5549,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">这</text></g><g data-mml-node="mi" transform="translate(6993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(7993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">项</text></g><g data-mml-node="mi" transform="translate(8993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(9993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">影</text></g><g data-mml-node="mi" transform="translate(10993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(11993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(12993.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">大</text></g><g data-mml-node="mo" transform="translate(13993.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(14438.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">如</text></g><g data-mml-node="mi" transform="translate(15438.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">果</text></g><g data-mml-node="msub" transform="translate(16438.3,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(17348.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(17737.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(18098.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(18487.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(19487.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(20487.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">极</text></g><g data-mml-node="mi" transform="translate(21487.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">端</text></g><g data-mml-node="mo" transform="translate(22487.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(22931.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">趋</text></g><g data-mml-node="mi" transform="translate(23931.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(24931.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mn" transform="translate(25931.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(26431.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(26876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(27876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(28876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">墙</text></g><g data-mml-node="mi" transform="translate(29876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(30876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">影</text></g><g data-mml-node="mi" transform="translate(31876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(32876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">就</text></g><g data-mml-node="mi" transform="translate(33876.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">小</text></g></g></g></svg></mjx-container></p><ul class="lvl-0"><li class="lvl-2"><p>唤醒度驱动函数</p></li></ul><ol start="6"><li class="lvl-3"><p>活动状态 e (0|1): 是否处于活跃状态(根据 Myspace 设置的时间钟有关)</p></li></ol><h2 id="三种聚合情绪信息存储">三种聚合情绪信息存储:</h2><ol><li class="lvl-3"><p>自身墙信息 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.679ex;" xmlns="http://www.w3.org/2000/svg" width="4.812ex" height="2.375ex" role="img" focusable="false" viewBox="0 -750 2126.8 1050"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,363) scale(0.707)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(609,-292.2) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(987.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1376.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1737.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>(包括 $h_i<sup>v(t),h_i</sup>a(t)<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="63.475ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 28055.8 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">自</text></g><g data-mml-node="mi" transform="translate(1555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">己</text></g><g data-mml-node="mi" transform="translate(2555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">收</text></g><g data-mml-node="mi" transform="translate(3555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(4555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(6555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(7555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(8555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(9555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">进</text></g><g data-mml-node="mi" transform="translate(10555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(11555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">聚</text></g><g data-mml-node="mi" transform="translate(12555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">合</text></g><g data-mml-node="mi" transform="translate(13555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g><g data-mml-node="mi" transform="translate(14555.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(15555.8,0)"><g data-mml-node="mo"><path data-c="2013" d="M0 248V285H499V248H0Z"></path></g></g><g data-mml-node="mi" transform="translate(16055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">体</text></g><g data-mml-node="mi" transform="translate(17055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">现</text></g><g data-mml-node="mi" transform="translate(18055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">自</text></g><g data-mml-node="mi" transform="translate(19055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">己</text></g><g data-mml-node="mi" transform="translate(20055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">收</text></g><g data-mml-node="mi" transform="translate(21055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(22055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(23055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">消</text></g><g data-mml-node="mi" transform="translate(24055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(25055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(26055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(27055.8,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g></g></g></svg></mjx-container>$<br>h_{i}^{z}(t) = \frac{\sum_{j}\sum_{m\in M_{ji}}\theta(t,t_{m})z_{j}(t_{m})W_{ji}e<sup>{-\gamma</sup>{h}(t_{ji}^{lm}-t_{m})}}{\sum_{j}\sum_{m\in M_{ji}}\theta(t,t_{m})W_{ji}e<sup>{-\gamma</sup>{h}(t_{ji}<sup>{lm}-t_{m})}}e</sup>{-\gamma<sup>{h}(t-t_{ji}</sup>{lm})}<br>$$<br>相关概念:</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="21.446ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 9479 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(465,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(1465,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(2465,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">效</text></g><g data-mml-node="mi" transform="translate(3465,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mi" transform="translate(4465,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(4950,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(5950,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">唤</text></g><g data-mml-node="mi" transform="translate(6950,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">醒</text></g><g data-mml-node="mi" transform="translate(7950,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(8950,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="32.455ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 14345.3 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(412,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1588.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(2588.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">从</text></g><g data-mml-node="mi" transform="translate(3588.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(4588.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mi" transform="translate(5588.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(6000.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(7000.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(8000.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mi" transform="translate(9000.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9345.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(10345.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">消</text></g><g data-mml-node="mi" transform="translate(11345.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(12345.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">序</text></g><g data-mml-node="mi" transform="translate(13345.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">列</text></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="85.158ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 37640 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(858,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1219,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1663.7,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2728.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(3117.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(4117.5,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(5005.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(5471.5,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6000.5,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(6485.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6830.5,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(7299.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7644.5,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(8164.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">阶</text></g><g data-mml-node="mi" transform="translate(9630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">梯</text></g><g data-mml-node="mi" transform="translate(10630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">函</text></g><g data-mml-node="mi" transform="translate(11630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(12630.5,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(13630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">确</text></g><g data-mml-node="mi" transform="translate(14630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">保</text></g><g data-mml-node="mi" transform="translate(15630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">消</text></g><g data-mml-node="mi" transform="translate(16630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(17630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">影</text></g><g data-mml-node="mi" transform="translate(18630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(19630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">从</text></g><g data-mml-node="mi" transform="translate(20630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">创</text></g><g data-mml-node="mi" transform="translate(21630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">建</text></g><g data-mml-node="mi" transform="translate(22630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(23630.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="msub" transform="translate(24630.5,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(25695.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">开</text></g><g data-mml-node="mi" transform="translate(26695.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">始</text></g><g data-mml-node="mo" transform="translate(27695.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(28140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">超</text></g><g data-mml-node="mi" transform="translate(29140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(30140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">范</text></g><g data-mml-node="mi" transform="translate(31140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">围</text></g><g data-mml-node="mi" transform="translate(32140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">自</text></g><g data-mml-node="mi" transform="translate(33140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">动</text></g><g data-mml-node="mi" transform="translate(34140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">设</text></g><g data-mml-node="mi" transform="translate(35140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">置</text></g><g data-mml-node="mi" transform="translate(36140,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mn" transform="translate(37140,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="103.348ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 45679.7 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(839.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1228.3,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2293.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2682.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(3682.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">发</text></g><g data-mml-node="mi" transform="translate(4682.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">送</text></g><g data-mml-node="mi" transform="translate(5682.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">者</text></g><g data-mml-node="mi" transform="translate(6682.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(7094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(8094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">消</text></g><g data-mml-node="mi" transform="translate(9094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(10094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">创</text></g><g data-mml-node="mi" transform="translate(11094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">建</text></g><g data-mml-node="mi" transform="translate(12094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(13094.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="msub" transform="translate(14094.2,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(15159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(16159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(17159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(18159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">内</text></g><g data-mml-node="mi" transform="translate(19159,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">容</text></g><g data-mml-node="mo" transform="translate(20159,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(20548,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">效</text></g><g data-mml-node="mi" transform="translate(21548,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mi" transform="translate(22548,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(23317,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(24317,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">者</text></g><g data-mml-node="mi" transform="translate(25317,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">唤</text></g><g data-mml-node="mi" transform="translate(26317,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">醒</text></g><g data-mml-node="mi" transform="translate(27317,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(28317,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(28846,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(29290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">取</text></g><g data-mml-node="mi" transform="translate(30290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">决</text></g><g data-mml-node="mi" transform="translate(31290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="mi" transform="translate(32290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">你</text></g><g data-mml-node="mi" transform="translate(33290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g><g data-mml-node="mi" transform="translate(34290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(35290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(36290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(37290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">哪</text></g><g data-mml-node="mi" transform="translate(38290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(39290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(40290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(41290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">聚</text></g><g data-mml-node="mi" transform="translate(42290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">合</text></g><g data-mml-node="mi" transform="translate(43290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(44290.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mo" transform="translate(45290.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="30.134ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 13319.3 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(412,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1562.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(2562.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">从</text></g><g data-mml-node="mi" transform="translate(3562.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(3974.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(4974.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(6319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(7319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(8319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">链</text></g><g data-mml-node="mi" transform="translate(9319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">接</text></g><g data-mml-node="mi" transform="translate(10319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(11319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(12319.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">重</text></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="22.816ex" height="2.42ex" role="img" focusable="false" viewBox="0 -853.7 10084.5 1069.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D6FE" d="M31 249Q11 249 11 258Q11 275 26 304T66 365T129 418T206 441Q233 441 239 440Q287 429 318 386T371 255Q385 195 385 170Q385 166 386 166L398 193Q418 244 443 300T486 391T508 430Q510 431 524 431H537Q543 425 543 422Q543 418 522 378T463 251T391 71Q385 55 378 6T357 -100Q341 -165 330 -190T303 -216Q286 -216 286 -188Q286 -138 340 32L346 51L347 69Q348 79 348 100Q348 257 291 317Q251 355 196 355Q148 355 108 329T51 260Q49 251 47 251Q45 249 31 249Z"></path></g><g data-mml-node="mi" transform="translate(627.3,363) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g><g data-mml-node="mi" transform="translate(1084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(2084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">信</text></g><g data-mml-node="mi" transform="translate(3084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(4084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">影</text></g><g data-mml-node="mi" transform="translate(5084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(6084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(7084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">衰</text></g><g data-mml-node="mi" transform="translate(8084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">减</text></g><g data-mml-node="mi" transform="translate(9084.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.987ex;" xmlns="http://www.w3.org/2000/svg" width="44.39ex" height="2.919ex" role="img" focusable="false" viewBox="0 -853.7 19620.6 1290.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="TeXAtom" transform="translate(394,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(394,-292.2) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(412,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1275.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(2275.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">发</text></g><g data-mml-node="mi" transform="translate(3275.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">送</text></g><g data-mml-node="mi" transform="translate(4275.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">到</text></g><g data-mml-node="mi" transform="translate(5275.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">代</text></g><g data-mml-node="mi" transform="translate(6275.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mi" transform="translate(7275.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">墙</text></g><g data-mml-node="mi" transform="translate(8620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(9620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(10620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(11620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(12620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(13620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">条</text></g><g data-mml-node="mi" transform="translate(14620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">消</text></g><g data-mml-node="mi" transform="translate(15620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">息</text></g><g data-mml-node="mi" transform="translate(16620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(17620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(18620.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p>$e<sup>{-\gamma</sup>{h}(t-t_{ji}^{lm})}$其实是用来表示 过去情绪会随着时间的增加而消散</p></li></ul><ol start="2"><li class="lvl-3"><p>朋友墙信息 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.576ex;" xmlns="http://www.w3.org/2000/svg" width="4.914ex" height="2.952ex" role="img" focusable="false" viewBox="0 -1049.9 2172.1 1304.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(0,626)"><svg width="576" height="237" x="0" y="148" viewBox="144 148 576 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.728,1)"></path></svg></g></g><g data-mml-node="mi" transform="translate(609,738.1) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(609,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1033.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1422.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1783.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>: 朋友收到的情绪信息进行聚合计算 – “羊群效应,别人的情绪可能也会影响自己”</p></li></ol><p>$$<br>\overline{h}<em>{i}^{a}(t) = \frac{\sum</em>{j}W_{ij}h_{j}<sup>{a}(t)(1+h_{j}</sup>{v}(t)v_{i}(t))}{\sum_{j}W_{ij}(1+h_{j}^{v}(t)v_{i}(t))}<br>$$<br>相关概念:</p><ul class="lvl-0"><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="17.554ex" height="2.363ex" role="img" focusable="false" viewBox="0 -750 7758.9 1044.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(977,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mi" transform="translate(1758.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">表</text></g><g data-mml-node="mi" transform="translate(2758.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">示</text></g><g data-mml-node="mi" transform="translate(3758.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">链</text></g><g data-mml-node="mi" transform="translate(4758.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">接</text></g><g data-mml-node="mi" transform="translate(5758.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(6758.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">重</text></g></g></g></svg></mjx-container></p></li><li class="lvl-2"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.987ex;" xmlns="http://www.w3.org/2000/svg" width="59.003ex" height="2.684ex" role="img" focusable="false" viewBox="0 -750 26079.2 1186.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,363) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(609,-292.2) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(1001.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1390.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1751.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2140.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="msub" transform="translate(3140.9,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4050.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4439.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4800.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(5189.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">越</text></g><g data-mml-node="mi" transform="translate(6189.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">相</text></g><g data-mml-node="mi" transform="translate(7189.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mo" transform="translate(8189.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8634.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">乘</text></g><g data-mml-node="mi" transform="translate(9634.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">积</text></g><g data-mml-node="mi" transform="translate(10634.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">越</text></g><g data-mml-node="mi" transform="translate(11634.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">大</text></g><g data-mml-node="mo" transform="translate(12634.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(13079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">朋</text></g><g data-mml-node="mi" transform="translate(14079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">友</text></g><g data-mml-node="mi" transform="translate(15079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(16079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(17079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(18079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">对</text></g><g data-mml-node="mi" transform="translate(19079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">自</text></g><g data-mml-node="mi" transform="translate(20079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">己</text></g><g data-mml-node="mi" transform="translate(21079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(22079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">影</text></g><g data-mml-node="mi" transform="translate(23079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">响</text></g><g data-mml-node="mi" transform="translate(24079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">更</text></g><g data-mml-node="mi" transform="translate(25079.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">大</text></g></g></g></svg></mjx-container></p></li></ul><ol start="3"><li class="lvl-3"><p>平均场信息 h3: 网络社区的普遍情绪进行聚合计算</p></li></ol><h2 id="情绪列表更新规则">情绪列表更新规则</h2><ol><li class="lvl-3"><p>效价 V 受到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.682ex;" xmlns="http://www.w3.org/2000/svg" width="5.298ex" height="2.61ex" role="img" focusable="false" viewBox="0 -852.1 2341.8 1153.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,369.2) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(609,-293.8) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1202.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1591.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1952.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>影响, 唤醒度 a 受到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.679ex;" xmlns="http://www.w3.org/2000/svg" width="16.684ex" height="3.054ex" role="img" focusable="false" viewBox="0 -1049.9 7374.4 1349.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,363) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(609,-292.2) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1001.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1390.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1751.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2140.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(2585.6,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,363) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(609,-291.5) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(3618.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4007.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4368.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4757.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(5202.3,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(0,626)"><svg width="576" height="237" x="0" y="148" viewBox="144 148 576 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(1.728,1)"></path></svg></g></g><g data-mml-node="TeXAtom" transform="translate(609,738.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(609,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6235.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6624.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(6985.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>影响</p></li><li class="lvl-3"><p>外部重置: 外部影响导致部分代理人情绪重置 – 存在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.44ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 1078.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mn" transform="translate(675,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container> 的概率重置,持续随机出现</p></li><li class="lvl-3"><p>V,A是受信息墙影响的,如果没有更为强烈的强许信息,V, a 会趋向平静(0,0)</p></li></ol><h2 id="消息传播机制">消息传播机制</h2><p><img src="https://dns.whalefall.fun/11111.png" alt=""></p><ol><li class="lvl-3"><p>消息发送</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>节点处于活跃状态</p></li><li class="lvl-2"><p>发送概率 W = 唤醒度 a * P(Myspace 数据集得来)</p></li><li class="lvl-2"><p>发送人选择: 概率选择<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.987ex;" xmlns="http://www.w3.org/2000/svg" width="60.259ex" height="2.684ex" role="img" focusable="false" viewBox="0 -750 26634.3 1186.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="TeXAtom" transform="translate(609,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1583.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1972.3,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2317.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(3317.3,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(3729.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(4729.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(5729.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(6729.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">聚</text></g><g data-mml-node="mi" transform="translate(7729.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">合</text></g><g data-mml-node="mo" transform="translate(8729.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9173.9,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(9585.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">给</text></g><g data-mml-node="mi" transform="translate(10585.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">带</text></g><g data-mml-node="mi" transform="translate(11930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">来</text></g><g data-mml-node="mi" transform="translate(12930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(13930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(14930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">绪</text></g><g data-mml-node="mi" transform="translate(15930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mi" transform="translate(16930.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mo" transform="translate(17930.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18542.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(19542.4,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(609,363) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(609,-292.2) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(20544.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(20933.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(21294.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(21683.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="msub" transform="translate(22683.3,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(23495.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(23884.3,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(24245.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(24634.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">相</text></g><g data-mml-node="mi" transform="translate(25634.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">关</text></g></g></g></svg></mjx-container>)</p></li></ul><p>$$<br>h_{ji}^{a}(t)=\frac{\sum_{m\in M_{ji}}\Theta(t,t_{m})a_{j}(t_{m})e<sup>{-\gamma</sup>{h}(t_{ji}^{lm}-t_{m})}}{\sum_{m\in M_{ji}}\Theta(t,t_{m})e<sup>{-\gamma</sup>{h}(t_{ji}<sup>{lm}-t_{m})}}e</sup>{-\gamma<sup>{h}(t-t_{ji}</sup>{lm})}<br>$$</p><p>$$<br>s_{j}(t) = \omega^{\prime} \left[ \beta \frac{W_{ij}h_{ji}^{a}(t)}{\sum_{k}W_{ik}} + (1-\beta) \frac{W_{ji}h_{ji}<sup>{a}(t)(1+h_{j}</sup>{v}(t)v_{i}(t))}{\sum_{k}W_{ik}(1+h_{k}^{v}(t)v_{i}(t))} \right]<br>$$</p><ul class="lvl-0"><li class="lvl-2"><p>消息内容为 (效价 V, 唤醒度 a)</p></li></ul><ol start="2"><li class="lvl-3"><p>消息接受</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>接受人接受消息会将消息带来的情绪放置自身情绪墙中</p></li></ul><h2 id="模型的运行机制">模型的运行机制:</h2><ol><li class="lvl-3"><p>先计算每个代理人列表的最新信息 – 更新自身情绪价值(V, a, 聚合情绪信息)</p></li><li class="lvl-3"><p>随机重置一些代理人的情绪(模拟外部刺激)</p></li><li class="lvl-3"><p>判断哪些代理状态为"在线",并且活跃状态 – 在线状态根据 Myspace 数据集的经验得到的分布<br>4.1 活跃代理会根据规则更新自己的情绪列表<br>4.2 活跃代理会发送消息,并选择接受者(经常联系的人) --会发送情绪信息(效价 V 和 唤醒度 a)</p></li></ol><h2 id="实验结果">实验结果</h2><h3 id="模拟情绪和实际数据集情绪比较">模拟情绪和实际数据集情绪比较</h3><p><img src="https://dns.whalefall.fun/wenxian2_3.png" alt=""><br>深色是 真实数据集, 灰色是模拟情绪, 存在统一单调性,情绪分布一致</p><p><img src="https://dns.whalefall.fun/wenxian2_2.png" alt=""><br>斜率(0.5 ~ 1) 表示长期相关性当 s 变大的时候(长时间尺度),N_c-Data(真实数据集)和 N_c-ABM(模拟数据集)的斜率一致, clcle 表示对照实验,如果没有外部影响,斜率不可估计,没有长期相关性(不会时间的变化而改变,而是收到事件的长期影响,表明情绪不是随机传播然后消散,而是能够持续影响,形成集体情绪状态)</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Summer</title>
      <link href="/2025/06/29/Summer/"/>
      <url>/2025/06/29/Summer/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>这是针对于暑假的一些任务安排，也是发个博客督促一下自己</p></blockquote><span id="more"></span><h2 id="任务安排">任务安排</h2><ul class="lvl-0"><li class="lvl-2"><p>针对于 <strong>并行化(MPI)</strong> 的学习 – 截止7月20日</p></li><li class="lvl-2"><p>算法学习 + 一个月的算法训练营 – 截止开学</p></li><li class="lvl-2"><p>FPGA开发版的学习(有时间的话)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毛概复习（全面版）</title>
      <link href="/2025/06/29/%E6%AF%9B%E6%A6%82%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%85%A8%E9%9D%A2%E7%89%88%EF%BC%89/"/>
      <url>/2025/06/29/%E6%AF%9B%E6%A6%82%E5%A4%8D%E4%B9%A0%EF%BC%88%E5%85%A8%E9%9D%A2%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>毛概书 1-4章,6-8章书本知识总结</p></blockquote><span id="more"></span><h1>导论</h1><h2 id="马克思主义中国化的意义">马克思主义中国化的意义</h2><ul class="lvl-0"><li class="lvl-2"><p>马克思主义必须中国化才能落地生根，本土化才能深入人心</p></li><li class="lvl-2"><p>马克思主义中国化同时包含着马克思主义时代化的意蕴</p></li><li class="lvl-2"><p>推进马克思主义中国化时代化，是马克思主义理论本身发展的内在要求</p></li><li class="lvl-2"><p>推进马克思主义中国化，时代化，是解决中国实际问题的客观需要只有与中国国情相结合，与时代发展同进步，马克思主义才能真正的解决中国实际问题马克思主义只有实现中国化，时代化，才能不断发展自身，始终保持蓬勃生机和旺盛活力</p></li></ul><h2 id="马克思主义中国化时代化的内涵">马克思主义中国化时代化的内涵</h2><p>马克思主义中国化时代化，就是立足中国国情和时代特点，坚持把马克思主义基本原理同中国具体实际相结合，同中华优秀传统文化相结合<br>“解决中国问题”和“创造些新的东西”实际上指向马克思主义中国化时代化的科学内涵，具体有以下三层意思</p><ul class="lvl-0"><li class="lvl-2"><p>运用马克思主义的立场，观点和方法，观察时代，把握时代，引领时代，解决中国革命，建设，改革中的实际问题。</p></li><li class="lvl-2"><p>总结和提炼中国革命，建设，改革的实践经验并将其上升为理论，不断丰富和发展马克思主义的理论宝库，赋予马克思主义以新的时代内涵。</p></li><li class="lvl-2"><p>运用中国人民喜闻乐见的民族语言来阐述马克思主义，使其植根于中华优秀传统文化的土壤之中，具有中国特色，中国风格，中国气派。</p></li></ul><h2 id="如何做？–马克思主义中国化时代化">如何做？–马克思主义中国化时代化</h2><p>准确把握马克思主义中国化时代化的科学内涵，要做到坚持马克思主义与发展马克思主义相统一</p><ul class="lvl-0"><li class="lvl-2"><p>坚持马克思主义基本原理和贯穿其中的立场，观点，方法，坚定不移坚持马克思主义知道地位，任何时候任何情况都不动摇</p></li><li class="lvl-2"><p>坚持马克思主义，一定要有发展的观点，一切以实际为着眼于马克思主义理论的应用，着眼于对实际问题的理论思考，着眼于新的实践和发展</p></li></ul><h2 id="马克思主义中国化时代化的发展历程">马克思主义中国化时代化的发展历程</h2><ul class="lvl-0"><li class="lvl-2"><p>新民主主义革命时期 – 把马克思主义基本原理和中国具体实际结合起来，开辟了农村包围城市，武装夺取政权的革命道路，创立了毛泽东思想</p></li><li class="lvl-2"><p>社会主义革命和建设时期 – 提出了马克思主义基本原理同中国具体实践进行“二次结合”，提出了“社会主义建设”一系列重要思想</p></li><li class="lvl-2"><p>毛泽东思想是马克思中国化时代化的第一次历史性飞跃</p></li><li class="lvl-2"><p>1978年（十一届三中全会）：开启了改革开放和社会主义现代化建设新时期，基于“什么是社会主义”，“怎么建设社会主义”，创立的邓小平理论</p></li><li class="lvl-2"><p>十三届四中全会：以江泽民为代表的党领导，基于“什么是社会主义”，“怎么建设社会主义和建设什么样的党”，“怎样建设党的认识”，形成了“三个代表”的重要思想</p></li><li class="lvl-2"><p>党的十六大：以胡锦涛为代表的党领导，形成了“科学发展观”</p></li><li class="lvl-2"><p>党的十八大：以习近平为代表的党领导，创立了习近平新时代中国特色社会主义思想（与中国优秀传统文化，与中国实际情况相结合），实现了马克思主义中国化，时代化的新飞跃</p></li></ul><h2 id="马克思主义中国化理论成果和关系（I）">马克思主义中国化理论成果和关系（I）</h2><ul class="lvl-0"><li class="lvl-2"><p>马克思主义中国化时代化理论成果：一脉相承又与时俱进的关系</p></li><li class="lvl-2"><p>毛泽东蕴含的马克思主义的立场，观点和方法，为中国特色社会主义理论提供了基本的遵循原理。</p></li><li class="lvl-2"><p>实事求是，群众路线，独立自主是毛泽东思想活的灵魂</p></li><li class="lvl-2"><p>中国特色社会主义理论体系在新的历史条件下进一步丰富和发展了毛泽东思想</p></li><li class="lvl-2"><p>毛泽东思想和中国特色社会主义理论体系以独创性的理论成果丰富和发展了马克思主义，都是马克思主义在中国的运用和发展</p></li><li class="lvl-2"><p>三者都是党和国家必须长期坚持的指导思想，是全国各族人民团结奋斗的共同思想基础</p></li></ul><h1>毛泽东思想和历史地位</h1><p>中国共产党领导人民进行革命和建设的成功实践是毛泽东思想形成和发展的实践基础</p><h2 id="发展过程">发展过程</h2><ul class="lvl-0"><li class="lvl-2"><p>大革命时期：毛泽东思想开始萌芽 – 新民主主义革命基本思想的提出</p></li><li class="lvl-2"><p>土地革命：毛泽东思想的初步形成 – “农村包围城市，武装夺取政权”</p></li><li class="lvl-2"><p>遵义会议：毛泽东思想的成熟 – “确立了毛泽东的领导地位”，毛泽东在对革命实践经验和教训科学总结的基础上，系统阐述了新民主主义革命理论，实现了马克思主义与中国革命实践相结合的历史性飞跃</p></li></ul><h2 id="毛泽东思想主要内容">毛泽东思想主要内容</h2><ul class="lvl-0"><li class="lvl-2"><p>新民主主义革命理论</p></li><li class="lvl-2"><p>社会主义革命和社会主义建设理论</p></li><li class="lvl-2"><p>革命军队建设和军事战略理论</p></li><li class="lvl-2"><p>政策和策略的理论</p></li><li class="lvl-2"><p>思想政治工作和文化工作的理论</p></li><li class="lvl-2"><p>党的建设理论</p></li></ul><h2 id="毛泽东思想的灵魂">毛泽东思想的灵魂</h2><p>三个方面：实事求是，群众路线，独立自主</p><ul class="lvl-0"><li class="lvl-2"><p>实事求是：一切从实际出发，理论联系实际，坚持在实践中检验真理和发展真理。是中国共产党认识世界，改造世界的根本要求，是中国共产党的思想路线。如何实现？</p></li><li class="lvl-2"><p>深入实际了解事物的本来面貌，把握事物内在必然联系，按照客观规律办事</p></li><li class="lvl-2"><p>清醒认识和正确把握我国基本国情</p></li><li class="lvl-2"><p>不断推进实践基础上的理论创新</p></li><li class="lvl-2"><p>群众路线：一切为了群众，一切依靠群众，从群众中来，到群众中去如何实现？</p></li><li class="lvl-2"><p>坚持人民是推动历史发展的根本力量</p></li><li class="lvl-2"><p>坚持全心全意为人民服务的根本宗旨</p></li><li class="lvl-2"><p>保持党同人民群众的血肉联系</p></li><li class="lvl-2"><p>独立自主：坚定不移的维护民族独立，捍卫国家主权，积极争取外援，学习世界一切对我们有益的先进事物如何实现？</p></li><li class="lvl-2"><p>坚持中国的事情必须由中国人民自己作主</p></li><li class="lvl-2"><p>坚持独立自主的和平外交策略，坚定不移走和平发展道路</p></li></ul><h2 id="毛泽东思想的历史地位">毛泽东思想的历史地位</h2><ul class="lvl-0"><li class="lvl-2"><p>马克思主义中国化时代化的第一个重大理论成果</p></li><li class="lvl-2"><p>中国革命和建设的科学指南</p></li><li class="lvl-2"><p>中国共产党和中国人民的宝贵精神财富</p></li></ul><p>毛泽东思想是马克思主义中国化时代化的第一个重大理论成果，是马克思主义在中国的运用和发展，被实践证明了的关于中国革命和建设的正确理论原则和经验总结，是中国共产党集体智慧结晶，是党必须长期坚持的指导思想，为中国特色社会主义理论体系的形成奠定了理论基础</p><h1>新民主主义革命理论</h1><h2 id="新民主主义理论形成的依据">新民主主义理论形成的依据</h2><ul class="lvl-0"><li class="lvl-2"><p>近代中国国情 – 半殖民地半封建社会（不可能发展成为资本主义国家）</p></li><li class="lvl-2"><p>主要矛盾：帝国主义和中华民族的矛盾，封建主义和人民大众的矛盾</p></li><li class="lvl-2"><p>近代中国革命的根本任务：推翻帝国主义，封建主义和官僚资本主义的统治</p></li></ul><h2 id="近代中国革命的时代特征">近代中国革命的时代特征</h2><ul class="lvl-0"><li class="lvl-2"><p>主要矛盾决定了中国革命仍然是资产阶级民主革命</p></li><li class="lvl-2"><p>俄国十月革命：标志着中国资产阶级民主革命的时代背景发生了根本转换</p></li><li class="lvl-2"><p>五四革命：标志着中国无产阶级开始作为独立的政治力量登上历史舞台，成为革命领导力量，马克思主义成为中国革命的指导思想，中国革命进入新民主主义革命阶段</p></li></ul><h2 id="近代中国革命理论的实践基础">近代中国革命理论的实践基础</h2><ul class="lvl-0"><li class="lvl-2"><p>旧民主主义革命的失败呼唤新的革命理论</p></li><li class="lvl-2"><p>新民主主义革命的艰辛探索奠定了革命理论形成的实践基础</p></li></ul><h2 id="新民主主义革命内容和纲领">新民主主义革命内容和纲领</h2><h3 id="新民主主义革命总路线">新民主主义革命总路线</h3><ul class="lvl-0"><li class="lvl-2"><p>无产阶级领导的，人民大众的，反对帝国主义，封建主义和官僚资本主义的革命</p></li><li class="lvl-2"><p>指明了中国革命的对象，动力，领导力量，性质和前途</p></li></ul><h3 id="新民主主义革命的对象">新民主主义革命的对象</h3><ul class="lvl-0"><li class="lvl-2"><p>帝国主义，封建主义和官僚资本主义</p></li></ul><h3 id="新民主主义革命的动力">新民主主义革命的动力</h3><ul class="lvl-0"><li class="lvl-2"><p>无产阶级，农民阶级，城市小资产阶级和民族资产阶级</p></li><li class="lvl-2"><p>无产阶级是中国革命的最基本的动力</p></li></ul><h3 id="新民主主义革命的领导力量">新民主主义革命的领导力量</h3><ul class="lvl-0"><li class="lvl-2"><p>无产阶级</p></li><li class="lvl-2"><p>决定新民主和旧民主革命：是无产阶级还是资产阶级</p></li></ul><h3 id="新民主主义革命的性质和前途">新民主主义革命的性质和前途</h3><ul class="lvl-0"><li class="lvl-2"><p>近代中国半殖民地半封建社会的性质和中国革命的历史任务，决定了新民主主义革命性质不是无产阶级革命，而是资产阶级民主革命</p></li></ul><ol><li class="lvl-3"><p>新旧民主主义革命的不同和特点</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>新民主主义革命处于世界无产阶级社会主义革命的时代，是世界无产阶级社会主义革命的一部分</p></li><li class="lvl-2"><p>革命领导力量：无产阶级</p></li><li class="lvl-2"><p>革命指导思想：马克思主义</p></li><li class="lvl-2"><p>革命的前途：实现社会主义</p></li></ul><ol start="2"><li class="lvl-3"><p>新民主主义革命和社会主义革命的关系</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>新民主主义革命仍然属于资产阶级民主主义革命的范畴（不是实现无产阶级专政，是革命阶级联合专政）。社会主义革命是无产阶级性质的革命，目的是消灭资本主义剥削制度和改造小生产的私有制</p></li><li class="lvl-2"><p>新民主主义革命与社会主义革命又是相互联系，紧密衔接的</p></li><li class="lvl-2"><p>民主主义革命是社会主义革命的必要准备，社会主义革命是民主主义革命的必然趋势</p></li></ul><h2 id="新民主主义革命纲领">新民主主义革命纲领</h2><ol><li class="lvl-3"><p>政治纲领推翻帝国主义和封建主义的统治，建立一个无产阶级领导的，以工农联盟为基础的，各革命阶级联合专政的新民主主义共和国</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>国体：无产阶级领导的以工农联盟为基础的，多个革命阶级联合专政</p></li><li class="lvl-2"><p>政体：实行民主集中制的人民代表大会制度</p></li></ul><ol start="2"><li class="lvl-3"><p>经济纲领没收封建地主阶级的土地归农民所有，没收官僚资产阶级的垄断资本归新民主主义的国家所有，保护民族工商业</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>革命的主要内容：没收封建地主土地归农民所有</p></li></ul><ol start="3"><li class="lvl-3"><p>文化纲领新民主主义文化，就是无产阶级领导的人民大众的反帝反封建的文化，即民族的科学的大众的文化</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>新民主主义文化是民族的</p></li><li class="lvl-2"><p>新民主主义文化是科学的</p></li><li class="lvl-2"><p>新民主主义文化是大众的</p></li></ul><h2 id="新民主主义革命的道路形成的必然性和三大法宝">新民主主义革命的道路形成的必然性和三大法宝</h2><ol><li class="lvl-3"><p>中国革命为什么能走农村包围城市，武装夺取政权的道路？ – 提供了必然性</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>结合中国所处的时代特点和具体国情决定的</p></li><li class="lvl-2"><p>中国社会受封建主义，帝国主义的压迫（内忧外患）</p></li><li class="lvl-2"><p>近代中国是一个农业大国，农民是无产阶级可靠的同盟军和革命的主力军</p></li></ul><ol start="2"><li class="lvl-3"><p>中国革命为什么能走农村包围城市，武装夺取政权的道路？ – 提供了可能性</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>结合中国所处的时代特点和具体国情决定的</p></li><li class="lvl-2"><p>近代中国广大农村深受压迫和剥削，革命的群众基础好</p></li><li class="lvl-2"><p>全国革命形势继续向前发展，为在农村建设革命根据地提供了客观条件</p></li><li class="lvl-2"><p>正式红军的存在：为农村革命根据地的创立和发展提供了坚强的后盾</p></li><li class="lvl-2"><p>党的领导有力量和政策的不错误，为农村革命根据地的建设和发展提供了重要的主观意熬煎</p></li></ul><ol start="3"><li class="lvl-3"><p>新民主主义革命的三大法宝</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>统一战线：建立最广泛的统一战线</p><ul class="lvl-2"><li class="lvl-6">中国半殖民地半封建社会的阶级状况所决定的</li><li class="lvl-6">中国革命的长期性，残酷性和发展不平衡性</li></ul></li><li class="lvl-2"><p>武装斗争：是中国革命的特点和优点</p></li><li class="lvl-2"><p>党的建设：中国共产党要领导革命取得胜利，必须不断加强党的思想建设，组织建设和作风建设统一战线和武装斗争是中国革命的两个基本特点，是战胜敌人的基本武器。</p></li></ul><ol start="3"><li class="lvl-3"><p>中国共产党在加强自身建设中积累了丰富的经验</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>必要把思想建设放到党的建设的首位</p></li><li class="lvl-2"><p>必要任何时候都重视党的组织建设</p></li><li class="lvl-2"><p>必须重视党的作风建设</p></li><li class="lvl-2"><p>必须联系党的政治路线，加强党的建设</p></li></ul><h2 id="新民主主义革命理论的意义（I）">新民主主义革命理论的意义（I）</h2><ul class="lvl-0"><li class="lvl-2"><p>新民主主义革命理论是毛泽东等中国共产党人，把马克思主义基本原理和中国革命具体实践相结合，在认真总结中国革命实践经验基础上形成的具有独创性的革命理论</p></li><li class="lvl-2"><p>揭示了近代中国革命发展的客观规律，解决了中国革命的一系列发展问题，科学的回答了中国共产党的前进方向，极大的丰富了马克思主义的理论宝库</p></li><li class="lvl-2"><p>在新民主主义革命理论的指导下，实现了新民主主义革命的胜利，实现了民族独立和人民解放</p></li></ul><h1>社会主义改造理论</h1><h2 id="新民主主义到社会主义的转变">新民主主义到社会主义的转变</h2><ul class="lvl-0"><li class="lvl-2"><p>新中国成立 – 社会主义改造基本完成：我国社会性质是新民主主义社会（是新民主主义向社会主义转变的过渡性社会形态）</p><ul class="lvl-2"><li class="lvl-6">五种经济成分：社会主义性质的国营经济，半社会主义的合作社经济，农民和手工业者的个体经济，私人资本主义经济和国家资本主义经济</li><li class="lvl-6">三种主要经济成分：社会主义经济，个体经济，资本主义经济</li><li class="lvl-6">阶级构成：工人阶级，农民阶级，小资产阶级，民族资产阶级</li><li class="lvl-6">工人阶级和资产阶级逐渐成为我国社会的主要矛盾</li></ul></li></ul><h2 id="党在过渡时期的路线和依据">党在过渡时期的路线和依据</h2><p><strong>一化三改</strong></p><ul class="lvl-0"><li class="lvl-2"><p>一化：社会主义工业化</p></li><li class="lvl-2"><p>三改：对个体农业，手工业，资本主义工商业的社会主义改造</p></li></ul><p>一化三改的联系：</p><ul class="lvl-0"><li class="lvl-2"><p>他们之间相互联系，两者相辅相成，相互促进</p></li><li class="lvl-2"><p>这是一条社会主义建设和社会主义改造同时并举的路线，体现了社会主义工业化和社会主义改造的紧密集合</p></li><li class="lvl-2"><p>体现了解放生产力和发展生产力，变革生产关系和发展生产力的有机统一</p></li></ul><h2 id="社会主义改造道路">社会主义改造道路</h2><ol><li class="lvl-3"><p>农业，手工业的社会主义改造</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>积极引导农民组织起来，走互助合作的道路</p></li><li class="lvl-2"><p>遵循自愿互利，典型示范和国家帮助的原则，以互助合作的优越性吸引农民走互助合作的道路</p></li><li class="lvl-2"><p>正确分析农村的阶级和阶层情况，制定正确的阶级政策</p></li><li class="lvl-2"><p>坚持积极领导，稳步前进的方针，采取循序渐进的步骤</p></li></ul><ol start="2"><li class="lvl-3"><p>资本主义工商业的社会主义改造</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>用和平赎买的方法改造资本主义工商业</p></li><li class="lvl-2"><p>采取从低级到高级的国家资本主义过渡形式</p></li><li class="lvl-2"><p>把资本主义工商业者改造成为自食其力的社会主义劳动者</p></li></ul><ol start="3"><li class="lvl-3"><p>社会主义改造的历史经验</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>坚持社会社会主义工业化建设与社会主义改造同时进行、</p></li><li class="lvl-2"><p>采取积极引导，逐步过渡到方式</p></li><li class="lvl-2"><p>用和平的方法进行改造</p></li></ul><ol start="4"><li class="lvl-3"><p>意义：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>没有造成生产力的破坏，反而促进了工农业和整个国民经济的发展</p></li><li class="lvl-2"><p>没有引起巨大的社会动荡，反而极大加强了人民的团结</p></li><li class="lvl-2"><p>促进生产力发展，推动社会进步，改善人民生活</p></li><li class="lvl-2"><p>社会主义改造基本完成标志着中国历史长达数千年的阶级剥削制度的结束和社会主义基本制度的确立</p></li></ul><h2 id="确立社会主义制度的重大意义">确立社会主义制度的重大意义</h2><ul class="lvl-0"><li class="lvl-2"><p>是中国历史上最深刻最伟大的社会变革，为当代中国一切发展进步奠定了制度基础，也为中国特色社会主义制度的创新和发展提供了重要前提</p></li><li class="lvl-2"><p>极大的提高了工人阶级和广大劳动人民的积极性和创造性，极大地促进了我国社会生产力的发展</p></li><li class="lvl-2"><p>使广大劳动人民真正成为国家的主人</p></li><li class="lvl-2"><p>这是世界社会主义发展史又一个历史性的伟大胜利，进一步改变了世界的政治经济格局，增强了社会主义的力量，对维护世界和平产生了积极的影响</p></li><li class="lvl-2"><p>是马克思主义关于社会主义革命理论在中国的正确运用和创造性发展，总结丰富和发展了科学社会主义理论</p></li></ul><h1>社会主义建设道路探索的理论成果</h1><h2 id="理论成果">理论成果</h2><ul class="lvl-0"><li class="lvl-2"><p>调动一切积极因素为社会主义事业服务</p><ul class="lvl-2"><li class="lvl-6">论十大关系：标志着党探索中国社会主义建设道路的良好开端（总结社会主义建设经验）怎么实现？</li><li class="lvl-6">必须坚持中国共产党的领导</li><li class="lvl-6">必须发展社会主义民主专政</li></ul></li><li class="lvl-2"><p>正确认识和处理社会主义社会矛盾的思想</p><ul class="lvl-2"><li class="lvl-6">生产力和生产关系的矛盾，上层建筑和经济基础的矛盾</li><li class="lvl-6">主要矛盾：人民对于经济文化迅速发展的需要同当前经济文化不能满足人民需要的状态之间的矛盾（人民对于建立先进的工业的要求同落后的农业国的现实之间的矛盾）</li><li class="lvl-6">正确处理不同性质社会矛盾的基本方法：专政和民主</li></ul></li><li class="lvl-2"><p>走中国工业化道路的思想</p><ul class="lvl-2"><li class="lvl-6">为什么要走：实现工业化是中国近代以来历史发展的必然要求，也是民族独立和国家富强的必要条件</li><li class="lvl-6">新中国的成立，为我国实现工业化提供了根本的政治前提</li><li class="lvl-6">毛泽东提出了以工业为主导，以农轻重为序发展国民经济的总方针怎么实现？</li><li class="lvl-6">必须采取正确的经济建设方针</li><li class="lvl-6">必须调整和完善所有制结构</li><li class="lvl-6">必须探索适合我国情况的经济体制和运行机制走工业化道路的思想，是党探索我国社会主义建设道路的一个重要思想，加快我国社会主义建设事业发展具有重要意义</li></ul></li></ul><h2 id="初步探索的意义">初步探索的意义</h2><ul class="lvl-0"><li class="lvl-2"><p>巩固和发展了我国社会主义制度</p></li><li class="lvl-2"><p>为开创中国特色社会主义提供了宝贵经验，理论准备，物质基础</p></li><li class="lvl-2"><p>丰富了科学社会主义的理论和实践</p></li></ul><h2 id="初步探索的经验教训">初步探索的经验教训</h2><ul class="lvl-0"><li class="lvl-2"><p>必须把马克思主义与中国实际相结合，探索符合中国特点的社会主义建设道路</p></li><li class="lvl-2"><p>必须正确认识社会主义社会的主要矛盾和根本任务，集中力量发展生产力</p></li><li class="lvl-2"><p>必须从实际出发进行社会主义建设，建设规模和速度要与国力相适应，不能急于求成</p></li><li class="lvl-2"><p>必须发展社会主义民主，健全社会主义法制</p></li><li class="lvl-2"><p>必须坚持党党民主集中制和集体领导制度，加强执政党建设</p></li><li class="lvl-2"><p>必须坚持对外开放，借鉴和吸收人类文明成果建设社会主义</p></li></ul><h1>IMPORTANT（后面全是）</h1><h1>邓小平理论</h1><blockquote><p>搞清楚“什么是社会主义，怎样建设社会主义”</p></blockquote><h2 id="理论出现背景">理论出现背景</h2><ul class="lvl-0"><li class="lvl-2"><p><strong>和平与发展</strong>成为时代的主题（时代背景）</p></li><li class="lvl-2"><p>社会主义建设的<strong>经验教训</strong>（历史依据）</p></li><li class="lvl-2"><p><strong>改革开放和现代化建设</strong>的实践（现实依据）</p></li></ul><h2 id="邓小平对社会主义本质的概括">邓小平对社会主义本质的概括</h2><p>概括：</p><ul class="lvl-0"><li class="lvl-2"><p>社会主义本质是<strong>解放生产力，发展生产力，消灭剥削，消除两极分化，最终实现共同富裕</strong><br>内容：</p></li><li class="lvl-2"><p>坚持了科学社会主义的基本原则，又赋予其鲜明的时代特色，是探索中国特色社会主义取得的重大理论成果，是对马克思主义的重大发展</p></li><li class="lvl-2"><p>突出强调解放和发展生产力在社会主义发展中的重要地位。纠正了过去的发展生产力的错误观念，反映了中国社会主义整个历史阶段尤其是初级阶段特别需要<strong>注重生产力发展的迫切需要</strong>，明确表示，社会主义制度建立后需要<strong>改革</strong>来进一步解放生产力</p></li><li class="lvl-2"><p>突出强调“<strong>消除剥削，消除两极分化，最终达到共同富裕”</strong>，从生产关系和发展目标角度认识和把握社会主义本质</p><ul class="lvl-2"><li class="lvl-6">揭示了资本主义建立在生产资料私有制上，必然产生剥削和两极分化，消除剥削，消除两极分化<strong>只有在坚持公有制和按劳分配为主体</strong>的条件下才能实现</li><li class="lvl-6">阐明了社会主义社会发展生产力的目的不是为了少数人谋利，是要让全体社会主义成员过上富裕幸福的生活，是为了实现共同富裕</li><li class="lvl-6">是为我们坚持和完善公有制指出了明确的方向</li></ul></li><li class="lvl-2"><p>反映了<strong>人民的利益和时代的要求</strong>，分清了不合乎时代进步和社会发展规律的模糊观念，摆脱了<strong>长期以来拘泥</strong>于具体模式而忽略社会主义本质的错误倾向（<strong>固守成规</strong>）</p></li><li class="lvl-2"><p>这对于我们在坚持社会主义基本制度的基础上推进改革，指导改革沿着合乎社会主义本质要求的方向发展，对于建设中国特色社会主义，具有重大的政治意义，理论意义和实践意义</p></li></ul><h2 id="邓小平理论的精髓">邓小平理论的精髓</h2><blockquote class="alert alert-note"><p>邓小平理论的思想主要是 不要固守成规，摆脱固定思维，看重实际发展</p></blockquote><p><strong>解放思想，实事求是</strong>是邓小平理论的精髓</p><ol><li class="lvl-3"><p>党的思想路线的重新确立的意义（坚持解放思想，实事求是的思想路线）</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>有力推动和保证了拨乱反正的进行</p><ul class="lvl-2"><li class="lvl-6">“解放思想，实事求是，团结向前看” --重要讲话，<strong>标志着党重新确立马克思主义的思想路线，政治路线和组织路线</strong></li></ul></li><li class="lvl-2"><p>破除了<strong>僵化的社会主义模式观念，坚持走自己的路</strong></p></li><li class="lvl-2"><p>一切从社会主义初级阶段的<strong>实际出发</strong></p></li><li class="lvl-2"><p>坚持以“三个有利于”作为检验一切工作是非得失的根本标准，破除了改革开放离开发展生产力的思维定势，把我国的改革开放和现代化建设推进到一个新的阶段</p></li></ul><p><strong>三个有利于标准</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>是否有利于发展社会主义社会的<strong>生产力</strong></p></li><li class="lvl-2"><p>是否有利于增强社会主义国家的<strong>综合国力</strong></p></li><li class="lvl-2"><p>是否有利于提高人民的<strong>生活水平</strong></p></li></ul><ol start="2"><li class="lvl-3"><p>坚持实事求是，解放思想的意义</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>我们党<strong>科学地评价了毛泽东，维护了毛泽东思想的历史地位</strong></p></li><li class="lvl-2"><p>我们党从社会主义初级阶段实际出发，<strong>确立了社会主义初级阶段基本路线</strong>，成功找到了在中国建设社会主义的正确道路，开创了中国特色社会主义</p></li><li class="lvl-2"><p>在实行家庭联产承包责任制，发展乡镇企业，创办经济特区，自觉地把思想认识从那些不合时宜的观念，做法和体制的束缚中解放出来，从对马克思主义的错误和教条式的理解中解放出来，为改革开放提供了体现时代性，把握规律性，<strong>富于创新性的理论指导，开辟了马克思主义新境界</strong></p></li></ul><h2 id="邓小平理论主要内容">邓小平理论主要内容</h2><ol><li class="lvl-3"><p>社会主义初级阶段理论党的十三大系统的阐述了社会主义初级阶段的科学内涵</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>阐明了<strong>社会主义初级阶段</strong></p><ul class="lvl-2"><li class="lvl-6">我国已经是社会主义社会</li><li class="lvl-6">我国还是社会主义初级阶段</li></ul></li><li class="lvl-2"><p>强调了社会主义初级阶段的<strong>长期性</strong></p></li><li class="lvl-2"><p>阐述了社会主义初级阶段的<strong>基本特征</strong></p></li></ul><ol start="2"><li class="lvl-3"><p>党在社会主义初级阶段的基本路线</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>领导和团结全国各族人民，以<strong>经济建设为中心</strong>，坚持四项基本原则，坚持改革开放，自理更生，艰苦创立，为把我国建设成为富强，民主，文明的社会主义现代化国家而奋斗</p></li><li class="lvl-2"><p>“<strong>以经济建设为中心，坚持四项基本原则，坚持改革开放</strong>” ==== “一个中心，两个基本点”</p></li></ul><ol start="3"><li class="lvl-3"><p>社会主义根本任务的理论</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p><strong>根本任务是发展生产力</strong></p></li></ul><ol start="4"><li class="lvl-3"><p>分三步走基本实现现代化的发展战略</p></li><li class="lvl-3"><p>社会主义改革开放理论</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>党的十一届三中全会将党和国家的工作中心转移到经济建设上来，实行改革开放的历史性决策，实现了新中国成立以来党的历史上具有深远意义的转折，开启了改革开放和社会主义现代化的伟大征程</p></li><li class="lvl-2"><p>改革是一场深刻的社会变革，是中国的第二次革命</p></li><li class="lvl-2"><p><strong>改革是社会主义社会发展的直接动力</strong></p></li><li class="lvl-2"><p>开放也是改革，对外开放是建设中国特色社会主义的一项基本国策</p></li><li class="lvl-2"><p>改革开放是当代中国的鲜明标志和活力源泉，是决定中国命运的关键一招，也是实现中华民族伟大复兴的关键一招，改革只有进行时没有完成时</p></li></ul><ol start="6"><li class="lvl-3"><p>社会主义市场经济理论</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>正确认识和处理计划和市场经济</p></li></ul><ol start="7"><li class="lvl-3"><p>“两手抓，两手都要硬”</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>社会主义精神文明是社会主义社会的重要特征，社会主义发展应实现物质文明和精神文明的共同进步</p></li><li class="lvl-2"><p><strong>坚持了辩证法的全面性，坚持了两点论和重点论的统一</strong>，有利于克服实际工作中的“一手硬，一手软”的问题，为我们党的领导方法和工作方法充实了新的内容</p></li></ul><ol start="8"><li class="lvl-3"><p>“一国两制” 与 祖国统一</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>一国两制作为实现祖国和平统一的具有重大战略意义的构想，包含了丰富的科学内涵</p><ul class="lvl-2"><li class="lvl-6">坚持一个中国，这是和平统一，一国两制的核心，是发展两岸关系和实现和平统一的基础</li></ul></li><li class="lvl-2"><p><strong>一国两制的构想是邓小平运用辩证唯物主义和历史唯物主义，坚持实事求是，把和平共处原则用于解决一个国家的统一问题，体现了坚持祖国统一，维护国家主权的原则性，又体现了照顾历史实际和现实可能的灵活性，是对马克思主义国家学说的创造性发展</strong></p></li></ul><ol start="9"><li class="lvl-3"><p>中国特色社会主义外交和国际战略</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>和平发展成为时代的主题</p></li><li class="lvl-2"><p>明确维护我国的独立和主权，促进世界的和平与发展，是中国外交政策的基本目标</p></li><li class="lvl-2"><p>坚持和平共处五项原则的基础上，建立和平，稳定，公正，合理的国际新秩序</p></li><li class="lvl-2"><p>坚持独立自主，完全平等，互相尊重，互不干涉内部事务的原则处理同各国共产党和其他政党的关系</p></li></ul><ol start="10"><li class="lvl-4"><p>党的理论建设</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>加强党的建设，是我们党领导人民取得革命和建设胜利的一个法宝</p></li><li class="lvl-2"><p><strong>重视马克思主义理论学习</strong>是加强党的建设</p></li><li class="lvl-2"><p>加强<strong>组织建设</strong>是党的建设的重要环节</p></li><li class="lvl-2"><p>加强党的建设必须打好<strong>党风建设</strong>这场硬仗</p></li><li class="lvl-2"><p>加强党的建设一定要重视<strong>制度建设</strong></p></li></ul><h2 id="邓小平理论的历史地位（I）">邓小平理论的历史地位（I）</h2><ul class="lvl-0"><li class="lvl-2"><p>马克思列宁主义，毛泽东思想的继承和发展</p></li><li class="lvl-2"><p><strong>中国特色社会主义理论体系的开篇之作</strong></p></li><li class="lvl-2"><p>改革开放和社会主义现代化建设的科学指南</p></li></ul><h1>三个代表的重要思想</h1><h2 id="出现背景">出现背景</h2><ul class="lvl-0"><li class="lvl-2"><p>基于<strong>冷战结束后的国际局势的科学判断</strong></p></li><li class="lvl-2"><p>基于科学判断<strong>党的历史方位和总结历史经验</strong></p></li><li class="lvl-2"><p>基于<strong>建设中国特色社会主义的伟大实践</strong></p></li></ul><h2 id="核心观点">核心观点</h2><ol><li class="lvl-3"><p><strong>始终代表中国先进生产力的发展需求</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>始终代表中国先进生产力的发展要求，就是党的理论，路线，纲领，方针和各项工作，必须努力符合生产力发展的规律，体现不断推动社会生产力的解放和发展的要求，尤其是体现推动先进生产力发展的要求，通过发展生产力不断提高人民群众的生活水平</p></li><li class="lvl-2"><p>社会主义根本任务是发展生产力，马克思主义执政党必须高度重视解放和发展生产力</p></li><li class="lvl-2"><p>实现社会主义现代会，最根本的就是要通过改革不断促进先进生产力的发展，使我国形成发达的生产力</p></li><li class="lvl-2"><p>广大工人，农民和知识分子始终是推动我国先进生产力发展和社会全面进步的根本力量</p></li><li class="lvl-2"><p>人是生产力中最活跃的因素。开发人力资源，加强人力资源能力建设，是关系我国发展的重大问题</p></li><li class="lvl-2"><p>科学技术是第一生产力，是先进生产力的集中体现和主要标志</p></li><li class="lvl-2"><p>发展生产力要依靠创新</p></li><li class="lvl-2"><p>先进生产力的发展是同生产关系，上层建筑的不断完善密切联系在一起的。各个方面都要不断体现先进生产力的发展需求</p></li></ul><ol start="2"><li class="lvl-3"><p><strong>始终代表中国先进文化的前进方向</strong><br>始终代表中国先进文化的前进方向，是党的理论，路线，纲领和各项工作，必须努力体现发展面向现代化，面向世界，面向未来的，民族的科学的大众的社会主义文化的要求，促进全民族思想道德素质和科学文化素质的不断提高，为我国经济发展和社会进步提供精神动力和智力支持</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>发展先进文化，是实现社会主义现代化的<strong>战略任务</strong></p></li><li class="lvl-2"><p>发展先进文化，就是发展中国特色社会主义的文化</p></li><li class="lvl-2"><p>发展先进文化，就是<strong>发展面向现代化，面向世界，面向未来的，民族的科学的大众的社会主义文化</strong><br>HOT TO DO</p></li><li class="lvl-2"><p>发展先进文化，要把弘扬主旋律和提倡多样化统一起来，支持健康有益文化，努力改造落后文化，坚持抵制腐朽文化</p><ul class="lvl-2"><li class="lvl-6">弘扬民族精神是发展先进文化极为重要的任务</li><li class="lvl-6">加强社会主义思想道德建设，是发展先进文化的重要内容和中心环节</li><li class="lvl-6">做好思想政治工作是发展先进文化的重要任务</li></ul></li><li class="lvl-2"><p>发展先进文化，需要充分发挥新闻媒体的作用</p></li><li class="lvl-2"><p>发展先进文化，需要重视社会主义文艺事业的繁荣发展</p></li><li class="lvl-2"><p>发展先进文化，必须大力推进文化体制改革</p></li></ul><ol start="3"><li class="lvl-3"><p><strong>始终代表中国最广大人民的根本利益</strong><br>始终代表中最最广大人民的根本利益，就是党的理论，路线，纲领和各项工作，<strong>必须坚持把人民的根本的利益作为出发点和归宿，充分发挥人民群众的积极性主动性创造性</strong>，在社会不断发展进步的基础上，使人民群众不断获得切实的经济，政治，文化利益</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>人民是我们国家的主人，是决定我国前途和命运的根本力量</p></li><li class="lvl-2"><p>我们党来自人民，植根于人民，服务于人民</p></li><li class="lvl-2"><p>我们党始终坚持人民的利益高于一切</p></li><li class="lvl-2"><p>我们党必须始终代表中国最先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益。 – <strong>这是对三个代表思想的集中概括</strong></p></li></ul><h2 id="三个代表的主要内容">三个代表的主要内容</h2><ol><li class="lvl-3"><p><strong>发展是党执政兴国的第一要务</strong></p></li><li class="lvl-3"><p><strong>建立社会主义市场经济体制</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>建立社会主义市场经济体制，必须坚持和完善公有制为主体，多种多有制经济共同发展的社会主义基本经济制度</p></li><li class="lvl-2"><p>进一步探索公有制特别是国有制的多种有效实现形式</p></li><li class="lvl-2"><p>发挥市场机制的作用和国家宏观调控，是社会主义市场经济体制的本质要求</p></li><li class="lvl-2"><p>完善适应社会主义市场经济体制的分配关系</p></li><li class="lvl-2"><p>建立和完善社会保障体系，是建立社会主义市场经济体制的重要内容</p></li></ul><ol start="3"><li class="lvl-3"><p><strong>全面建设小康社会</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>全面建设小康社会，是实现现代化建设第三步战略目标必经的承上启下的发展阶段，也是完善社会主义市场经济体制和扩大对外开放的关键阶段</p></li></ul><ol start="4"><li class="lvl-3"><p><strong>建设社会主义政治文明</strong><br>WHY？</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>建设社会主义政治文明与物质文明，精神文明一起确立为社会主义现代化全面发展的三大基本目标</p></li><li class="lvl-2"><p>是我国改革开放和社会主义现代化建设发展的必然要求</p></li><li class="lvl-2"><p>是社会主义现代化建设的重要目标</p></li></ul><p>内容</p><ul class="lvl-0"><li class="lvl-2"><p>最根本就是<strong>坚持党的领导，人民当家作主和依法治国的有机统一</strong></p><ul class="lvl-2"><li class="lvl-6">党的领导是人民当家做主和依法治国的根本保证</li><li class="lvl-6">人民当家作主是社会主义民主政治的本质要求</li><li class="lvl-6">依法治国是党领导人民治理国家的基本方略</li></ul></li><li class="lvl-2"><p>建设社会主义政治文明，必须<strong>发展社会主义民主</strong></p><ul class="lvl-2"><li class="lvl-6">健全全民主制度，丰富民主形式，扩大公民有序的政治参与</li><li class="lvl-6">把广大人民群众的积极性和主动性充分调动起来</li></ul></li><li class="lvl-2"><p>建设社会主义政治文明，必须<strong>坚持和完善中国特色社会主义政治制度。</strong></p><ul class="lvl-2"><li class="lvl-6">必须坚持人民代表大会制度</li><li class="lvl-6">多党合作和政治协商制度</li><li class="lvl-6">民族区域自治制度</li><li class="lvl-6">健全基层自治组织和民主管理制度（自主制度）</li></ul></li><li class="lvl-2"><p>建设社会主义政治文明，必须<strong>坚持依法治国，建设社会主义法制国家</strong></p></li><li class="lvl-2"><p>建设社会主义政治文明，必须进行政治体制改革</p></li><li class="lvl-2"><p>建设社会主义政治文明，必须推进决策的科学化民主化</p></li><li class="lvl-2"><p>建设社会主义政治文明，必须尊重和保障人权</p></li></ul><ol start="5"><li class="lvl-3"><p>实施“引进来”和“走出去”相结合的对外开放战略我国进入世贸组织的原则：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>是中国经济发展和改革开放的需要，同时世贸也需要中国</p></li><li class="lvl-2"><p>中国只能以发展中国家的条件进入</p></li><li class="lvl-2"><p>中国要求权利和义务一定要平衡</p></li></ul><ol start="6"><li class="lvl-3"><p>推进党的建设新的伟大工程</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>坚持中国共产党的领导，<strong>坚持党</strong>在建设中国特色社会主义事业中的<strong>领导地位</strong>，发挥党总揽全局，协调各方的作用</p></li><li class="lvl-2"><p>坚持中国共产党党领导，核心是<strong>坚持党的先进性</strong></p></li><li class="lvl-2"><p>推进党的建设新的伟大工程，重点是<strong>加强党的执政能力建设</strong></p></li><li class="lvl-2"><p>坚持用马克思主义武装全党</p></li><li class="lvl-2"><p>把党的最低纲领和最高纲领统一起来</p></li><li class="lvl-2"><p>民主集中制是我们党一贯坚持的根本组织和领导制度</p></li><li class="lvl-2"><p>坚持党要管党，从严治党的方针</p></li><li class="lvl-2"><p>坚决反对和防止腐败是全党的一项重大的政治任务</p></li></ul><h2 id="三个代表的历史地位和意义（I）">三个代表的历史地位和意义（I）</h2><ol><li class="lvl-3"><p>中国特色社会主义理论体系的丰富发展</p></li><li class="lvl-3"><p>加强和改进党的建设，推进中国特色社会主义事业的强大理论武器</p></li><li class="lvl-3"><p>创造性的回答了建设什么样的党，怎么建设党的问题，进一步深化了对中国特色社会主义的认识</p></li><li class="lvl-3"><p>反映了当代世界和中国的发展变化对党和国家工作的新要求，是加强和改进党的建设，推进我国社会主义自我完善和发展的强大理论武器，是党和国家必须长期坚持的指导思想，是党和人民的宝贵财富</p></li></ol><h1>科学发展观</h1><blockquote class="alert alert-note"><p>主要讲的是经济和科技与生态建设</p></blockquote><h2 id="历史背景">历史背景</h2><ul class="lvl-0"><li class="lvl-2"><p>基于深刻把握我国基本国情和新的阶段性特征</p></li><li class="lvl-2"><p>基于深刻总结改革开放以来特别是党十六大以来的实践经验</p></li><li class="lvl-2"><p>基于深刻分析国际形势，顺应世界发展趋势，借鉴国外发展经验</p></li></ul><h2 id="科学发展观内涵">科学发展观内涵</h2><ol><li class="lvl-3"><p><strong>推动经济社会发展</strong>是科学发展观的第一要义</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>坚持科学发展观，必须<strong>加快转变经济发展方式</strong></p></li><li class="lvl-2"><p>坚持科学发展观，必须<strong>推动科学技术的跨越式发展</strong></p></li><li class="lvl-2"><p>必须培养高素质创新型人才</p></li><li class="lvl-2"><p>必须善于抓住和用好机遇</p></li></ul><ol><li class="lvl-3"><p><strong>以人为本是科学发展观的核心立场</strong><br>意义</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>体现了马克思主义的基本原理</p></li><li class="lvl-2"><p>体现了我党全心全意为人民服务的根本宗旨和推动经济社会发展的根本目的，是社会主义的本质特征<br>HOW TO DO</p></li><li class="lvl-2"><p>坚持以人为本，就是要坚持发展为了人民，始终把最广大人民的根本利益放到第一位、</p></li><li class="lvl-2"><p>坚持发展依靠人民，<strong>从人民群众的伟大创造中吸取智慧和力量</strong></p></li><li class="lvl-2"><p>坚持发展成果由人民共享，<strong>着力提高人民物质文化生活水平</strong></p></li><li class="lvl-2"><p>坚持以人为本，最终是为了实现人的全面发展</p></li></ul><ol><li class="lvl-3"><p><strong>全面协调可持续是科学发展观的基本要求</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>坚持全面发展，就是要按照中国特色社会主义事业总体布局，正确认识和把握经济建设，政治建设，文化建设，社会建设，生态文明建设是相互联系，互相促进的有机统一体</p></li><li class="lvl-2"><p>坚持协调发展，就是保证中国特色社会主义各个领域协调推进</p></li><li class="lvl-2"><p>坚持可持续发展，坚持走生产发展，生活富裕，生态良好的文明发展道路</p></li><li class="lvl-2"><p>坚持可持续发展，必须建设生态文明</p></li></ul><ol><li class="lvl-3"><p><strong>统筹兼顾是科学发展观的根本方法</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>坚持统筹兼顾，必须正确认识和妥善处理中国特色社会主义事业中的重大关系</p></li><li class="lvl-2"><p>必须认真考虑和对待各方面的发展需要，正确反映和兼顾各阶层各群体的利益需求</p></li><li class="lvl-2"><p>要牢牢掌握统筹兼顾的科学思想方法，努力提高战略思维，创新思维，辩证思维能力，不断提高统筹兼顾的本领，更好地推动科学发展</p></li><li class="lvl-2"><p>要求我们既要立足当前，又着眼长远，做到兼顾各方，综合平衡</p></li></ul><h2 id="科学发展观的主要内容">科学发展观的主要内容</h2><ol><li class="lvl-3"><p>加快转变经济发展方式</p></li><li class="lvl-3"><p><strong>发展社会主义民主政治</strong></p></li><li class="lvl-3"><p>推进社会主义文化强国建设</p></li><li class="lvl-3"><p>构建社会主义和谐社会</p><ul class="lvl-2"><li class="lvl-6">大社会着眼：把和谐社会建设落实到经济建设，文化建设，政治建设和党的建设在内的党和国家的全部工作之中</li><li class="lvl-6">小社会着眼：以解决人民群众最关心最直接最现实的利益问题为重点，着力发展社会事业，促进社会公平正义，建设和谐文化，完善社会管理，增强社会创造活力，走共同富裕的道路，推动社会建设与经济建设，政治建设，文化建设协调发展</li><li class="lvl-6">保障民生，优先发展教育事业</li></ul></li><li class="lvl-3"><p>推动<strong>生态文明建设</strong></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>实质上是建设以资源环境承载力为基础，以自然规律发展为准则，以可持续发展为目标的资源节约型，环境友好型社会</p></li><li class="lvl-2"><p>推动人与自然和谐发展现代化建设新格局<br>HOW TO DO</p></li><li class="lvl-2"><p>珍惜每一寸国土，国土是生态文明建设的空间载体</p></li><li class="lvl-2"><p>全面促进资源节约，资源只有节约才能持久利用</p></li><li class="lvl-2"><p>加大生态环境保护力度，良好生态环境是人和社会持续发展的根本基础</p></li><li class="lvl-2"><p>加快建立生态文明制度</p></li></ul><ol start="7"><li class="lvl-3"><p>全面提高党的建设科学化水平</p></li></ol><h2 id="科学发展观的历史地位">科学发展观的历史地位</h2><ol><li class="lvl-3"><p>中国特色社会主义理论体系在新世纪新阶段的接续发展</p></li><li class="lvl-3"><p>全面建设小康社会，加快推进社会主义现代化的根本指针</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记 --王道考研</title>
      <link href="/2025/06/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0-%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94/"/>
      <url>/2025/06/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0-%E7%8E%8B%E9%81%93%E8%80%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>来自 <strong>王道考研2024–操作系统</strong>做的笔记，结合了B站的一个评论的笔记。</p></blockquote><span id="more"></span><h1><strong>操作系统</strong></h1><h2 id="操作系统概述">操作系统概述</h2><h3 id="1-1-1-操作系统的概念、功能和目标"><strong>1.1_1 操作系统的概念、功能和目标</strong></h3><p>作为<strong>用户和计算机硬件之间的接口</strong><br>将<strong>有限的，离散的</strong>资源 抽象为 <strong>无限的，连续的</strong>资源</p><ul class="lvl-0"><li class="lvl-2"><p>提供的功能</p><ul class="lvl-2"><li class="lvl-6">命令接口（联机命令接口|脱机命令接口）</li><li class="lvl-6">程序接口</li><li class="lvl-6">GUI（图形用户界面win|ios|andrio）</li></ul></li><li class="lvl-2"><p>目标</p><ul class="lvl-2"><li class="lvl-6">方便用户使用</li></ul></li></ul><h3 id="1-1-2-操作系统的特征"><strong>1.1_2 操作系统的特征</strong></h3><p><strong>并发|并行</strong><br>并发：多个事件<strong>交替发生</strong>（宏观同时发生、微观交替进行）并行：多个事件<strong>同时发生</strong><br><strong>共享</strong></p><ul class="lvl-0"><li class="lvl-2"><p>互斥共享方式：一个时间段内只允许一个进程访问该资源</p></li><li class="lvl-2"><p>同时共享方式：允许一个时间段内由多个进程“同时”对它们进行访问<br><strong>虚拟</strong><br>概念：把一个物理上的实体变为若干个逻辑上的对应物</p></li><li class="lvl-2"><p>空分复用计数</p></li><li class="lvl-2"><p>时分复用计数<br><strong>异步</strong><br>概念：在多道程序环境下，<strong>允许多个程序并发执行</strong>，但由于资源有限，进程的执行不是一贯到底的，而是<strong>走走停停</strong>的，以不可预知的速度向前推进。只有系统拥有并发性，才有可能导致异步性。</p></li></ul><h3 id="1-1-3-操作系统的发展与分类"><strong>1.1_3 操作系统的发展与分类</strong></h3><p>OS的发展与分类</p><ul class="lvl-0"><li class="lvl-2"><p>手工操作阶段</p></li><li class="lvl-2"><p>纸带机（用户独占全机、人机速度矛盾）</p></li><li class="lvl-2"><p>批处理阶段——dan’dao</p></li><li class="lvl-2"><p>单道批处理系统（外围机——磁带）</p></li><li class="lvl-2"><p>多道批处理系统（操作系统开始出现）</p></li><li class="lvl-2"><p>分时操作系统</p></li><li class="lvl-2"><p>轮流处理作业</p><ul class="lvl-2"><li class="lvl-6">不能处理紧急任务</li></ul></li><li class="lvl-2"><p>实时操作系统</p><ul class="lvl-2"><li class="lvl-6"><strong>优先处理紧急任务</strong></li></ul></li><li class="lvl-2"><p>硬实时系统：必须在严格的时间内完成处理</p></li><li class="lvl-2"><p>软实时系统：可以偶尔犯错</p></li><li class="lvl-2"><p>网络操作系统</p></li><li class="lvl-2"><p>分布式操作系统</p></li><li class="lvl-2"><p>个人计算机操作系统</p></li></ul><h3 id="1-1-4-操作系统的运行机制与体系结构"><strong>1.1_4 操作系统的运行机制与体系结构</strong></h3><p><strong>操作系统复杂度管理方法</strong></p><ul class="lvl-0"><li class="lvl-2"><p>模块化</p></li><li class="lvl-2"><p>抽象化：用户接口和内部硬件实现分离 – 抽象的接口（<strong>模块化的基础下，模块之间的通信</strong>）</p></li><li class="lvl-2"><p>分层：将**模块（不同类）**进行层次划分，减少模块之间的交互</p></li><li class="lvl-2"><p>层级：是对于<strong>同类模块之间</strong>通过一个大接口统一调用</p></li></ul><p>OS的运行机制和体系结构</p><ul class="lvl-0"><li class="lvl-2"><p>运行机制</p></li><li class="lvl-2"><p>两种指令</p><ul class="lvl-2"><li class="lvl-6">特权指令</li><li class="lvl-6">非特权指令</li></ul></li><li class="lvl-2"><p>两种处理器状态</p><ul class="lvl-2"><li class="lvl-6">核心态（root）</li><li class="lvl-6">用户态</li></ul></li><li class="lvl-2"><p>两种程序</p><ul class="lvl-2"><li class="lvl-6">内核程序(运行在核心态 )</li><li class="lvl-6">应用程序</li></ul></li><li class="lvl-2"><p>操作系统内核</p><ul class="lvl-2"><li class="lvl-6"><strong>时钟管理（实现计时功能）</strong></li><li class="lvl-6"><strong>中断处理</strong></li><li class="lvl-6"><strong>原语（程序运行具有原子性，不可中断）</strong></li></ul></li><li class="lvl-2"><p>对系统资源进行管理的功能</p><ul class="lvl-2"><li class="lvl-6">进程管理</li><li class="lvl-6">存储器管理</li><li class="lvl-6">设备管理</li></ul></li><li class="lvl-2"><p>操作系统的体系结构</p><ul class="lvl-2"><li class="lvl-6">大内核（将操作系统的主要功能模块都作为系统内核，运行在核心态）</li><li class="lvl-6">微内核（只把最基本的功能保留在内核）操作系统接口：系统调用接口，POSIX接口，领域应用接口</li></ul></li></ul><p>硬件结构<br><strong>冯诺依曼结构</strong></p><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250619134327.png?e=1750312315&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:ay8iaf01brPGZy1HpzK3Hw5NjhY=" alt=""></p><p><strong>常见的操作系统内核架构</strong><br>常见内核架构<strong>简要结构， 宏内核， 微内核， 外核， 多内核</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250526152726.png?e=1750313258&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:1m4AgtrCfRA1RoMuEOifCkmW32s=" alt=""></p><ul class="lvl-0"><li class="lvl-3"><p>简要结构将应用程序和操作系统放置在<strong>同一地址空间</strong></p><ul class="lvl-2"><li class="lvl-6">通过函数之间调用操作系统，效率高</li><li class="lvl-6"><strong>缺乏隔离能力，不安全</strong></li><li class="lvl-6">应用：MSDOS</li></ul></li><li class="lvl-3"><p>宏内核结构分为<strong>内核态 和 用户态</strong><br>应用程序运行在用户态，可以通过系统调用使用内核态服务</p><ul class="lvl-2"><li class="lvl-6">优点：生态大</li></ul></li><li class="lvl-2"><p>微内核结构将<strong>某个功能从 内核中拆分出来</strong><br>优点：</p><ul class="lvl-2"><li class="lvl-6"><strong>服务与服务之间是完全隔离的</strong></li><li class="lvl-6">机制与策略的进一步分离</li></ul></li><li class="lvl-2"><p>外核结构产生原因：过度的硬件资源抽象带来较大的性能损失</p><ul class="lvl-2"><li class="lvl-6">由<strong>应用来控制对硬件资源的抽象</strong></li><li class="lvl-6">操作系统只负责<strong>对硬件资源的多路复用支持</strong></li></ul></li><li class="lvl-2"><p>多内核架构节点之间的<strong>交互由操作系统节点的进程间通信完成</strong></p></li></ul><h3 id="1-1-5-中断和异常"><strong>1.1_5 中断和异常</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>中断机制的诞生</p></li><li class="lvl-2"><p>操作系统介入，开展管理工作<br><strong>!important</strong></p></li><li class="lvl-2"><p><strong>“用户态—&gt;核心态”是通过中断实现的。并且中断是唯一途径</strong></p></li><li class="lvl-2"><p>中断的概念和作用当 CPU 正在执行当前程序时，若有<strong>更紧急的任务（如 I/O 完成、外设请求）需要处理</strong>，就可以“打断”当前的执行流程，转去处理这个紧急事件，处理完后再回来继续执行原来的程序。</p></li><li class="lvl-2"><p>中断的分类<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250616210541.png?e=1750312507&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:sDp5i61AIhZyxHt76kZlJFEzoMU=" alt=""></p></li><li class="lvl-2"><p><strong>内中断（异常）</strong></p><ul class="lvl-2"><li class="lvl-6">陷阱（trap）</li><li class="lvl-6">故障（fault）</li><li class="lvl-6">中止（abort）</li></ul></li><li class="lvl-2"><p><strong>外中断  （CPU外部）</strong></p><ul class="lvl-2"><li class="lvl-6">I/O中断请求</li><li class="lvl-6">外中断的处理过程<br><strong>发生中断后的进程通常会保存相关内容到 PCB 中（异常的指令地址，异常原因，栈指针（从 EL0到EL1））</strong></li></ul></li></ul><h3 id="1-1-6-系统调用"><strong>1.1_6 系统调用</strong></h3><p>概念：应用程序通过系统调用请求操作系统的服务。保证系统的稳定性和安全性。系统调用和库函数的区别：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>系统调用是操作系统向上层提供的接口</strong></p></li><li class="lvl-2"><p>有的库函数是对系统调用的进一步封装</p></li><li class="lvl-2"><p>当今编写的应用程序大多是通过高级语言提供的库函数间接地进行系统调用</p></li></ul><h2 id="进程">进程</h2><h3 id="2-1-1-进程的定义、组成、组织方式、特征"><strong>2.1_1 进程的定义、组成、组织方式、特征</strong></h3><p>定义：组成：<strong>PCB（进程存在唯一的标志）</strong>，程序段，数据段组织方式：链接方式，指针指向不同的队列；索引方式，索引表特征：动态性、并发性、独立性、异步性、结构性</p><h3 id="2-1-2-进程的状态与转换"><strong>2.1_2 进程的状态与转换</strong></h3><p>状态：运行状态：占有CPU，并在CPU上运行，单核只能一个进程（双核两个）（CPU√，其它资源√）预备状态：<strong>已经具备运行条件</strong>，但是没有空闲的CPU，暂时不能运行（CPUX，其它资源√）阻塞状态：等在某个事件的发生，暂时不能运行（CPUX，其它资源X）新生状态：<strong>创建PCB，程序段，数据段</strong><br>终止状态：回收内存，程序段，数据段，撤销PCB<br><strong>重点图</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250619140459.png?e=1750313432&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:A4ZvC6OY4DjlFH0juWmiZXd2pq0=" alt=""></p><p><strong>进程内存的空间布局</strong></p><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250619140749.png?e=1750313591&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:WgEk8kOvUiLResrdenU-fLvFDLg=" alt=""></p><h3 id="2-1-3-进程控制"><strong>2.1_3 进程控制</strong></h3><p>基本概念：什么是进程控制？</p><ul class="lvl-0"><li class="lvl-2"><p>实现各种进程状态转换。如何实现进程控制？</p></li><li class="lvl-2"><p>用“原语”实现。</p></li></ul><p>原语做的事情：<br>1、更新PCB中的信息<br>2、将PCB<strong>插入合适的队列</strong><br>3、分配/回收资源<br>ex：wait</p><ul class="lvl-0"><li class="lvl-2"><p>wait不仅用于监控进程的作用，还可以<strong>回收已经运行结束的子进程和释放资源</strong></p></li></ul><p><strong>进程控制相关的原语：</strong><br>1、进程的创建：</p><ul class="lvl-0"><li class="lvl-2"><p>创建原语：<strong>申请空白PCB、为新进程分配所需资源、初始化PCB、将PCB插入就绪队列</strong></p></li><li class="lvl-2"><p>引起进程创建的事件：用户登录、作业调度、提供服务、应用请求</p></li><li class="lvl-2"><p>第一个进程是操作系统创建的，是<strong>特定且唯一的</strong>，所有进程都由这个进程产生<br>ex: <strong>fork</strong><br>fork完成，两个进程的内存，寄存器，程序计数器状态完全一致<br><strong>对于父进程 fork 返回值是子进程的PID，子进程fork返回值是0</strong><br>由于系统调度，父子进行的<strong>执行顺序是不确定</strong>的</p></li></ul><p>2、进程的终止：撤销原语引起进程中止的事件：正常结束、异常结束、外界干预</p><p>3、进程的阻塞：阻塞原语：<strong>运行态-&gt;阻塞态</strong><br>引起进程阻塞的事件：需要等待系统分配某种资源、需要等待相互合作的其他进程完成工作</p><p>4、进程的唤醒：唤醒原语：<strong>阻塞态-&gt;就绪态</strong><br>引起进程唤醒的事件：等待的事件发生</p><p>5、进程的切换切换原语引起进程切换的事件：当前进程事件片到、有更高优先级的进程到达、当前进程主动阻塞、当前进程终止</p><h3 id="2-1-4-进程通信"><strong>2.1_4 进程通信</strong></h3><p>1、<strong>共享存储</strong>   （分配共享空间，且互斥（P、V操作）</p><ul class="lvl-0"><li class="lvl-2"><p>基于数据结构的共享：固定分配（低级）</p></li><li class="lvl-2"><p>基于存储区的共享：划分存储区（高级）</p></li></ul><p>2、消息传递消息：消息头、消息体</p><ul class="lvl-0"><li class="lvl-2"><p>直接通信方式（直接挂载消息）</p></li><li class="lvl-2"><p>间接通信方式（间接利用信箱发送消息）</p></li></ul><p>3、管道通信（pipe）</p><ul class="lvl-0"><li class="lvl-2"><p>只能半双工通信</p></li><li class="lvl-2"><p>互斥（没写满，不能读，反之同理）</p></li></ul><h3 id="2-1-5-线程概念和多线程模型"><strong>2.1_5 线程概念和多线程模型</strong></h3><p>什么是线程，为什么要引入线程？</p><ul class="lvl-0"><li class="lvl-2"><p>线程是<strong>一个基本的CPU执行单元</strong>，也是程序执行流的最小单位，进一步提高了系统的并发度</p></li></ul><p>引入线程机制后，有什么变化？</p><ul class="lvl-0"><li class="lvl-2"><p>资源分配、调度：<strong>进程是资源分配的基本单位</strong>，<strong>线程是调度的基本单位</strong></p></li><li class="lvl-2"><p>并发性：各线程间也能并发，提升了并发度</p></li><li class="lvl-2"><p>系统开销：可以只在进程中切换，减小了CPU切换环境的系统开销</p></li></ul><p>1、线程有哪些重要的属性</p><ul class="lvl-0"><li class="lvl-2"><p><strong>线程是处理机调度的基本单位</strong></p></li><li class="lvl-2"><p>多CPU计算机中，各个线程可占用不同的CPU</p></li><li class="lvl-2"><p>每个线程都有一个线程ID、线程控制块（TCB）</p></li><li class="lvl-2"><p>线程也有就绪、阻塞、运行三种基本状态</p></li><li class="lvl-2"><p>线程<strong>几乎不拥有系统资源</strong></p></li><li class="lvl-2"><p>同一进程的不同线程间共享进程的资源</p></li><li class="lvl-2"><p>由于共享内存地址空间，统一进程中的线程间通信甚至无需系统干预</p></li><li class="lvl-2"><p><strong>同一进程中的线程切换，不会引起进程切换</strong></p></li><li class="lvl-2"><p>不同进程中的线程切换，会引起进程切换</p></li><li class="lvl-2"><p>切换同进程内的线程，系统开销很小</p></li><li class="lvl-2"><p>切换进程，系统开销较大</p></li></ul><p>2、线程的实现方式</p><ul class="lvl-0"><li class="lvl-2"><p>用户级线程（ULT）：由应用管理，从用户的视角看能看到的线程</p></li><li class="lvl-2"><p>内核级线程（KLT）：由操作系统管理，从操作系统内核视角看能看到的线程<br>n个ULT可以映射到m个KLT上（n&gt;=m）</p></li><li class="lvl-2"><p>内核级线程才是处理机分配的单位</p></li></ul><p>3、多线程模型</p><ul class="lvl-0"><li class="lvl-2"><p>多对一模型<br>n个ULT映射到1个KLT<br>优点：开销小，效率高缺点：容易阻塞，并发度不高</p></li><li class="lvl-2"><p>一对一模型<br>n个ULT映射到n个KLT<br>优点：并发能力很强缺点：占用成本高，开销大</p></li><li class="lvl-2"><p>多对多模型<br>n个ULT映射到m个KLT上（n&gt;=m）中和以上两种优缺点<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250619141812.png?e=1750314211&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:R4Lv80R8bZx67Sj-ZQjOUgYPKB4=" alt=""></p></li></ul><h3 id="2-2-1-处理机调度的概念、层次"><strong>2.2_1 处理机调度的概念、层次</strong></h3><p>基本概念：通常进程数量大于处理机数量，所以要按照一定的算法选择一个进程，并将处理机分配给它运行，以实现进程的并发执行</p><p>三个层次</p><ul class="lvl-0"><li class="lvl-2"><p><strong>高级调度（作业调度）</strong><br><strong>辅助外存与内存之间的调度</strong>，作业调入时会建立相应的PCB，作业调出时才撤销PCB，调入可由操作系统决定，调出由作业运行结束才调出</p></li><li class="lvl-2"><p><strong>中级调度（内存调度）</strong><br><strong>将暂时不用的进程放到外存</strong>（PCB不外放），提高内存利用率和系统吞吐量，进程状态为挂起状态，形成挂起队列</p></li><li class="lvl-2"><p><strong>低级调度（进程调度）</strong><br>最基本，用算法为进程分配处理机资源，几十ms一次</p></li></ul><p>三层调度的联系、对比进程的“挂起态”<br><strong>七状态模型</strong><br>五状态前面学了，挂起分为就绪挂起、阻塞挂起<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250619142150.png?e=1750314431&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:4q7q4wEICKAHpBHVqY-ENRtzf5g=" alt=""></p><h3 id="2-2-2-进程调度的时机、切换与过程调度方式"><strong>2.2_2 进程调度的时机、切换与过程调度方式</strong></h3><p>1、时机什么时候需要进程调度？</p><ul class="lvl-0"><li class="lvl-2"><p><strong>主动放弃</strong>（进程正常终止、运行过程中发生异常而终止、进程主动请求阻塞）</p></li><li class="lvl-2"><p><strong>被动放弃</strong>（分给进程的时间片用完、有更紧急的事需要处理、有更高优先级的进程进入就绪队列）</p></li></ul><p>什么时候不能进行进程调度？</p><ul class="lvl-0"><li class="lvl-2"><p>在<strong>处理中断的过程中</strong></p></li><li class="lvl-2"><p>在操作系统内核程序临界区中</p></li><li class="lvl-2"><p><strong>临界资源</strong>：一个时段段内<strong>各进程互斥地访问临界资源</strong></p></li><li class="lvl-2"><p>临界区：访问临界资源的那段代码</p></li><li class="lvl-2"><p>内核程序临界区会访问就绪队列，导致其上锁</p></li><li class="lvl-2"><p>在<strong>原子操作过程中（原语）</strong></p></li></ul><p>2、切换与过程<br>“狭义的调度”与“进程切换”的区别</p><ul class="lvl-0"><li class="lvl-2"><p>狭义：选择一个进程</p></li><li class="lvl-2"><p>广义：狭义+进程切换</p></li></ul><p>进程切换的过程需要做什么？</p><ul class="lvl-0"><li class="lvl-2"><p>对原来运行进程<strong>各种数据的保存（PCB中）</strong></p></li><li class="lvl-2"><p>对新的进程各种数据的恢复</p></li></ul><p>3、方式非剥夺调度方式（非抢占式）</p><ul class="lvl-0"><li class="lvl-2"><p>只允许进程主动放弃处理机</p></li></ul><p>剥夺调度方式（抢占式）</p><ul class="lvl-0"><li class="lvl-2"><p>进程被动放弃，可以优先处理紧急任务，适合分时操作系统、实时操作系统</p></li></ul><h3 id="2-2-3-调度算法的评价指标"><strong>2.2_3 调度算法的评价指标</strong></h3><p>1、CPU利用率<br>CPU利用率=CPU忙碌的时间/总时间</p><p>2、<strong>系统吞吐量</strong><br>总共完成了多少道作业/总共花了多少时间</p><p>3、周转时间</p><ul class="lvl-0"><li class="lvl-2"><p>周转时间（<strong>提交作业到完成作业花费的时间</strong>）、平均周转时间（各作业周转时间之和/作业数）</p></li><li class="lvl-2"><p>带权周转时间（<strong>作业周转时间/作业实际运行的时间</strong>）、平均带权周转时间（各作业带权周转时间/作业数）</p></li></ul><p>4、等待时间进程或作业等待处理机状态时间的和进程：<strong>等待被服务的时间之和</strong><br>作业：<strong>建立后的等待时间+作业在外存后备队列中等待的时间</strong></p><p>5、响应时间从用户提交请求到首次产生响应所用的时间</p><h3 id="2-2-4-FCFS、SJF、HRRN调度算法"><strong>2.2_4 FCFS、SJF、HRRN调度算法</strong></h3><blockquote class="alert alert-warning"><p>记录查看每一个进程<strong>到达的时间</strong></p></blockquote><p>1、先来先服务（FCFS）<br><strong>先到达先进行</strong>服务</p><ul class="lvl-0"><li class="lvl-2"><p>作业-后备队列；进程-就绪队列</p></li><li class="lvl-2"><p>非抢占式</p></li><li class="lvl-2"><p>公平、算法简单</p></li><li class="lvl-2"><p>对长作业有利、对短作业不利、<strong>不会饥饿</strong></p></li></ul><p>2、短作业优先（SJF，shortest job first）<br><strong>最短（服务时间最短）的作业优先</strong>得到服务，<strong>时间相同，先到达的先被服务</strong><br>非抢占式（SJF）：选<strong>最短需要时间的作业先进入运行态</strong><br>抢占式（SRTN）：<strong>有新作业进入就绪队列或有作业完成了，考察队列中的最小需要时间的作业</strong></p><p>在所有进程都几乎同时到达时，采用SJP调度算法的平均等待时间、平均周转时间最少若无红色前提，抢占式的短作业/进程的平均时间最少</p><ul class="lvl-0"><li class="lvl-2"><p>优点：<strong>“最短的”平均等待时间，平均周转时间</strong></p></li><li class="lvl-2"><p>缺点：对短作业有利，对长作业不利，<strong>可能产生饥饿现象（一直有时间短的任务到达）</strong></p></li></ul><p>3、高响应比优先（HRRN）要综合考虑作业/进程的等待时间和要求服务的时间（等待时间越长或者服务时间越长就越会先服务）<br><strong>响应比=（等待时间+要求服务时间）/要求服务时间</strong></p><ul class="lvl-0"><li class="lvl-2"><p>在<strong>每次调度时先计算各个作业/进程的响应比</strong>，选择响应比最高的作业/进程为其服务</p></li><li class="lvl-2"><p>非抢占式</p></li><li class="lvl-2"><p>进程主动放弃CPU时，需要该算法选取就绪队列的作业</p></li><li class="lvl-2"><p><strong>不会饥饿</strong></p></li></ul><h3 id="2-2-5-时间片轮转、优先级调度、多级反馈队列（适合交互式系统）"><strong>2.2_5 时间片轮转、优先级调度、多级反馈队列（适合交互式系统）</strong></h3><p>1、时间片轮转算法（RR）算法思想：公平轮流地位各个进程服务，让每个进程在一定时间间隔内都可以得到响应算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如100ms）。若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列对位重新排队。</p><ul class="lvl-0"><li class="lvl-2"><p>只能<strong>用于进程调度</strong></p></li><li class="lvl-2"><p>抢占式</p></li><li class="lvl-2"><p>优点：响应块，适用于分时操作系统</p></li><li class="lvl-2"><p>缺点：<strong>由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度</strong></p></li><li class="lvl-2"><p><strong>不会饥饿</strong></p></li></ul><p>2、优先级调度算法算法思想：根据<strong>任务的紧急程度</strong>来决定处理顺序算法规则：每个进程/作业有各自的优先级，调度时选择优先级最高的作业/进程</p><ul class="lvl-0"><li class="lvl-2"><p>适用：作业/进程/IO</p></li><li class="lvl-2"><p>抢占式/不可抢占均有</p></li><li class="lvl-2"><p>静态优先级：<strong>不变</strong></p></li><li class="lvl-2"><p>动态优先级：<strong>可以变</strong></p></li><li class="lvl-2"><p>通常：系统进程优先级高于用户进程，前台进程优先级高于后台进程，操作系统更偏好I/O进程</p></li><li class="lvl-2"><p>可以从追求公平、提升资源利用率等角度考虑改变优先级</p></li><li class="lvl-2"><p><strong>可能会饥饿</strong>（一直有紧急进程）</p></li></ul><p>3、多级反馈队列调度算法算法思想：对其它算法调度的这种权衡算法实现：设置多级就绪队列，各级队列<strong>优先级从高到低</strong>，<strong>时间片从小到大</strong>。<strong>新进程到达时先进入第一级队列</strong>，按照<strong>FCFS原则排队等待被分配时间片</strong>。若<strong>用完时间片进程还未结束，则进程进入下一级队列队尾</strong>。如果此时已经在最下级的队列，则重新放回最下级队列末尾。<strong>只有第K级队头的进程为空时，才会为K+1级对头的进程分配时间片</strong>，<strong>被抢占处理机的进程重新放回原队列队尾。</strong></p><ul class="lvl-0"><li class="lvl-2"><p>优点：对各个进程相对公平（FCFS的优点），每个新到达的进程都可以很快就得到响应（RR的优点）；短进程只用较少的时间就可以完成（SPF的优点）；不必实现估计进程的运行时间（避免用户作假）；可灵活地调整对各类进程的偏好程度，比如CPU密集型进程、IO密集型进程</p></li><li class="lvl-2"><p>默认抢占式</p></li><li class="lvl-2"><p><strong>会饥饿</strong>（一直有新进程到高优先级队列中）</p></li></ul><h3 id="2-3-1-进程同步、进程互斥"><strong>2.3_1 进程同步、进程互斥</strong></h3><p>1、进程同步指为了完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p><p>2、进程互斥把一个时间段内只允许一个进程使用的资源称为临界资源。</p><blockquote><p>当一个进程访问该资源时，会进行<strong>上锁操作</strong></p></blockquote><p>对临界资源的互斥访问，可以在逻辑上分为四个部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  entry section;  <span class="comment">//进入区  对访问的资源检查或进行上锁</span></span><br><span class="line">  critical section; <span class="comment">//临界区(段) 访问临界资源的那部分代码</span></span><br><span class="line">  exit section;   <span class="comment">//退出区  负责解锁</span></span><br><span class="line">  remainder section; <span class="comment">//剩余区  其它处理</span></span><br><span class="line">&#125; <span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>1、<strong>空闲让进</strong>。临界区空的可以直接进去<br>2、<strong>忙则等待</strong>。 临界区繁忙不能进去<br>3、<strong>有限等待</strong>。 不能让进程等待无限长时间<br>4、<strong>让权等待</strong>。 不能进去，不要堵着</p><h3 id="2-3-2-进程互斥的软件实现方法"><strong>2.3_2 进程互斥的软件实现方法</strong></h3><p>1、<strong>单标志法</strong><br><strong>我访问完你再访问</strong><br>两个进程在访问完临界区后会把使用临界区的权限教给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> turn =<span class="number">0</span>;</span><br><span class="line"><span class="comment">//p0进程</span></span><br><span class="line"><span class="keyword">while</span>(turn!=<span class="number">0</span>); <span class="comment">// 消耗不是当前需要执行进程的时间片时间，消耗完就会返回到需要执行的进程中</span></span><br><span class="line">critical section;</span><br><span class="line">turn = <span class="number">1</span>;</span><br><span class="line">remainder section;</span><br><span class="line"><span class="comment">//p1进程</span></span><br><span class="line"><span class="keyword">while</span>(turn!=<span class="number">1</span>);</span><br><span class="line">critical section;</span><br><span class="line">turn = <span class="number">0</span>;</span><br><span class="line">remainder section;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>进程之间可以<strong>实现互斥</strong></p></li><li class="lvl-2"><p>存在的问题：p1要访问的话，必须p0先访问，<strong>违背：空闲让进原则（浪费时间）</strong></p></li></ul><p>2、<strong>双标志先检查</strong><br>算法思想:设置<strong>一个bool数组flag[]来标记自己是否想要进入临界区的意愿</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>]=&#123;<span class="literal">false</span>,<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">//p1进程</span></span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">1</span>]);</span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">critical section;</span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">remainder section;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p2进程</span></span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">0</span>]);</span><br><span class="line">flag[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">critical section;</span><br><span class="line">flag[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">remainder section;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>主要问题：由于进程是并发进行的，可能会<strong>违背忙则等待</strong>的原则，可能就是 <code>flag[0] = true；</code>还没有执行就发生了进程切换</p></li></ul><p>3、<strong>双标志后检查</strong><br>算法思想:设置一个bool数组flag[]来标记自己是否想要进入临界区的意愿,不过是先上锁后检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>]=&#123;<span class="literal">false</span>,<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="comment">//p1进程</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">1</span>]);</span><br><span class="line">critical section;</span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">remainder section;</span><br><span class="line"><span class="comment">//p2进程</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">0</span>]);</span><br><span class="line">critical section;</span><br><span class="line">flag[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">remainder section;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>主要问题：由于进程是并发进行的，可能会两个同时上锁，都进不去，违反空闲让进和有限等待原则</p></li><li class="lvl-2"><p>进程会饥饿（会都在while循环中）</p></li></ul><p>4、<strong>Peterson 算法</strong><br>主动让对方先使用处理器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>]=&#123;<span class="literal">false</span>,<span class="literal">false</span>&#125;; <span class="comment">// 意愿</span></span><br><span class="line"><span class="type">int</span> turn=<span class="number">0</span>; <span class="comment">// 谦让</span></span><br><span class="line"><span class="comment">//p1进程</span></span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">true</span>;</span><br><span class="line">turn=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">1</span>]&amp;&amp;turn==<span class="number">1</span>);</span><br><span class="line">critical section;</span><br><span class="line">flag[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">remainder section;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p2进程</span></span><br><span class="line">flag[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">turn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">0</span>]&amp;&amp;turn==<span class="number">0</span>);</span><br><span class="line">critical section;</span><br><span class="line">flag[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">remainder section;</span><br></pre></td></tr></table></figure><p>遵循空闲让进、忙则等待、有限等待三个原则但是<strong>未遵循让权等待</strong>的原则</p><h3 id="2-3-3-进程互斥的硬件实现方法"><strong>2.3_3 进程互斥的硬件实现方法</strong></h3><p>1、中断屏蔽方法</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">流程：</span><br><span class="line">关中断（不允许进程中断） -- 保证在访问临界区中不会发生中断</span><br><span class="line">临界区 -- 访问临界区</span><br><span class="line">开中断 -- 访问结束</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>简单、高校</p></li><li class="lvl-2"><p>多处理机，可<strong>能会同时访问临界资源</strong></p></li><li class="lvl-2"><p>使用OS内核进程</p></li></ul><p>2、TestAndSet（TSL指令）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//true表示已经上锁 -- 原子性，不会中断</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">TestAndSet</span><span class="params">(<span class="type">bool</span> *lock)</span>&#123;</span><br><span class="line">  <span class="type">bool</span> old;</span><br><span class="line">  old=*lock;</span><br><span class="line">  *lock=<span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以下是使用TSL指令实现互斥的算法逻辑</span></span><br><span class="line"><span class="keyword">while</span>(TestAndSet (&amp;lock));<span class="comment">//上锁并检查 -- 直到另外一个访问完临界区解锁</span></span><br><span class="line">临界区代码段</span><br><span class="line">lock=<span class="literal">false</span>; <span class="comment">//解锁</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>TSL是用硬件实现的，上锁、检查一气呵成</p></li><li class="lvl-2"><p><strong>不满足让权等待，会盲等（CPU一直在循环检测）</strong></p></li></ul><p>3、Swap指令别称：Exchange指令、XCHG指令<br>Swap指令是用硬件实现的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//true表示已经上锁</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">bool</span> *a,<span class="type">bool</span> *b)</span>&#123;</span><br><span class="line">  <span class="type">bool</span> temp;</span><br><span class="line">  temp=*a;</span><br><span class="line">  *a=*b;</span><br><span class="line">  *b=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是使用Swap指令实现互斥的算法逻辑</span></span><br><span class="line"><span class="type">bool</span> old=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(old=<span class="literal">true</span>)</span><br><span class="line">  Swap(&amp;lock,&amp;old);</span><br><span class="line">临界区代码段</span><br><span class="line">lock=<span class="literal">false</span>; <span class="comment">//解锁</span></span><br><span class="line"><span class="comment">//剩余代码段</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>简单</p></li><li class="lvl-2"><p>适用多处理机</p></li><li class="lvl-2"><p>不能让权等待</p></li></ul><h3 id="2-3-4-信号量机制"><strong>2.3_4 信号量机制</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>概念：用户可以通过操作系统提供的<strong>一对原语</strong>来对<strong>信号量</strong>进行操作</p></li><li class="lvl-2"><p>信号量：信号量是一种变量（ex：bool），表示系统中某种资源的数量</p></li><li class="lvl-2"><p>一对原语：wait（S）原语和signal（S）原语，<strong>分别简称P(S)、V(S)</strong>（不可停止，一气呵成）<br><strong>可以理解为每一个函数都是一个原语</strong><br>1、整形信号量用一个整数表示系统资源的变量，用来表示系统中某种资源的数量</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> S=<span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> S)</span>&#123; <span class="comment">//wait原语，相当于：进入区</span></span><br><span class="line">  <span class="keyword">while</span>(S&lt;=<span class="number">0</span>); <span class="comment">//如果资源数不够，就意志循环等待</span></span><br><span class="line">  S=S<span class="number">-1</span>;    <span class="comment">//如果资源数够，则占用一个资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> S)</span>&#123;<span class="comment">//signal原语，相当于“退出区”</span></span><br><span class="line">  S=S+<span class="number">1</span>;    <span class="comment">//使用完资源后，在退出区释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>不满足<strong>让权等待</strong>可能会出现盲等</p></li></ul><blockquote class="alert alert-warning"><p>重点</p></blockquote><p>2、<strong>记录型信号量</strong>（IMPORTANT）记录型数据结构表示的信号量</p><ul class="lvl-0"><li class="lvl-2"><p>资源不足放入阻塞队列中等待（时间顺序）</p></li><li class="lvl-2"><p>有资源则唤醒阻塞序列中的进程<br><strong>IMPORTANT</strong><br>$wait: 运行态 \rightarrow 阻塞态$<br>$signal: 阻塞态 \rightarrow 就绪态$</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录型信号量的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="type">int</span> value;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">L</span>;</span> <span class="comment">//存储等待队列</span></span><br><span class="line">&#125; semaphore;</span><br><span class="line"><span class="comment">//某进程需要使用资源时，通过wait原语申请</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span> <span class="params">(semaphore S)</span>&#123;</span><br><span class="line">  S.value--;</span><br><span class="line">  <span class="keyword">if</span>(S.value&lt;<span class="number">0</span>)&#123;</span><br><span class="line">    block (S.L);<span class="comment">//将该进程加入到消息队列中(阻塞)  </span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进程使用完资源后，通过signal原语释放</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span> <span class="params">(semaphore S)</span>&#123;</span><br><span class="line">  S.value++;</span><br><span class="line">  <span class="keyword">if</span>(S.valie&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">    wakeup(S.L);<span class="comment">//（唤醒阻塞队列中的进程）zu se</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>除非特别说明，否则默认S为记录型信号量</p></li><li class="lvl-2"><p>满足让权等待</p></li></ul><h3 id="2-3-5-用信号量机制实现进程互斥、同步、前驱关系"><strong>2.3_5 用信号量机制实现进程互斥、同步、前驱关系</strong></h3><p>1、实现进程互斥</p><ul class="lvl-0"><li class="lvl-2"><p>设置<strong>互斥信号量mutex</strong>，<strong>初值为</strong>（相当于 进入临界区的名额）</p></li><li class="lvl-2"><p><strong>临界区前执行 P操作，临界区后执行 V操作</strong></p></li><li class="lvl-2"><p>对不同的临界资源需要设置不同的互斥信号量</p></li><li class="lvl-2"><p>PV必须成对出现（P是申请资源，V是释放资源）</p></li></ul><p>2、实现进程同步</p><ul class="lvl-0"><li class="lvl-2"><p>保证<strong>一前一后</strong>的操作顺序</p></li><li class="lvl-2"><p>设置同步信号量S，<strong>初始为0</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250614133355.png?e=1750319911&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:As_B0VYZPPujRd9IY9O1pIe-dLg=" alt=""></p></li><li class="lvl-2"><p>在“前操作”之后执行 V(S)：资源量 +1</p></li><li class="lvl-2"><p>在“后操作”之后执行 P(S) ：资源量 -1</p></li><li class="lvl-2"><p><strong>前 V 后 P</strong><br>例题：S1<strong>执行后</strong> V，S2<strong>执行前</strong>P</p></li></ul><p>3、<strong>实现进程的前驱关系</strong></p><blockquote><p>变量设置为 0，如果我前面没有进行释放资源，那我后面就没有资源可用，所以可以满足前驱关系</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>要为每一对前驱关系各设置一个同步变量</p></li><li class="lvl-2"><p>在“前操作”之后对相应的同步变量执行V操作</p></li><li class="lvl-2"><p>在“后操作”之前对相应的同步变量执行P操作<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250614133355.png?e=1750320014&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:pC_VNQy50Lw42CKBG1PjLrJqCKI=" alt=""></p></li></ul><h3 id="2-3-6-生产者-消费者问题"><strong>2.3_6 生产者-消费者问题</strong></h3><p><strong>重点：找到同步关系，放置 P，V操作的位置</strong></p><ul class="lvl-0"><li class="lvl-2"><p>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待</p></li><li class="lvl-2"><p>只有缓冲区不空时，消费者才能从中取出产品，否则必须等待</p></li><li class="lvl-2"><p><strong>缓冲区是临界资源，各个进程互斥访问</strong></p></li><li class="lvl-2"><p><strong>实现互斥的P操作要放在实现同步的P操作之后</strong>，不然会发生死锁**</p></li><li class="lvl-2"><p>V操作不会导致进程发生阻塞的状态，所以可以交换</p></li><li class="lvl-2"><p>使用操作不要放在临界区，不然并发度会降低（临界区代码变长，上锁时间变长）<br>![[Pasted image 20250614134815.png]]</p></li></ul><h3 id="2-3-7-多生产者-多消费者模型"><strong>2.3_7 多生产者-多消费者模型</strong></h3><blockquote class="alert alert-note"><p>其实就是找出同步（前驱）关系和互斥关系</p></blockquote><h4 id="IMPORTANT"><strong>IMPORTANT</strong></h4><p>不同类别的生产者，不同类别的消费者</p><ul class="lvl-0"><li class="lvl-2"><p>在生产-消费者问题中，<strong>如果缓冲区大小为1，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区</strong>，缓冲区 &gt; 1则可能会存在不同进程访问同一地址，导致数据覆盖<br><strong>关系图</strong>：重点：找互斥关系和同步关系<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250614135749.png?e=1750320208&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:c05x3drlSP4AVxjq2Y9cq7Et9Bk=" alt=""><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250614140239.png?e=1750320227&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:f_1eGWzFAXN8F9RwAr9PDGmQX-Q=" alt=""><br><strong>分析同步问题是，应该从“事件”的角度来考虑，相当于是事件的发展顺序</strong></p></li></ul><h3 id="2-3-8-吸烟者问题"><strong>2.3_8 吸烟者问题</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>解决“可以让生产多个产品的单生产者”问题提供一个思路；</p></li><li class="lvl-2"><p>若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么<strong>各个V操作应该放在各自对应的“事件”发生之后的位置</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// 厨师一直在工作</span></span><br><span class="line">    <span class="comment">// 制作炒饭</span></span><br><span class="line">    开始炒饭();</span><br><span class="line">    炒饭加热中();</span><br><span class="line">    炒饭调味();</span><br><span class="line">    <span class="comment">// ... 一系列制作炒饭的步骤 ...</span></span><br><span class="line">    炒饭出锅(); <span class="comment">// &lt;-- 炒饭真正做好了！</span></span><br><span class="line">    V(rice_ready); <span class="comment">// 立即通知：炒饭准备好了！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 制作意大利面</span></span><br><span class="line">    煮意面();</span><br><span class="line">    准备酱汁();</span><br><span class="line">    混合意面和酱汁();</span><br><span class="line">    <span class="comment">// ... 一系列制作意大利面的步骤 ...</span></span><br><span class="line">    意大利面装盘(); <span class="comment">// &lt;-- 意大利面真正做好了！</span></span><br><span class="line">    V(pasta_ready); <span class="comment">// 立即通知：意大利面准备好了！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 制作烤鸡</span></span><br><span class="line">    腌制鸡肉();</span><br><span class="line">    放入烤箱();</span><br><span class="line">    等待烤熟();</span><br><span class="line">    <span class="comment">// ... 一系列制作烤鸡的步骤 ...</span></span><br><span class="line">    烤鸡取出切块(); <span class="comment">// &lt;-- 烤鸡真正做好了！</span></span><br><span class="line">    V(chicken_ready); <span class="comment">// 立即通知：烤鸡准备好了！</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以稍作休息或准备下一轮</span></span><br><span class="line">    休息一下();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-9-读者-写者问题"><strong>2.3_9 读者-写者问题</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>允许多个读者同时对文件执行读操作</p></li><li class="lvl-2"><p>只允许一个写者往文件中写信息</p></li><li class="lvl-2"><p>任一写者在<strong>完成写操作之前不允许其他读者或写者工作</strong></p></li><li class="lvl-2"><p>写者执行写操作前，<strong>应让已有的读者和写者全部退出</strong></p></li><li class="lvl-2"><p>PV操作可以实现<strong>一气呵成</strong></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">semaphore rw=<span class="number">1</span>;<span class="comment">//用于实现对文件的互斥访问。表示当前是否有进程在访问共享文件</span></span><br><span class="line"><span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//记录当前有几个读进程在访问文件</span></span><br><span class="line">semaphore mutex=<span class="number">1</span>;<span class="comment">//用于保证对count变量的互斥访问 </span></span><br><span class="line">semaphore w=<span class="number">1</span>; <span class="comment">//用于实现“写优先” 如果遇到写进程，会阻止后面新来的读者进程</span></span><br><span class="line">  </span><br><span class="line">writer()&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    P（w）;</span><br><span class="line">    P(rw); <span class="comment">//写之前“加锁”</span></span><br><span class="line">    写文件。。。</span><br><span class="line">    V（rw);<span class="comment">//写之后“解锁”</span></span><br><span class="line">    V(w);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader()&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    P(w); <span class="comment">// --读读时候锁住 W</span></span><br><span class="line">P(mutex); <span class="comment">//各读进程互斥访问 count</span></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>) </span><br><span class="line">      P(rw); <span class="comment">//第一个读进程的读进程数+1 申请文件读取 </span></span><br><span class="line">    count++; <span class="comment">//访问文件的读进程数+1</span></span><br><span class="line">    V(mutex); </span><br><span class="line">    V(w);</span><br><span class="line">    读文件...</span><br><span class="line">    P(mutex); <span class="comment">//各读进程互斥访问count</span></span><br><span class="line">    count--; <span class="comment">//访问文件的读进程数-1</span></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line">      V(rw); <span class="comment">//最后一个读进程负责“解锁”</span></span><br><span class="line">    V(mutex);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我认为这一部分可以深究我认为他相当于给 count 计数进行了一个原子性操作，放置count与真实读的人数不符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P(mutex); <span class="comment">//各读进程互斥访问 count</span></span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>) </span><br><span class="line">      P(rw); <span class="comment">//第一个读进程的读进程数+1 申请文件读取 </span></span><br><span class="line">    count++; <span class="comment">//访问文件的读进程数+1</span></span><br><span class="line">V(mutex); </span><br></pre></td></tr></table></figure><p>读者优先锁：读进程截止才能到写进程写者优先锁：写进程截止才能到读进程</p><h3 id="2-3-10-哲学家进餐问题"><strong>2.3_10 哲学家进餐问题</strong></h3><p>五个人，必须拿左右的筷子才能吃饭</p><ul class="lvl-0"><li class="lvl-2"><p>避免死锁发生解决方案：<br>1、可以对哲学家进程<strong>施加一些限制条件</strong>，比如最多允许四个哲学家同时进餐，这样可以保证至少有一个哲学家是可以拿到左右两只筷子的。<br>2、要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一只后再等待另一只的情况。<br>3、仅当一个哲学家左右两只筷子都可用时才允许他抓起筷子。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">//互斥地取筷子</span></span><br><span class="line">Pi()&#123;     <span class="comment">//i号哲学家的进程</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    P(mutex);</span><br><span class="line">    p(chopstick[i]);   <span class="comment">//拿右</span></span><br><span class="line">    p(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);<span class="comment">//拿左</span></span><br><span class="line">    V(mutex);</span><br><span class="line">    吃饭...</span><br><span class="line">    V(chopstick[i]);</span><br><span class="line">    V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);</span><br><span class="line">    思考...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-11-管程"><strong>2.3_11 管程</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>为什么要引入管程<br>P V 操作容易出错、困难（人为定位P，V顺序困难）</p></li><li class="lvl-2"><p>管程的定义和基本特征定义：（类似于 C++中的CLASS（类））</p></li><li class="lvl-2"><p>局部于管程的共享数据结构说明</p></li><li class="lvl-2"><p>对该数据结构进程操作的一组过程</p></li><li class="lvl-2"><p>对局部于管程的共享数据设置初始值的语句</p></li><li class="lvl-2"><p>管程有一个名字</p></li></ul><p>基本特征：</p><ul class="lvl-0"><li class="lvl-2"><p>局部于管程数据结构只能被局部于管程的过程所访问</p></li><li class="lvl-2"><p>一个进程只有通过<strong>调用管程内的过程</strong>（特定入口）才能进入管程访问共享数据</p></li><li class="lvl-2"><p><strong>每次仅</strong>允许一个进程<strong>在管程内执行某个内部过程</strong></p></li></ul><blockquote><p>相当于C++的类，<strong>管程是数据放在private中，函数放在public中</strong></p></blockquote><p>拓展1：用管程解决生产者消费者问题 (相当于提供一个函数，让实现变得简单)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">monitor producerconsumer</span><br><span class="line">  condition full,empty;</span><br><span class="line">  <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="type">void</span> <span class="title function_">insert</span><span class="params">(Item item)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(count == N)</span><br><span class="line">      wait(full);</span><br><span class="line">    count++;</span><br><span class="line">    insert_item (item);</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line">      signal(empty);</span><br><span class="line"> &#125;</span><br><span class="line">  Item <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">      wait(empty);</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">if</span>(count == N<span class="number">-1</span>)</span><br><span class="line">      signal(full);</span><br><span class="line">    <span class="keyword">return</span> remove_item();</span><br><span class="line"> &#125;</span><br><span class="line">  end monitor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者进程</span></span><br><span class="line">producer()&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    item = 生产一个产品;</span><br><span class="line">    producerconsumer.insert(item);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者进程</span></span><br><span class="line">consumer()&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    item = producerconsumer.remove();</span><br><span class="line">    消费产品 item;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展2：Java中类似于管程的机制<br>java中用synchronized来描述一个函数,这个函数同一时间只能被一个线程调</p><h3 id="2-4-1-死锁的概念"><strong>2.4_1 死锁的概念</strong></h3><p>1、什么是死锁各进程<strong>互相等待</strong>对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p><p>2、<strong>进程死锁、饥饿、死循环的区别</strong></p><ul class="lvl-0"><li class="lvl-2"><p>死锁：定义：各进程<strong>互相等待</strong>对方手里的资源，导致各进程都阻塞，无法向前推进的现象。区别：<strong>至少两个或两个的进程</strong>同时发生死锁（处于阻塞态）</p></li><li class="lvl-2"><p>饥饿：<br>ex：如读写，一直读，就不会到写的步骤定义：由于<strong>长期得不到</strong>想要的资源，某进程无法向前推进的现象。区别：<strong>可能只有一个进程发生饥饿</strong>（处于阻塞态或者就绪态）</p></li><li class="lvl-2"><p>死循环：定义：某进程执行过程中<strong>一直跳不出某个循环</strong>的现象。区别：<strong>死循环是程序员的问题</strong>（<strong>可能处于运行态</strong>）</p></li></ul><p>3、死锁产生的<strong>必要条件</strong> – 以哲学家问题为例<br><img src="" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p><strong>互斥条件</strong>：多个进程<strong>争夺资源</strong>发生死锁（我的在你那，你的在我这）</p></li><li class="lvl-2"><p>不剥夺条件：进程获得的资源<strong>不能由其它进程强行抢夺</strong>（你的资源在我这里，然后我还不给你）</p></li><li class="lvl-2"><p>请求和保持条件：某个进程有了资源，还在请求资源（我有资源，但是我现在有一个资源没拿到，我进行不下去）</p></li><li class="lvl-2"><p>循环等待条件：存在资源的循环等待链（<strong>死锁时一定有循环等待，循环等待的时候不一定定死锁，如果循环的资源大于1，就未必会发生死锁</strong>）</p></li></ul><p>4、什么时候会发生死锁</p><ul class="lvl-0"><li class="lvl-2"><p>对<strong>系统资源的竞争</strong></p></li><li class="lvl-2"><p>进程<strong>推进顺序非法</strong>：申请的资源被<strong>互相</strong>所占有而阻塞</p></li><li class="lvl-2"><p>信号量的使用不当也会造成死锁</p></li></ul><p>5、死锁的处理策略</p><ul class="lvl-0"><li class="lvl-2"><p>预防死锁：破坏必要条件</p></li><li class="lvl-2"><p>避免死锁：用算法检查</p></li><li class="lvl-2"><p>死锁的检测和解除</p></li></ul><h3 id="2-4-2-死锁的处理策略——预防死锁"><strong>2.4_2 死锁的处理策略——预防死锁</strong></h3><p>1、不允许死锁发生</p><ul class="lvl-0"><li class="lvl-2"><p>静态策略：<strong>预防死锁</strong></p></li><li class="lvl-2"><p><strong>破坏互斥条件</strong>（有些不能破坏）</p><ul class="lvl-2"><li class="lvl-6">​把互斥的资源改造为<strong>共享资源</strong></li></ul></li><li class="lvl-2"><p><strong>破坏不剥夺条件</strong>（<strong>复杂，造成之前工作失效，增加系统开销，会全部放弃、导致饥饿</strong>）</p><ul class="lvl-2"><li class="lvl-6">​方案1：当请求得不到满足的时候，立即释放手里的资源</li><li class="lvl-6">​方案2：由系统介入，强行帮助剥夺资源</li></ul></li><li class="lvl-2"><p><strong>破坏请求和保持条件</strong>（<strong>资源利用率极低</strong>，可能会<strong>导致某些进程饥饿</strong>）</p><ul class="lvl-2"><li class="lvl-6">​采用静态分配方法，<strong>一次性全部申请，如果申请不到，不要允许运行</strong></li></ul></li><li class="lvl-2"><p><strong>破坏循环等待条件</strong>（不方便增加新的设备，实际使用与递增顺序不一致，会导致资源的浪费，必须按规定次序申请资源）</p><ul class="lvl-2"><li class="lvl-6">顺序资源分配法：对资源编号，<strong>进程按编号递增顺序请求资源</strong>，不能发生循环等待链</li><li class="lvl-6">动态检测：避免死锁</li></ul></li></ul><p>2、允许死锁发生</p><ul class="lvl-0"><li class="lvl-2"><p>死锁的检测和解除</p></li></ul><h3 id="2-4-3-死锁的处理策略——避免死锁"><strong>2.4_3 死锁的处理策略——避免死锁</strong></h3><p>动态检测：避免死锁</p><ul class="lvl-0"><li class="lvl-2"><p>什么是安全序列<br><strong>一个安全序列来进行资源分配可以满足所需进程的所有需求</strong></p></li><li class="lvl-2"><p>进行后面的某些情况，不会使系统发生死锁</p></li><li class="lvl-2"><p>什么是系统的不安全状态，与死锁有何联系资源分配不均，会存在一些进程的资源在互相的手上从而无法继续进行下去</p></li><li class="lvl-2"><p>如果<strong>系统处于安全状态，就一定不会发生死锁</strong>。如果系统进入不安全状态，就可能发生死锁（<strong>处于不安全状态未必就是发生了死锁，但发生死锁时一定时在不安全状态</strong>）</p></li></ul><h4 id="IMPORTANT-2"><strong>IMPORTANT</strong></h4><ul class="lvl-0"><li class="lvl-2"><p>如何避免系统进入不安全状态**——<strong>银行家算法</strong></p></li><li class="lvl-2"><p>初始分配完成后，<strong>优先全部分配给最少的（进程未来所需的最大需求），并且拿回资源</strong>​步骤：​1、检查此次申请资源量是否超过了之前进程声明的最大需求数​2、检查此时系统剩余的可用资源是否还能满足这次请求​3、试探着分配，更改各数据结构​4、<strong>用安全性算法检查此次所分配是否会导致系统进入不安全状态</strong>*<br><strong>安全性算法</strong>：检查当前剩余资源是否能够满足某个进程的最大需求）<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250614161212.png?e=1750321479&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:JrT1RrFLOZbHuhr_KhpCREcW1Q8=" alt=""></p></li></ul><h3 id="2-4-4-死锁的处理策略——检测和解除"><strong>2.4_4 死锁的处理策略——检测和解除</strong></h3><p><strong>边的性质</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p>$进程节点 \rightarrow 资源节点 （请求资源）$</p></li><li class="lvl-2"><p>$资源节点 \rightarrow 进程节点 （分配资源）$</p></li><li class="lvl-2"><p>死锁的检测<br>1、用某种数据结 构来保存资源的请求和分配信息<br>2、提供一种算法，利用上述信息来检测系统是否已进入死锁状态<br><strong>对于一个节点，当前的资源分配是满足他的进程的资源需求的，我们就可以删除他的所有的边</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250614161901.png?e=1750321627&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:LHzIO4n9WRNBH4MPiP5_k4PlBqQ=" alt=""></p></li><li class="lvl-2"><p>死锁的解除<br>1、资源剥夺法：挂起某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。<br>2、撤销进程法：强制撤销部分，甚至全部死锁进程，并剥夺这些进程的资源。<br>3、进程回退法：让一个或多个死锁进程回退到足以避免死锁的地步。</p></li></ul><h2 id="内存管理">内存管理</h2><h3 id="3-1-1-内存的基础知识"><strong>3.1_1 内存的基础知识</strong></h3><p>1、什么是内存存储单元：每个地址对应一个存储单元内存地址：存储单元的编号<br><strong>按字节编址 ：一个存储单元的大小为一个字节</strong><br><strong>按字编址：计算机的字长就是字的大小</strong></p><p>补充知识：</p><ul class="lvl-0"><li class="lvl-2"><p>B:$2^{3}bit$</p></li><li class="lvl-2"><p>K:$2^{10}B$</p></li><li class="lvl-2"><p>M:$2^{20}B$</p></li><li class="lvl-2"><p>G:$2^{30}B$</p></li></ul><p>2、进程运行的基本原理指令的工作原理：逻辑地址vs物理地址：逻辑地址就是相对地址（<strong>相对于进程的起始地址而言的地址</strong>），物理地址是<strong>绝对地址</strong></p><p>从写程序到程序运行：<strong>编辑(.c)-编译(.o)-链接-装入（内存）</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615154650.png?e=1750321921&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:yvBvTStBoZOl274bmM2pwdrBo6I=" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p><strong>如何从逻辑地址$\rightarrow$ 物理地址 (MMU 进行地址翻译 – 寄存器映射)</strong><br>三种装入方式：<em>绝对装入</em>（在编译的时候就知道程序放在内存的哪个位置）、<em>静态重定位</em>（装入时将逻辑地址转为物理地址，<strong>地址需要连续，需要分配要求的所有空间</strong>）、<em>动态重定位</em>（把地址转化推迟到程序真正要执行时才进行，需要<strong>重定位寄存器存储进程起始地址</strong>）</p></li><li class="lvl-2"><p><strong>三种链接方式</strong><br>静态链接（在程序运行前，<strong>先将各目标模块及它们所需的库函数连接成一个完整的可执行文件</strong>在进行装入）、装入时动态链接（将各目标模块装入内存时，<strong>边装入边链接</strong>的链接方式）、运行时动态链接（在程序执行中需要该模块时，才对它进行链接，其优点时便于修改和更新。）</p></li></ul><h3 id="3-1-2-内存管理的概念"><strong>3.1_2 内存管理的概念</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>内存空间的分配与回收</p></li><li class="lvl-2"><p>内存空间的扩充（ex：计算机内存只有20G，但是游戏要100G）<br>ex：内存的虚拟性</p></li><li class="lvl-2"><p>地址转换<br><strong>逻辑地址和物理地址转换MMU</strong></p></li><li class="lvl-2"><p>存储保护</p><ul class="lvl-2"><li class="lvl-6">设置<strong>上下限寄存器</strong>（<strong>给出自己进程所在的地址范围</strong>，防止访问其他进程的内存）</li><li class="lvl-6">采用**重定位寄存器（基址寄存器）和界地址寄存器（限长寄存器）*8</li></ul></li></ul><h3 id="3-1-3-覆盖与交换"><strong>3.1_3 覆盖与交换</strong></h3><p><strong>进程映像：不同代码位置对应的虚拟地址空间位置</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>解题模版</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615155837.png?e=1750321946&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:BoGv-9JYPglv6-tppsuLVT0zesU=" alt=""></p></li><li class="lvl-2"><p>例题：<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615155752.png?e=1750321967&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:_8OEzmkqrU4fnZnCoFiuqADWVZw=" alt=""></p></li></ul><p>内存空间的扩充</p><ul class="lvl-0"><li class="lvl-2"><p>覆盖技术：将<strong>程序分为多个段</strong>，内存分为”固定区“和”覆盖区“，需要<strong>常驻的放在“固定区”</strong>，<strong>调入后就不再调出</strong>，<strong>不常用的段放在”覆盖区“，需要用到时调入内存，用不到时掉出内存</strong>（不同时访问的程序可以放到一个 “覆盖区”，必须声明覆盖结构，<strong>对用户不透明</strong>）</p></li><li class="lvl-2"><p>交换技术：内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（PCB会常驻内存，不会被换出）</p></li></ul><h4 id="IMPORTANT-3">IMPORTANT</h4><p><strong>进程七状态模型：</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615160627.png?e=1750321991&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:4T6fKDQcK0O7aPvKUX-RK2HQJHk=" alt=""></p><h3 id="3-1-4-连续分配管理方式"><strong>3.1_4 连续分配管理方式</strong></h3><p>连续分配方式</p><ul class="lvl-0"><li class="lvl-2"><p><strong>单一连续分配</strong>：内存被分配为系统区和用户区，系统区在低地址，用户区是<strong>一个用户独享</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615161338.png?e=1750322010&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:7KSypUkEMFaoQerLw_RyIl1Um30=" alt=""></p></li><li class="lvl-2"><p><strong>固定分区分配</strong>：将用户区分割为若干<strong>固定分区给各道程序</strong>，分割策略有分区大小相等和分区大小不相等，可以建议一个<strong>分区说明表来管理各个分区(保存对应的分区的大小，起始地址，状态)</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615162140.png?e=1750322028&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:ouAYOgbkxfW8VNeXt3W6pUCPu9A=" alt=""></p></li><li class="lvl-2"><p><strong>动态分区分配</strong>：可变分区分配，不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态地建立分区，并使分区的大小正好适合进程的需要。</p></li></ul><p>内部碎片：<strong>分配给某进程的内存区域中，但是有些部分没有用上</strong><br>外部碎片：<strong>是指内存中的某些空闲分区由于太小而难以利用（如果有外部碎片，可以采用紧凑技术）</strong></p><h3 id="3-1-5-动态分区分配算法"><strong>3.1_5 动态分区分配算法</strong></h3><p><em>空闲分区的选择</em><br>1、首次适应算法（First Fit)<br>算法思想：<strong>每次从低地址开始查找</strong>，找到第一个能满足大小的空闲分区常用数据结构：空闲分区表和空闲分区链<br>2、最佳适应算法(Best Fit)<br>算法思想：为了保证“大进程”到来时能有连续的大片区域，可以尽可能留下大片的空闲区，<strong>优先使用更小的空闲区。</strong></p><ul class="lvl-0"><li class="lvl-2"><p><strong>空闲分区按容量递增次序链接，分配内存时顺序查找空闲分区链</strong></p></li><li class="lvl-2"><p>缺点：<strong>会留下小碎片</strong><br>3、最坏适应算法(Worst Fit)<br>算法思想：和最佳适应算法相反，按<strong>容量递减次序排列</strong>，每次尽可能用大的分区</p></li><li class="lvl-2"><p>缺点：<strong>如果出现“大进程”，就没有内存分区可用</strong><br>4、领近适应算法(Next Fit)<br>算法思想：每次从<strong>上次查找结束</strong>的位置开始检索</p></li><li class="lvl-2"><p>缺点：大空间容易被用完</p></li></ul><h3 id="3-1-6-基本分页存储管理的基本概念"><strong>3.1_6 基本分页存储管理的基本概念</strong></h3><p><strong>一些相关的简单计算</strong></p><ul class="lvl-0"><li class="lvl-2"><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615194748.png?e=1750323159&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:PO9MO0tvnl7Q_r3e-ElS3u9L9Wg=" alt=""></p></li><li class="lvl-2"><p><strong>相关计算</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615212856.png?e=1750323230&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:VN7A5z6LTVm0CwTwChDMylUJc08=" alt=""></p></li></ul><p><strong>进程可以分为多个页面</strong><br>分页管理：物理地址= 页面的其实位置（P号页面在内存中的起始地址）+偏移量（页内偏移量）<br>$$<br>页号 = (逻辑地址)/(页面长度)<br>$$<br>$$<br>页内偏移量 = (逻辑地址) % 页面长度<br>$$<br>例题：<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615195048.png?e=1750323266&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:uN4GZvR2a94rpDPrt_5lB3XJJr0=" alt=""></p><p>概念：允许一个进程分散地装入道许多不相邻的位置</p><ul class="lvl-0"><li class="lvl-2"><p>连续分配：为用户进程<strong>分配连续</strong>的内存空间</p></li><li class="lvl-2"><p>非连续分配：为用户进程<strong>分配分散</strong>的内存空间</p></li><li class="lvl-2"><p>将内存分为大小相等的小分区“页框”，将用户的进程空间也分为大小相等的一个个区域，以页</p></li><li class="lvl-2"><p>框的基本单位分配给每个进程片</p></li><li class="lvl-2"><p>计算机中用2的整数倍表示页面的大小</p></li><li class="lvl-2"><p>页表：<strong>存放页号和块号的对应关系</strong></p></li></ul><p><strong>易错知识点</strong>：页框，页帧，内存块，物理块，物理页号（内存划分的） VS 页，页面（进程划分的）页框号，页帧号，内存块号，物理块号 VS 页号，页面号</p><h3 id="3-1-7-基本地址变换机构"><strong>3.1_7 基本地址变换机构</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>两次访存：一次查询页表，一次访问真实物理地址</p></li></ul><p><strong>页表寄存器（PTR）</strong>：<strong>存放页表在内存中的起始地址F和页表长度M</strong>，进程未执行时，页表的起始地址和页表的长度放在进程控制块（PCB）中，当进程被调度时，操作系统内核会把它们放在页表寄存器中。</p><blockquote><p>困难</p></blockquote><p>易混淆概念：</p><blockquote><p>一个页表中有很多个内存块</p></blockquote><p><strong>页表其实就是一张表里面存储了所有页面的起始地址，存储了每号页面的内存块号</strong></p><ul class="lvl-0"><li class="lvl-2"><p>页表项地址；<strong>页表起始地址F + 页号P  * 页表项长度</strong></p></li><li class="lvl-2"><p><strong>页表项是指向物理地址的虚拟地址</strong></p></li><li class="lvl-2"><p>页表长度：页表中有几个页表项：总共有几页</p></li><li class="lvl-2"><p>页表项长度：每个页表项所占的内存</p></li></ul><p>相关计算：</p><ul class="lvl-0"><li class="lvl-2"><p>**页内偏移量 $\rightarrow$ 页面大小<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615202311.png?e=1750323555&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:4ZHeGIGYLmy4dJyXe4PCA1g3sy4=" alt=""></p></li></ul><h3 id="3-1-8-具有快表的地址变换机构"><strong>3.1_8 具有快表的地址变换机构</strong></h3><p>1、局部性原理时间局部性：访问某个变量（指令）后，在<strong>不久的将来还会被访问</strong><br>空间局部性：程序访问了某个存储单元，<strong>不久之后，其附近的存储单元也很有可能被访问</strong></p><p>2、什么是<strong>快表（TLB）</strong><br>快表：又称联想寄存器（TLB），是一种访问速度比内存快很多的<strong>高速缓冲存储器（高速缓存）</strong>，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，<em>内存中的页表常称为慢表。</em></p><p>3、引入快表后，地址的变换过程<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615212143.png?e=1750323587&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:nZ20PUFPHEvBYDqx5f19GuikfIs=" alt=""></p><h3 id="3-1-9-两级页表"><strong>3.1_9 两级页表</strong></h3><p>1、单级页表存在什么问题？如何解决？</p><ul class="lvl-0"><li class="lvl-2"><p><strong>所有页表项必须连续存放</strong>，页表过大时需要很大的连续空间</p></li><li class="lvl-2"><p>在一段时间内并非所有页面都用得到，因此没必要让整个页表常驻内存</p></li></ul><p>2、两级页表的原理、逻辑地址结构</p><ul class="lvl-0"><li class="lvl-2"><p>将长长的页表再分页</p></li><li class="lvl-2"><p>逻辑地址结构：（一级页号、二级页号、页内偏移量）</p></li><li class="lvl-2"><p>页目录表、外层页表、顶级页表<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615213738.png?e=1750323666&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:tioncSI7ZMveCWN3sLx3W6AMZlg=" alt=""><br>3、<strong>如何实现地址变换？</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615213452.png?e=1750323691&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:GhzTY1Pl0IUhE8isP0UgqkX4tUk=" alt=""><br><strong>（外页表项 $\rightarrow$内页表项的存放位置 $\rightarrow$ 内存块 $\rightarrow$ 根据偏移量得到物理地址）</strong></p></li><li class="lvl-2"><p>按照地址结构将逻辑地址拆分成三部分</p></li><li class="lvl-2"><p>从PCB中读出页目录表始址，根据一级页号查页目录表，找到下一级页表在内存中的存放位置</p></li><li class="lvl-2"><p>根据二级页号查表，找到最终想访问的内存块号</p></li><li class="lvl-2"><p>结合页内偏移量得到物理地址</p></li></ul><p>4、两级页表问题需要注意的几个细节</p><ul class="lvl-0"><li class="lvl-2"><p>多级页表中，<strong>各级页表的大小不能超过一个页面</strong>。若两级页表不够，可以分更多级<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615213953.png?e=1750323918&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:SoGcbwTq1I482DpNNDNSPqEBC48=" alt=""><br><strong>为什么页面偏移量为 12位？</strong><br><strong>因为 按字节编制，页面中的每一行就只有一个字节B</strong></p></li><li class="lvl-2"><p>多级页表的访问次数（假设没有快表结构）——<strong>N级页表访问一个逻辑地址需要N+1次访存</strong></p></li></ul><h3 id="3-1-10-基本分段存储管理方式"><strong>3.1_10 基本分段存储管理方式</strong></h3><p>1、什么是分段？</p><ul class="lvl-0"><li class="lvl-2"><p>进程的地址空间：按照<strong>程序自身的逻辑关系划分为若干个段</strong>，每段有段名，每段从0开始编址</p></li><li class="lvl-2"><p>段号的位数决定了每个进程最多可以分几个段</p></li><li class="lvl-2"><p>段内地址位数决定了每个段的最大长度是多少相当于处于 <strong>第几段</strong> 和 <strong>这一段的哪个位置</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615215158.png?e=1750323941&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:ZcPZlC_isETxU8dF2glZYP9RpI0=" alt=""></p></li></ul><p>2、什么是段表段表：段映射表（map: map[i] 第i 号段的起始位置）</p><ul class="lvl-0"><li class="lvl-2"><p>每个程序被分段后，用段表记录该程序在内存中存放的位置</p></li><li class="lvl-2"><p>段表：(段号) <strong>段长 基址</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615215705.png?e=1750324106&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:t8Fge41bERAZh1_fTx-Jgo1ZpoY=" alt=""><br>3、如何实现地址变换<br><strong>注意各个段的长度不一样，所以会进行检测段内地址是否超过段长</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615215953.png?e=1750324130&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:_AOvWzZ2k-_qURqaP17aeqy_YdI=" alt=""><br>4、分段、分页管理的对比</p></li><li class="lvl-2"><p>页：信息的<strong>物理单位</strong>，<strong>实现离散分配</strong>，提高内存利用率，地址是一维的，访存两次</p></li><li class="lvl-2"><p>段：信息的<strong>逻辑单位</strong>，对系统可见，地址是二维的，访存3次分段比分页更容易<strong>实现信息的共享和保护</strong>（<strong>不能被修改的代码称为纯代码和可重入代码 才可以被共享访问，不属于临界资源</strong>）<br>WHY：<br><strong>因为分页是物理模块划分的</strong>，而<strong>分段是按照逻辑模块进行划分的</strong>。<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615220506.png?e=1750324191&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:hOjZ3zoV3OChCBHCKnxIZ2TnOSo=" alt=""></p></li></ul><h3 id="3-1-11-段页式的管理方式"><strong>3.1_11 段页式的管理方式</strong></h3><p>1、分页、分段管理方式最大的优缺点</p><ul class="lvl-0"><li class="lvl-2"><p>分页：内存空间利用率高，碎片少，不方便进行信息共享和保护</p></li><li class="lvl-2"><p>分段：方便信息共享和保护，如果段长大，容易产生外部碎片</p></li></ul><p>2、分段+分页的结合——段页式管理方式</p><ul class="lvl-0"><li class="lvl-2"><p>先分段再分页<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615221030.png?e=1750324219&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:1Yhoo8PFb6hBPBEkHADMivEYPDM=" alt=""></p></li><li class="lvl-2"><p><strong>段号 + 页号 + 页内偏移量</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615221227.png?e=1750324236&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:cNNgqz2VZK6AduxwqbgfklZmAOI=" alt=""><br><strong>计算点</strong><br><strong>段号的位数决定了每个进程最多可以分几个段</strong><br><strong>页号位决定了每个段最大有多少页</strong><br><strong>页内偏移量决定了页面大小，内存块大小</strong></p></li><li class="lvl-2"><p>地址结构是二维的分段（段号，段内地址）是用户可见的，分页是系统自动根据段内地址进行划分的（<strong>连续</strong>）</p></li></ul><p>3、段表、页表<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615221555.png?e=1750324292&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:chmTpCnNTfR06sGB8h7GjvZ3SaU=" alt=""><br>4、如何实现地址变换<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250615221719.png?e=1750324320&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:hHowoWu3AIy43WYR_eQIB2yWs-s=" alt=""></p><h3 id="3-2-1-虚拟内存的基本概念"><strong>3.2_1 虚拟内存的基本概念</strong></h3><p>1、传统存储管理方式的特征、缺点之前讲的一次性：作业<strong>必须全部</strong>装入内存后才能开始运行，<strong>并发性下降</strong><br>驻留性：一旦作业被装入内存，就会<strong>一直驻留在内存</strong>，但是可能运行只需要作业的一部分数据</p><h4 id="IMPORTANT-4">IMPORTANT</h4><p>2、<strong>局部性原理</strong></p><ul class="lvl-0"><li class="lvl-2"><p>时间局部性</p></li><li class="lvl-2"><p>空间局部性</p></li><li class="lvl-2"><p>高速缓存技术</p></li></ul><p>3、虚拟内存的定义和特征</p><p>概念：虚拟内存最大容量是计算机地址结构确定的</p><ul class="lvl-0"><li class="lvl-2"><p><strong>虚拟内存的实际容量=min(内存和外存容量之和，CPU寻址范围)</strong></p></li><li class="lvl-2"><p>eg：某计算机地址结构为32位，按字节编址，内存大小为512MB，外存大小为2GB.<br>则虚拟内存的最大容量为 2^32B=4GB<br>虚拟内存的实际容量=min(2^32B,512MB+2GB)=2GB+512MB</p></li></ul><p><strong>特征</strong>：<br><strong>多次性</strong>：无需在作业运行时一次性全部装入内存，而是<strong>允许被分成多次调用内存</strong><br><strong>对换性</strong>：在作业运行时<strong>无需一直常驻内存</strong>，而是允许在作业运行过程中，将作业换入换出<br><strong>虚拟性</strong>：从<strong>逻辑上扩充了内存的容量</strong>，使用户看到的内存容量，远大于实际的容量</p><p>4、如何实现虚拟内存技术</p><ul class="lvl-0"><li class="lvl-2"><p>在程序执行过程中，当所访问的信息不再内存时，由操作系统负责将所需信息从外存调入内存，然后继续执行程序。(请求调页)</p></li><li class="lvl-2"><p>若内存空间不够，由操作系统负责将内存中暂时用不到的信息换出到外存。（置换功能）</p></li></ul><h3 id="3-2-2-请求分页管理方式"><strong>3.2_2 请求分页管理方式</strong></h3><p>1、页表机制<br><strong>请求分页存储的页表</strong>：内存块号  状态位 访问字段 修改位 外存地址<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250616210333.png?e=1750324632&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:ZJV36UxtE7SvDgy5DjPW1Fw13gc=" alt=""><br>2、缺页中断机构查询页表不存在内存中，会产生<strong>缺页中断</strong>，通过<strong>页面置换算法</strong>进行页面淘汰<br><strong>内中断</strong>，可被修复</p><p>3、地址变换机构<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250616210702.png?e=1750324650&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:7K7UhTV2XNOPDWSvPjCgOdXoD3o=" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p><strong>整体流程</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250616210959.png?e=1750324669&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:rp3K6VV7AhfJR23wUUc5cCPqcbA=" alt=""></p></li></ul><h3 id="3-2-3-页面置换算法"><strong>3.2_3 页面置换算法</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>换出磁盘需要 <strong>I/O</strong>大量的消费</p></li><li class="lvl-2"><p>缺页中断 <strong>不等于</strong> 内存置换，因为内存置换是内存块满了的情况下</p></li></ul><p>1、最佳置换算法（<strong>OPT</strong>）</p><blockquote><p>找出<strong>最后才出现的页面</strong>并淘汰</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>每次选择淘汰的页面是<strong>以后永不使用或者在最长时间内不再被访问的页面</strong>，这样可以保证最低的缺页率。问题：</p></li><li class="lvl-2"><p>实际上不知道后面的序列（理想化算法）</p></li></ul><p>2、先进先出置换算法（FIFO）</p><blockquote><p>每次选择淘汰的页面是<strong>最早进入内存</strong>的页面</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>问题：</p><ul class="lvl-2"><li class="lvl-6">Belady异常，<strong>当分配的内存块增大时，缺页次数反而增加</strong></li><li class="lvl-6">因为先进入的页面可能后面会被访问到（局部性原理）</li></ul></li></ul><p>3、最近最久未使用置换算法（LRU）</p><blockquote><p>每次淘汰<strong>最近最久未使用</strong>的页面</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>记录<strong>上次访问到现在的时间</strong>，淘汰时间最大的</p></li><li class="lvl-2"><p>性能好，但是需要硬件支持，算法开销大</p></li></ul><p>4、时钟置换算法（最近未用算法，CLOCK）</p><blockquote><p>简单的：最多经历两轮扫描，初始为1（访问过），扫一下为0（没有访问过），再扫一下被踢</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>第一轮扫描会给所有的 <strong>1变成0</strong>，访问到0，淘汰这个页面，将新页面置换到淘汰的页面的位置，<strong>让将这个页面访问改成1</strong></p></li><li class="lvl-2"><p>缺点：没有考虑页面是否被修改过（会增大开销）</p></li></ul><p>5、改进型的时钟置换算法</p><blockquote><p><strong>如果淘汰的页面没有被修改过，就不需要执行 I/O 操作，写回外存</strong></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>00 表示没有被访问过（第一个0），没有被修改过（第二个0）</p></li><li class="lvl-2"><p>先找 00 $\rightarrow 01\text{（将所有的访问位（第一个全被设置为0））} \rightarrow 00 \rightarrow 01$</p></li><li class="lvl-2"><p>优先淘汰没有被修改过的，因为没有修改过的不用进行IO操作00-&gt;01（改）-&gt;00-&gt;01<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617110834.png?e=1750324692&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:7KhZSchW0PEKd3hmQL59xBXSNHE=" alt=""></p></li><li class="lvl-2"><p>算法开销小，性能也不错</p></li></ul><h3 id="3-2-4-页面分配策略"><strong>3.2_4 页面分配策略</strong></h3><p>1、驻留集指请求分页存储管理中<strong>给进程分配的物理块的集合</strong>（相当于给进程分的内存）</p><ul class="lvl-0"><li class="lvl-2"><p>驻留集太大：多道程序并发度下降，资源利用率降低</p></li><li class="lvl-2"><p>驻留集太小：缺页频繁，效率低，花费大</p></li></ul><p>2、页面分配、置换策略</p><ul class="lvl-0"><li class="lvl-2"><p>固定分配局部替换：驻留集大小不可改变，在<strong>内存中（属于进程）的页面进行调换</strong></p></li><li class="lvl-2"><p>可变分配全局替换：可以<strong>将操作系统保留的空闲物理块</strong>分配给缺页进程</p></li><li class="lvl-2"><p>可变分配局部替换：只能<strong>选进程自己的物理块置换（系统后面可能会看他可怜多给他物理块）</strong></p></li></ul><p>3、调入页面的时机</p><ul class="lvl-0"><li class="lvl-2"><p>预调页策略：<strong>一次调用若干个相邻页面</strong>，运行前调入</p></li><li class="lvl-2"><p>请求调页策略：<strong>运行时缺页再调入</strong></p></li></ul><p>4、从何处调页</p><ul class="lvl-0"><li class="lvl-2"><p>对换区：快，采用<strong>连续分配方式</strong></p></li><li class="lvl-2"><p>文件区：慢，采用<strong>离散分配方式</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617112009.png?e=1750324717&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:2G4VfFx14JiSfpMfUpJ6g5U2x9c=" alt=""></p></li></ul><p>5、抖动（颠簸）现象</p><ul class="lvl-0"><li class="lvl-2"><p>刚刚换出页面的又要换入内存，刚刚换入的页面又要换出内存，物理块不够（<strong>进程频繁访问</strong>）</p></li><li class="lvl-2"><p>原因：<strong>分配给进程的物理块不够</strong></p></li></ul><p>6、工作集</p><ul class="lvl-0"><li class="lvl-2"><p>指在某段时间间隔里，进程实际访问页面的集合（一个窗口）</p></li><li class="lvl-2"><p>可以根据工作集来进行页面淘汰（不在工作集中 --局部性原理）<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617112206.png?e=1750324746&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:qsf8jzPcLxAY4h1CxZ5svYU25wc=" alt=""></p></li></ul><h3 id="3-2-7-内存映射文件">3.2_7 内存映射文件</h3><ul class="lvl-0"><li class="lvl-2"><p>操作系统向上层程序员提供的功能（系统调用）</p></li><li class="lvl-2"><p>方便程序员访问文件数据</p></li><li class="lvl-2"><p>实现文件数据共享<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617113244.png?e=1750324787&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:aHja0P9GRAEHtiRxDc8rc858TD8=" alt=""></p></li></ul><h2 id="文件管理">文件管理</h2><h3 id="4-1-1-初识文件管理"><strong>4.1_1 初识文件管理</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>基础结构<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617123643.png?e=1750324805&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:xZOomcxyRtWVcTL28ONdcs1FjoY=" alt=""></p></li><li class="lvl-2"><p>文件存放在外存之中</p></li></ul><h3 id="4-1-2-文件的逻辑结构"><strong>4.1_2 文件的逻辑结构</strong></h3><p>逻辑结构：在用户看来，文件数据是怎么组织起来的物理结构：在操作系统看，文件数据是怎么存放在外存中</p><p>1、无结构文件文件由一系列<strong>二进制文件流</strong>组成</p><p>2、有结构文件（记录式文件「顺序文件」）</p><ul class="lvl-0"><li class="lvl-2"><p>顺序文件：文件中的<strong>记录一个接一个顺序排列</strong>，定长或变长，可以<strong>顺序存储或者链式存储</strong></p><ul class="lvl-2"><li class="lvl-6">串结构：记录之间的顺序与关键字无关（一般是根据时间排序）</li><li class="lvl-6">顺序结构：记录之间的顺序按关键字顺序排列</li></ul></li></ul><p>链式存储：<strong>无法随机存取</strong><br>顺序存储：</p><ul class="lvl-0"><li class="lvl-2"><p>可变长：<strong>无法随机存取</strong></p></li><li class="lvl-2"><p>定长：<strong>可以随机存取</strong>，</p><ul class="lvl-2"><li class="lvl-6">串结构，无法快速找到关键字；</li><li class="lvl-6">顺序结构，可以快速查找关键字（折半查找）</li></ul></li></ul><p>索引文件：索引表本身是定长的顺序文件建立一个索引表，<strong>定长记录的顺序文件</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617125342.png?e=1750324840&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:ikBgCp8OVvSZiDzDKeDO8jngx_4=" alt=""><br>索引顺序文件：<strong>多级索引表嵌套查找</strong>（通过多级分组来加速查找效率）</p><blockquote><p>如何计算索引查找次数？</p></blockquote><p>根据一个属性进行分组，来对应映射，<strong>串结构的顺序文件</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617125621.png?e=1750324912&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:Y13voM3HM898_4eDrDGW_2tj-kw=" alt=""></p><h3 id="4-1-3-文件目录"><strong>4.1_3 文件目录</strong></h3><p>1、文件控制块（FCB）搜索、创建文件、删除文件、显示目录、修改目录<br><input type="checkbox" id="checkbox0"><label for="checkbox0">FCB是一个</label><strong>文件目录项</strong>，存储了文件的基本信息，存取控制信息，使用信息。多个FCB组成<strong>文件目录</strong></p><p>2、目录结构</p><ul class="lvl-0"><li class="lvl-2"><p>单级目录结构实现按名存取，不允许<strong>文件重名</strong></p></li><li class="lvl-2"><p>两级目录结构​主文件目录（MFD）+用户文件目录（UFD）-- 允许不同用户的文件重名，也可以实现访问限制🚫</p></li><li class="lvl-2"><p>多级目录结构（树形目录结构）</p><ul class="lvl-2"><li class="lvl-6">用标识符 ‘/’ 隔开</li><li class="lvl-6">当代操作系统采用方法、<strong>不便于文件共享</strong></li><li class="lvl-6">相对路径：从当前路径出发（减少 I/O 消耗）</li><li class="lvl-6">绝对路径：从根目录出发</li></ul></li><li class="lvl-2"><p>无环图目录结构</p><ul class="lvl-2"><li class="lvl-6">可以共享，复制 <strong>不等于</strong> 共享文件<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617130756.png?e=1750324934&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:fHK9HoOHMVCziGPjhJ6IR9LClHQ=" alt=""></li></ul></li></ul><p>3、索引节点（对文件控制块压缩文件名和信息<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617131044.png?e=1750324966&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:YKsjZJWdPTzJjQztIYNdc4dCqUA=" alt=""></p><h3 id="4-1-4-文件的物理结构（文件分配方式）"><strong>4.1_4 文件的物理结构（文件分配方式）</strong></h3><p>1、对非空闲磁盘块的管理一般<strong>磁盘块和内存块</strong>是大小相等的（便于数据交换）</p><p>**逻辑地址 $\rightarrow$ 物理地址</p><ul class="lvl-0"><li class="lvl-2"><p>连续分配</p><ul class="lvl-2"><li class="lvl-6">连续分配方式要求每个文件在磁盘上占有一组连续的块，对<strong>文件的拓展不方便（因为是连续的，如果后面磁盘块被占有则不好扩展）</strong>，有很多<strong>磁盘碎片</strong></li><li class="lvl-6">物理块号：<strong>起始块号 + 逻辑块号</strong></li><li class="lvl-6">支持<strong>顺序访问</strong>和<strong>直接访问（随机访问），在顺序访问时候是最快的</strong></li></ul></li><li class="lvl-2"><p>链接分配<br><strong>离散分配方式，通过映射来实现地址访问</strong></p><ul class="lvl-2"><li class="lvl-6">隐式分配：采用链接分配方式的文件（像链表，记录起始块号和结束块号），只支持<strong>顺序访问</strong>，不支持随机访问，<strong>方便拓展</strong></li><li class="lvl-6">显示分配：<strong>文件分配表FAT</strong>（常驻内存）显式记录下一块物理块的位置，方便拓展，支持<strong>随机访问</strong>（访问i号逻辑块，并不需要访问 0-i-1号逻辑块），<strong>文件表会占内存空间</strong>（不需要访问磁盘，减少了 I/O 操作）</li></ul></li></ul><h3 id="4-1-4-文件的物理结构（文件分配方式）-2"><strong>4.1_4 文件的物理结构（文件分配方式）</strong></h3><p>索引分配</p><ul class="lvl-0"><li class="lvl-2"><p>索引分配允许文件离散地分配在各个磁盘块中，系统会为<strong>每个文件建立一张索引表</strong>，索引表记录了<strong>文件的各个逻辑块对应的物理块</strong></p></li><li class="lvl-2"><p>支持随机访问（分配一个空闲块，然后增加一个索引表项）</p></li><li class="lvl-2"><p>索引表占空间索引表比磁盘块大的解决办法</p></li><li class="lvl-2"><p>链接方案（分配多个索引块进行链接「链表」）<br><strong>索引链长，查找低效</strong></p></li><li class="lvl-2"><p>多层索引</p><ul class="lvl-2"><li class="lvl-6">设置两层索引表，可以扩大索引表指向，<strong>加速索引速度</strong></li><li class="lvl-6"><strong>索引表大小不能超过一个磁盘块</strong></li><li class="lvl-6">K层索引结构（<strong>顶层索引表没有被掉入内存</strong>），访问一个数据块需要<strong>K + 1</strong>次 I/O 操作</li><li class="lvl-6">文件数据小的话可能会查找低效</li></ul></li><li class="lvl-2"><p>混合索引</p></li></ul><h4 id="IMPORTANT-5">IMPORTANT</h4><blockquote><p><strong>计算最大文件长度</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617133817.png?e=1750325075&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:NMP0-Pr59EGrk-VYWdZ1cyA724k=" alt=""><br>![[Pasted image 20250617134043.png]]</p></blockquote><h3 id="4-1-5-文件存储空间管理"><strong>4.1_5 文件存储空间管理</strong></h3><p>1、存储空间的划分与初始化</p><ul class="lvl-0"><li class="lvl-2"><p>文件卷（逻辑卷）的概念</p></li><li class="lvl-2"><p>目录区与文件区</p></li></ul><p>2、几种管理方法</p><ul class="lvl-0"><li class="lvl-2"><p>空闲表法：首位置+长度，回收时注意修改（“适合连续分配方式”）注意回收磁盘块的时候的合并问题<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617135651.png?e=1750326416&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:g0RQK76FyGU6umemxmbkDWwwpUs=" alt=""></p></li><li class="lvl-2"><p>空闲链表法（空闲盘块链、空闲盘区链（连续的空闲盘块组成一个<strong>盘区</strong>））</p><ul class="lvl-2"><li class="lvl-6">每一个盘区的第一个盘块记录长度和下一个盘区的指针</li><li class="lvl-6">分配：申请K个盘块，从链头到链尾进行分配</li><li class="lvl-6">回收：回收的盘块一次挂到链尾，修改空闲链的指针</li></ul></li><li class="lvl-2"><p>位示图法</p></li></ul><h4 id="IMPORTANT-6">IMPORTANT</h4><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617135651.png?e=1750326416&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:g0RQK76FyGU6umemxmbkDWwwpUs=" alt=""><br><strong>盘块号 与（字号，位号）相互转换的公式</strong><br><strong>n 是 位号</strong></p><ul class="lvl-0"><li class="lvl-2"><p>成组链接法：</p><ul class="lvl-2"><li class="lvl-6">文件卷的目录区中专门用一个磁盘块作为超级块，当系统启动时需要将超级内存块读入内存。并且保证内存与外存中的超级块数据一致。<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617141107.png?e=1750326519&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:90aJtM8EOpBsa4ZHwocVTk7SgBI=" alt=""></li></ul></li></ul><blockquote><p>回收和分配的方法</p></blockquote><h3 id="4-1-6-文件的基本操作"><strong>4.1_6 文件的基本操作</strong></h3><p>创建文件（create）<br>1、在外存中找到文件所需的空间<br>2、创建该文件对应的目录项</p><p>删除文件(delete)<br>1、找到文件名对应的目录项<br>2、回收文件占用的磁盘块<br>3、删除文件对应的目录项</p><p>读文件(read)</p><p>写文件(write)</p><p>打开文件(open)<br>1、找到文件名对应的目录项<br>2、将目录项复制到内存中的“打开文件”中</p><p>关闭文件(close)</p><h3 id="4-1-7-文件共享"><strong>4.1_7 文件共享</strong></h3><p>1、基于索引结点的共享方式（硬链接）-- <strong>直接指向物理地址</strong><br>不同用户的索引节点指针直接指向文件的索引节点</p><p>2、基于符号链的共享方式（软链接）-- <strong>保存的是文件路径</strong><br>Link类型的文件，记录了访问文件的存放路径，相当于win的快捷方式</p><h3 id="4-1-8-文件保护"><strong>4.1_8 文件保护</strong></h3><p>1、口令保护口令存放在<strong>系统内部</strong>，不安全<br>2、加密保护</p><ul class="lvl-0"><li class="lvl-2"><p>保密性强，<strong>不需要在系统中存储“密码”</strong></p></li><li class="lvl-2"><p>将数据进行加密，需要知道密码才能解密（异或加密）</p></li><li class="lvl-2"><p>编码/译码，需要花费一定时间<br>3、访问控制</p></li><li class="lvl-2"><p>在每个文件的FCB中增加一个<strong>访问控制表（ACL）</strong>，该表记录了各个用户可以对该文件执行哪些操作权限</p></li></ul><h3 id="4-1-9-文件系统的层次结构"><strong>4.1_9 文件系统的层次结构</strong></h3><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617143733.png?e=1750326551&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:Mf5tUJI2s7Y6f2iCwg09U9-I298=" alt=""></p><h3 id="文件系统布局-全局结构"><strong>文件系统布局(全局结构)</strong></h3><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250619175312.png?e=1750327112&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:jqVzbDKb0c7WPXIwws1PRji7cAw=" alt=""></p><p><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617152321.png?e=1750326584&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:TeMjVNx5CSuFMh6iSJk9hiCLdPM=" alt=""></p><h3 id="虚拟文件系统与文件系统挂载"><strong>虚拟文件系统与文件系统挂载</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>虚拟文件系统</p><ul class="lvl-2"><li class="lvl-6">向用户提供统一的系统调用接口<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617152720.png?e=1750326612&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:8O9Z7ju-6dk09PUxWl8BdNkScn0=" alt=""><br><strong>vnode 只存在于主存（数据结构）</strong>– 相当于一个黑卡，哪里都可以用<br><strong>inode 既会被调入主存，也会在外存中存储</strong>（记录 这个表内的数据（大小，修改时间，文件模式…）） <strong>新建文件的时候，会增加 指向inode 到新目录项</strong>）<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617153046.png?e=1750326958&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:Z4vK19g0h7NEVrE2Jr1pMgQj7ng=" alt=""></li></ul></li><li class="lvl-2"><p>文件系统挂载</p><ul class="lvl-2"><li class="lvl-6">注册新挂载的文件系统（<strong>挂载表</strong>）</li><li class="lvl-6">新挂载点文件系统，需要向 VFS 提供一个<strong>函数地址列表</strong></li><li class="lvl-6">新文件系统加到<strong>挂载点</strong>，就是某个父目录下</li></ul></li></ul><h2 id="IO设备">IO设备</h2><h3 id="5-1-1-I-O设备的概念和分类"><strong>5.1_1 I-O设备的概念和分类</strong></h3><p>1、什么是I-O设备输入/输出（Input / Output）</p><p>2、按使用特性分类</p><ul class="lvl-0"><li class="lvl-2"><p>人机交互的外部设备（数据传输慢）</p></li><li class="lvl-2"><p>存储设备（移动硬盘，光盘）</p></li><li class="lvl-2"><p>网络通信设备（路由器）</p></li></ul><p>3、按传输速率分类低速设备、中速设备、高速设备</p><p>4、按信息交换的单位分类块设备（<strong>传输快，可寻址</strong>）、字符设备（<strong>传输慢，不可寻址，常采用中断驱动方式</strong>）</p><h3 id="5-1-2-I-O控制器"><strong>5.1_2 I-O控制器</strong></h3><p>机械部件：鼠标等电子部件：I/O控制器，设备控制器</p><p>功能：<br>1、接受和识别CPU发出的命令控制寄存器：存放命令和参数</p><p>2、向CPU报告设备的状态状态寄存器：记录I/O设备的当前状态</p><p>3、数据交换数据寄存器：暂存CPU发出/设备发出的数据</p><p>4、地址识别内存映射IO：给每个寄存器一个特定的“地址”</p><p><strong>I/O控制器组成结构</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617154518.png?e=1750327208&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:bE4MP3TUKrGaN9hW9W2PiyB7d58=" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>一个I/O控制器可能对应多个设备</p></li><li class="lvl-2"><p>因为存在多个寄存器，对寄存器的编制方式：</p><ul class="lvl-2"><li class="lvl-6">寄存器独立编址（与内存独立编址）–需要专门的指令来实现编址（地址和编号）</li><li class="lvl-6">内存映射I/O（跟内存统一编址） – 对内存进行操作的指令进行操作</li></ul></li></ul><h3 id="5-1-3-I-O控制方式"><strong>5.1_3 I-O控制方式</strong></h3><p>1、程序直接控制方式<br><strong>轮询</strong>：完成一次读/写操作的流程<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617155545.png?e=1750327233&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:rxHeNmrdEIXABBuAbSl6WsNOfxI=" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>CPU干预频繁，轮询检查<strong>状态寄存器</strong>中状态-- I/O设备是否准备好</p></li><li class="lvl-2"><p>每次<strong>读写一个字</strong></p></li><li class="lvl-2"><p>实现简单</p></li><li class="lvl-2"><p>会使CPU忙等</p></li></ul><p>2、中断驱动方式<br><strong>让cpu发出io指令后做其它的事情</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617155800.png?e=1750327262&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:fc53yRTfd5mFC6MCbHTFmonFzVU=" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>CPU会在每个指令周期末尾检查中断</p></li><li class="lvl-2"><p>大量中断会使cpu效率低</p></li><li class="lvl-2"><p>每次读写一个字</p></li><li class="lvl-2"><p>cpu和IO可并行工作</p></li></ul><p>3、DMA方式（<strong>直接存储器存取</strong>）数据单位：连续的多个块（字 $\rightarrow$ 块）<strong>块必须是连续的，读区的是连续的多个块，读入内存后在内存中也必须是连续的</strong></p><ul class="lvl-0"><li class="lvl-2"><p>直接从设备到内存（不经过CPU）</p></li><li class="lvl-2"><p>减少了cpu干预（只有传送开始和结束时）<br><strong>操作流程</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617160000.png?e=1750327283&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:QXxDIzEpPi7hcXXkOaMme_k767A=" alt=""></p></li><li class="lvl-2"><p><strong>DMA控制器</strong></p><ul class="lvl-2"><li class="lvl-6">DR：数据寄存器</li><li class="lvl-6">MAR：内存地址寄存器</li><li class="lvl-6">DC：剩余读写字节数</li><li class="lvl-6">CR：命令/状态寄存器<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617160218.png?e=1750327304&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:JqXyowDG9C-tisOIV5BIPOUdWHY=" alt=""><br>DMA读取数据是<strong>一个字一个字</strong>的读入，先存放DR中，再放到内存中<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617160429.png?e=1750327328&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:Um5m19miBPlswZluHgUT2O5Zndw=" alt=""></li></ul></li></ul><p>4、通道控制方式弱鸡版CPU</p><ul class="lvl-0"><li class="lvl-2"><p>通道程序：任务清单，相当于 <strong>CPU给你一堆任务清单放到内存中</strong>，你照着任务清单去完成</p></li><li class="lvl-2"><p>CPU发送命令给通道，然后让通道处理IO操作就行了，处理完了，向cpu发送中断信号<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617160603.png?e=1750327346&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:VNlAniBzPA-D8HuII1RNSQgRRwo=" alt=""></p></li></ul><p><strong>操作流程</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617160747.png?e=1750327363&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:wuLVzTfns4yu5I4GCQXb6WZykqA=" alt=""></p><h3 id="5-1-4-I-O软件层次结构"><strong>5.1_4 I-O软件层次结构</strong></h3><blockquote><p><strong>请求实现的顺序和功能</strong></p></blockquote><p>1、用户层软件实现与<strong>用户交互的接口，向上提供方便易用的库函数</strong><br>2、设备独立性软件（设备无关性软件）向上层提供<strong>统一的调用接口</strong>（read/write）设备的保护（相当于对文件的访问权限）差错处理（对设备产生错误进行处理）设备的分配与回收（资源分配）数据缓冲区管理建立逻辑设备名到物理设备名的映射关系，根据设备类型选择调用相应的驱动程序（逻辑设备表 LUT，不同的设备可能驱动程序不同）<br>3、设备驱动程序（比如打印机驱动）设置设备寄存器、检查设备状态<br>4、中断处理程序进行中断处理<br>5、硬件执行IO操作，有机械部件、电子部件组成<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617161659.png?e=1750327397&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:9mcQ2cd8CZP3b-qrO_FD9ZW480E=" alt=""></p><h3 id="新知识点：输入输出应用程序接口">新知识点：输入输出应用程序接口</h3><h3 id="5-2-1-I-O核心子系统"><strong>5.2_1 I-O核心子系统</strong></h3><p>1、用户层软件假脱机系统（SPOOLing 技术）<br>2、设备独立性软件（设备无关性软件）<br><strong>IO调度、设备保护</strong>、设备分配与回收、缓冲区管理<br>3、设备驱动程序（比如打印机驱动）<br>4、中断处理程序<br>5、硬件</p><h3 id="5-1-6-假脱机技术"><strong>5.1_6 假脱机技术</strong></h3><p>1、什么是脱机技术，脱机技术可以解决什么问题<br><strong>脱离主机的控制</strong>进行输入/输出控制（不需要主机，CPU的干预）</p><p>假脱机技术 – SPPOLing系统：必须要有多道程序并发进行<br>2、假脱机技术的实现原理</p><blockquote><p>我认为是先存进去然后逐个处理<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617162528.png?e=1750327451&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:MEmREWXbg6lW_qmj3ESTM2zZqbs=" alt=""></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>输入井和输出井</p></li><li class="lvl-2"><p>输入进程和输出进程</p></li><li class="lvl-2"><p>输入缓冲区和输出缓冲区</p></li></ul><p>3、共享打印机的原理分析（SPPOLing）<img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617162728.png?e=1750327479&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:7Bbj5G9uKt_1eVb7sJPZiZKSJlQ=" alt=""><br>先把项目抓住然后慢慢处理 ：）</p><h3 id="5-1-7-设备的分配与回收"><strong>5.1_7 设备的分配与回收</strong></h3><p>1、设备分配时应考虑的因素</p><ul class="lvl-0"><li class="lvl-2"><p>设备的固有属性：独占设备、共享设备、虚拟设备</p></li><li class="lvl-2"><p>设备分配算法：</p></li><li class="lvl-2"><p>设备分配中的安全：为进程分配一个设备后就将进程阻塞，本次IO完成后才将进程唤醒</p></li></ul><p>2、静态分配与动态分配</p><ul class="lvl-0"><li class="lvl-2"><p>静态分配：进程运行前为其分配全部所需资源、运行结束后归还资源（破坏了“请求和保持”条件）</p></li><li class="lvl-2"><p>动态分配：运行中动态分配</p></li></ul><p>3、设备分配管理中的数据结构<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617163523.png?e=1750327522&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:7cpYwYGhIPLHSaZSTr8sCPNoG6w=" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>系统设备表SDT：记录全部设备的情况（用表目记录每一个设备信息）<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617163937.png?e=1750327548&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:P6pytluuMlaZmeSlnXP2zyJaA1w=" alt=""></p></li><li class="lvl-2"><p>设备控制表DCT：记录设备使用情况<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617163630.png?e=1750327562&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:Amf1WClgXpMwnhSJPo-gtxG8JO0=" alt=""></p></li><li class="lvl-2"><p>控制器控制表COCT<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617163716.png?e=1750327584&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:t89mM3eAYjrcUfVh9WAwq6yFQig=" alt=""></p></li><li class="lvl-2"><p>通道控制表CHCT<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617163817.png?e=1750327605&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:fF7Ew3t0jlJDsXjUpmeDSEXKTKY=" alt=""><br>4、设备分配的步骤根据进程请求的物理设备名（SDT）——&gt;设备控制表（DCT）——&gt;控制器控制表（COCT）——&gt;通道（CHCT）<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617164106.png?e=1750327626&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:sOyUbDJLQZM9kUVMQ8EY4gh7q-o=" alt=""><br>5、设备分配步骤的改进方法<br><strong>建立逻辑设备名和设备的映射</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617164226.png?e=1750327646&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:M7406AQJmu19sroiebtG6z54mr0=" alt=""></p></li></ul><h3 id="5-1-8-缓冲区管理"><strong>5.1_8 缓冲区管理</strong></h3><p>1、什么是缓冲区？有什么作用？缓冲区是一个存储区域<br><strong>作用</strong></p><ul class="lvl-0"><li class="lvl-2"><p>缓和CPU与IO设备之间速度不匹配的矛盾</p></li><li class="lvl-2"><p>减少对CPU的中断频率</p></li><li class="lvl-2"><p>解决数据粒度不匹配的问题</p></li><li class="lvl-2"><p>提高CPU与IO设备之间的并行性</p></li></ul><p>缓冲区管理策略<br>2、单缓冲在内存中分配一块缓冲区<br><strong>操作流程</strong><br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617164919.png?e=1750327676&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:iTqoEK52Ll4b8Y34UYBweW6rSAQ=" alt=""></p><p><strong>处理一块时间=max（C,T)+M</strong><br>![[Pasted image 20250617164845.png]]</p><p>3、双缓冲在内存中分配两块缓冲区-- 两个缓冲区<br><strong>每处理一块数据：max(T,C+M)</strong></p><p>4、循环缓冲<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617165404.png?e=1750327696&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:7vRpP06fLaL2ijYS7DMssAOULw4=" alt=""></p><p>5、缓冲池由系统中共用的缓冲区组成。这些缓冲区可以分为：空缓冲队列、装满输入数据的缓冲队列、装满输出数据的缓冲队列<br><img src="http://sxokte9zk.hn-bkt.clouddn.com/Pasted%20image%2020250617165534.png?e=1750327769&amp;token=Mu8BzImNH9AlNsHCEa6SDYPomkQvzamh2L7t3D-1:npF28LavlglkGp_4JyNhrWoP7qw=" alt=""></p><h2 id="磁盘存储">磁盘存储</h2><h3 id="5-3-1-磁盘的结构"><strong>5.3_1 磁盘的结构</strong></h3><ul class="lvl-0"><li class="lvl-2"><p>磁盘、磁道、扇区的概念</p></li><li class="lvl-2"><p>如何在磁盘中读写数据</p></li><li class="lvl-2"><p>盘面柱面的概念</p></li><li class="lvl-2"><p>磁盘的物理地址</p></li><li class="lvl-2"><p>磁盘的分类</p></li></ul><h3 id="5-2-2-磁盘调度算法"><strong>5.2_2 磁盘调度算法</strong></h3><p>​1、一次磁盘读/写操作需要的时间</p><ul class="lvl-0"><li class="lvl-2"><p>寻找时间Ts=s+m*n</p></li><li class="lvl-2"><p>延迟时间Tr=1/(2r)</p></li><li class="lvl-2"><p>传输时间Tt=b/(rN)</p></li></ul><p>2、磁盘调度算法</p><ul class="lvl-0"><li class="lvl-2"><p>先来先服务（FCFS）</p></li><li class="lvl-2"><p>最短寻找时间优先（SSTF）​优先处理最近的磁道，可能会产生饥饿现象</p></li><li class="lvl-2"><p>扫描算法（SCAN）​只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动​LOOK，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</p></li><li class="lvl-2"><p>循环扫描算法（C-SCAN）返回时直接快速移动至起始端而不处理任何请求​C-LOOK，如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</p></li></ul><h3 id="5-2-3-减小磁盘延迟时间的方法"><strong>5.2_3 减小磁盘延迟时间的方法</strong></h3><p>1、寻找时间（寻道时间）：启动磁臂、移动磁头所花的时间</p><p>2、延迟时间：将目标扇区转到磁头下面所化的时间</p><ul class="lvl-0"><li class="lvl-2"><p>磁头读取一块内容后，需要一小段的时间处理</p></li><li class="lvl-2"><p>采用交替编号策略</p></li><li class="lvl-2"><p>柱面号在盘面号之前，可以减少磁头移动消耗的时间</p></li><li class="lvl-2"><p>错位命名</p></li></ul><p>3、传输时间：读/写 数据花费的时间</p><h3 id="5-2-4-磁盘的管理"><strong>5.2_4 磁盘的管理</strong></h3><p>1、磁盘初始化低级格式化/物理分区<br>2、引导块<br>ROM不可修改，ROM中只存放很小的“自举装入程序”<br>3、坏块的管理在FAT表上标明（坏块对操作系统不透明）</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之美</title>
      <link href="/2025/06/17/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
      <url>/2025/06/17/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>选自 <a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzkwNjUyMzExNg==&amp;action=getalbum&amp;album_id=3022937900243697671&amp;scene=126&amp;uin=&amp;key=&amp;devicetype=iMac+MacBookPro17%2C1+OSX+OSX+14.7.1+build(23H222)&amp;version=13080a10&amp;lang=zh_CN&amp;nettype=WIFI&amp;ascene=78&amp;fontScale=100">微信</a> 的 算法之美.</p></blockquote><ul class="lvl-0"><li class="lvl-2">不定期更新（主要这个微信推文的算法知识都是偏数学的硬知识）</li></ul><span id="more"></span><h1>数论及其算法</h1><h2 id="素数的判定">素数的判定</h2><ul class="lvl-0"><li class="lvl-2"><p>基础的素数判定</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= a; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>埃式筛</p><blockquote><p>如果这个数字是素数的话，那将这个<strong>数字的倍数</strong> 都不可能是素数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> prime[N],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> Num[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erathic</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[i])&#123;prime[cnt++] = i;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt;= n; j += i)&#123;num[j] = <span class="literal">true</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>欧拉筛</p><blockquote><p>每个 合数（非素数） 只被自己的 <strong>最小质因子</strong> 筛掉</p></blockquote></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> prime[N],cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> num[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">euler</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">menset</span>(num,<span class="literal">false</span>,<span class="built_in">sizeof</span>(num))</span><br><span class="line">num[<span class="number">0</span>] = num[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!num[i])&#123; prime[cnt++] = i; &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt &amp;&amp; prime[j] * i &lt;= n; j ++)&#123;</span><br><span class="line">num[prime[j] * i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 不再继续，因为 i * prime[j + 1] 被设置的话，就不满足 每个合数 被 最小质因子 筛掉 这个条件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="欧几里得算法">欧几里得算法</h2><blockquote><p>最大公约数的重要性质：</p><p>a, b 的最大公约数，相当于 <code>a * x</code> 和 <code>b * y</code>，随意整数x, y,使得 <code>a * x</code> 和 <code>b * y</code> 的差值最小</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>基本GCD</p><blockquote><p>算法 核心：<code>gcd(a, b) = gcd(b, a % b), gcd(n, 0) = n</code></p><p>正确性核心：<code>gcd(a, b) = gcd(a, a - b), a % b = a - (a / b)*b</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>扩展 欧几里得算法</p><blockquote><p>基本问题：<code>a * x + b * y = gcd(a,b)</code> 求 x, y</p></blockquote><ul class="lvl-2"><li class="lvl-4"><p>a mod b →(a - (a / b) * b)<img src="/Users/liuyongjie/Documents/heox1/blog1.0/source/img/gcd1.png" alt="gcd1"></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> t = <span class="built_in">gcd</span>(b, a % b, x,y);</span><br><span class="line"><span class="type">int</span> t1 = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t - (a / b) % y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-2"><li class="lvl-4"><p>贝祖定理(裴蜀定理)</p><blockquote><p>基本形式：<code>a * x + b * y = gcd(a, b)</code>，x, y 为随机数</p></blockquote><ul class="lvl-4"><li class="lvl-6"><p>如果 <code>a * x + b * y = 1</code> 意味着 a，b互质。</p></li><li class="lvl-6"><p><code>a * x + b * y = k * gcd(a, b)</code></p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于YOLO的神经网络剪枝</title>
      <link href="/2025/06/14/YOLO/"/>
      <url>/2025/06/14/YOLO/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>基于YOLO的图像识别训练（英文手写体 + 生活中常见的事物（猫猫狗狗））</p></blockquote><span id="more"></span><h1>Abstract</h1><p>本项目主要是针对于 YOLO v11的网络结构进行优化，来实现体积压缩和提高模型速度</p><blockquote class="alert alert-note"><p>以下是 YOLO v11的模型结构图</p></blockquote><p><img src="https://dns.whalefall.fun/yolov11.png" alt=""></p><h1>数据清洗</h1><blockquote class="alert alert-note"><p>由于在网络上没有相关手写体的YOLO数据集，所以我们要通过别人其他模型的数据集来自己构建一个与YOLO模型适配的数据集</p></blockquote><p>首先我们需要关于手写体的基本数据集</p><blockquote class="alert alert-warning"><p>首先这个数据集是缺少了YOLO所需要的坐标和类别等要求的，所以我们需要自己用PYTHON自动化来实现将其转换为YOLO所需要的格式</p></blockquote><p><img src="https://dns.whalefall.fun/YOLO1.png" alt=""></p><p>这个是<strong>满足YOLO的框的坐标格式</strong><br>1 表示类别，后面表示中心坐标和长宽</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 0.500000 0.500000 1.000000 1.000000</span><br></pre></td></tr></table></figure><p>以下附有代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_yolo_txt</span>(<span class="params">image_path, class_id, output_dir, class_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    为一张图片生成 YOLO 格式的 txt 文件，并复制图片和 txt 到目标文件夹的 images 和 labels 子文件夹</span></span><br><span class="line"><span class="string">    image_path: 源图片路径</span></span><br><span class="line"><span class="string">    class_id: 类别 ID（从文件夹名称最后两个数字提取）</span></span><br><span class="line"><span class="string">    output_dir: 目标文件夹路径</span></span><br><span class="line"><span class="string">    class_name: 类别的文件夹名称（用于文件名加前缀）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 构造 txt 文件内容</span></span><br><span class="line">        x_center, y_center, width, height = <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">1.0</span></span><br><span class="line">        txt_content = <span class="string">f&quot;<span class="subst">&#123;class_id&#125;</span> <span class="subst">&#123;x_center:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;y_center:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;width:<span class="number">.6</span>f&#125;</span> <span class="subst">&#123;height:<span class="number">.6</span>f&#125;</span>\n&quot;</span></span><br><span class="line">        </span><br><span class="line">        base_name = <span class="string">f&quot;<span class="subst">&#123;class_name&#125;</span>_<span class="subst">&#123;image_path.name&#125;</span>&quot;</span></span><br><span class="line">        target_img_path = output_dir / <span class="string">&quot;images&quot;</span> / base_name</span><br><span class="line">        target_txt_path = output_dir / <span class="string">&quot;labels&quot;</span> / Path(base_name).with_suffix(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;目标图片路径：<span class="subst">&#123;target_img_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;目标 txt 路径：<span class="subst">&#123;target_txt_path&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建目标目录</span></span><br><span class="line">        target_img_path.parent.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        target_txt_path.parent.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 写入 txt 文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(target_txt_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(txt_content)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 复制图片</span></span><br><span class="line">        shutil.copy2(image_path, target_img_path)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功生成并复制：<span class="subst">&#123;target_img_path&#125;</span> 和 <span class="subst">&#123;target_txt_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理 <span class="subst">&#123;image_path&#125;</span> 时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_folder</span>(<span class="params">root_dir, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    遍历大文件夹，生成 YOLO txt 文件并复制到目标文件夹的 images 和 labels 子文件夹</span></span><br><span class="line"><span class="string">    root_dir: 源大文件夹路径</span></span><br><span class="line"><span class="string">    output_dir: 目标文件夹路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    root_path = Path(root_dir)</span><br><span class="line">    output_path = Path(output_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查源文件夹是否存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root_path.exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：源文件夹 <span class="subst">&#123;root_path&#125;</span> 不存在！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;源文件夹绝对路径：<span class="subst">&#123;root_path.resolve()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建目标文件夹及其子文件夹</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注释清空逻辑以保留现有文件，方便调试</span></span><br><span class="line">        <span class="comment"># if output_path.exists():</span></span><br><span class="line">        <span class="comment">#     shutil.rmtree(output_path)</span></span><br><span class="line">        output_path.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        (output_path / <span class="string">&quot;images&quot;</span>).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        (output_path / <span class="string">&quot;labels&quot;</span>).mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> PermissionError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误：无法创建目标文件夹 <span class="subst">&#123;output_path&#125;</span> 或其子文件夹，请检查权限！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历大文件夹中的小文件夹</span></span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> root_path.iterdir():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> folder.is_dir():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        folder_name = folder.name</span><br><span class="line">        <span class="comment"># 提取文件夹名称最后两个数字作为 class_id</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            class_id = <span class="built_in">int</span>(folder_name[-<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误：无法从文件夹 <span class="subst">&#123;folder_name&#125;</span> 提取最后两个数字作为 class_id，跳过！&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;开始处理文件夹：<span class="subst">&#123;folder_name&#125;</span> (class_id: <span class="subst">&#123;class_id&#125;</span>)&quot;</span>)</span><br><span class="line">        images = <span class="built_in">list</span>(folder.glob(<span class="string">&quot;*.[pP][nN][gG]&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件夹 <span class="subst">&#123;folder_name&#125;</span> 中的图片：<span class="subst">&#123;images&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> image_path <span class="keyword">in</span> images:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;处理图片：<span class="subst">&#123;image_path&#125;</span>&quot;</span>)</span><br><span class="line">            generate_yolo_txt(image_path, class_id, output_path, folder_name)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 打印处理的文件夹和对应的 class_id</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n处理的文件夹和 class_id：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> folder <span class="keyword">in</span> root_path.iterdir():</span><br><span class="line">        <span class="keyword">if</span> folder.is_dir():</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                class_id = <span class="built_in">int</span>(folder.name[-<span class="number">2</span>:])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;folder.name&#125;</span>: <span class="subst">&#123;class_id&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;folder.name&#125;</span>: 无法提取 class_id&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    dataset_dir = <span class="string">&quot;./English/Img/BadImag/Bmp&quot;</span>  <span class="comment">#目标文件夹</span></span><br><span class="line">    output_dir = <span class="string">&quot;output_dataset&quot;</span>  <span class="comment"># 目标生成文件夹</span></span><br><span class="line">    process_folder(dataset_dir, output_dir)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>进行 适配YOLO模型训练的数据集划分</h1><blockquote class="alert alert-note"><p>训练集划分包括 模型训练部分，模型验证部分，如下图所示</p></blockquote><p><img src="https://dns.whalefall.fun/dataset1.png" alt="数据集划分"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始数据路径</span></span><br><span class="line">base_dir = <span class="string">&#x27;./&#x27;</span></span><br><span class="line">dataset_dir = os.path.join(base_dir, <span class="string">&#x27;output_dataset&#x27;</span>)</span><br><span class="line">images_dir = os.path.join(dataset_dir, <span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">labels_dir = os.path.join(dataset_dir, <span class="string">&#x27;labels&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新的输出路径（不在 DATA1.0 下）</span></span><br><span class="line">output_dir = os.path.join(base_dir, <span class="string">&#x27;dataset&#x27;</span>)</span><br><span class="line">train_images_dir = os.path.join(output_dir, <span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">val_images_dir = os.path.join(output_dir, <span class="string">&#x27;images&#x27;</span>, <span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">train_labels_dir = os.path.join(output_dir, <span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">val_labels_dir = os.path.join(output_dir, <span class="string">&#x27;labels&#x27;</span>, <span class="string">&#x27;val&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新目录</span></span><br><span class="line">os.makedirs(train_images_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(val_images_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(train_labels_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">os.makedirs(val_labels_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 收集所有图像文件</span></span><br><span class="line">image_files = [</span><br><span class="line">    f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(images_dir)</span><br><span class="line">    <span class="keyword">if</span> f.lower().endswith((<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>))</span><br><span class="line">    <span class="keyword">and</span> os.path.isfile(os.path.join(images_dir, f))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打乱顺序</span></span><br><span class="line">random.shuffle(image_files)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分比例</span></span><br><span class="line">split_ratio = <span class="number">0.8</span></span><br><span class="line">split_index = <span class="built_in">int</span>(<span class="built_in">len</span>(image_files) * split_ratio)</span><br><span class="line">train_images = image_files[:split_index]</span><br><span class="line">val_images = image_files[split_index:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制训练集</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> train_images:</span><br><span class="line">    base_name, ext = os.path.splitext(img)</span><br><span class="line">    label = base_name + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="comment"># 图像复制</span></span><br><span class="line">    shutil.copy(os.path.join(images_dir, img), os.path.join(train_images_dir, img))</span><br><span class="line">    <span class="comment"># 标签复制</span></span><br><span class="line">    label_src = os.path.join(labels_dir, label)</span><br><span class="line">    label_dst = os.path.join(train_labels_dir, label)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(label_src):</span><br><span class="line">        shutil.copy(label_src, label_dst)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[警告] 缺失标签文件: <span class="subst">&#123;label_src&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制验证集</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> val_images:</span><br><span class="line">    base_name, ext = os.path.splitext(img)</span><br><span class="line">    label = base_name + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="comment"># 图像复制</span></span><br><span class="line">    shutil.copy(os.path.join(images_dir, img), os.path.join(val_images_dir, img))</span><br><span class="line">    <span class="comment"># 标签复制</span></span><br><span class="line">    label_src = os.path.join(labels_dir, label)</span><br><span class="line">    label_dst = os.path.join(val_labels_dir, label)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(label_src):</span><br><span class="line">        shutil.copy(label_src, label_dst)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[警告] 缺失标签文件: <span class="subst">&#123;label_src&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✅ 数据集划分完成，训练集：<span class="subst">&#123;<span class="built_in">len</span>(train_images)&#125;</span>，验证集：<span class="subst">&#123;<span class="built_in">len</span>(val_images)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✅ 输出路径：<span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><div class="warning"><p><strong>注意</strong><br>划分数据集进行训练的时候需要保证每一个类别都应该有 训练的数据 和 推理的数据，如果存在不同类别需要在这个代码上进行细微调整（数据集划分的时候进行图片选择的时候，我们可以基于每一种类别的图片进行划分）</p></div><p><img src="https://dns.whalefall.fun/dataset.png" alt=""></p><h1>模型训练</h1><p>进行完数据集划分，现在可以进行模型训练了。我是使用的 MAC，所以 device 是使用的 mps，如果是 windows的话，可以使用 GPU加速会快很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ultralytics <span class="keyword">import</span> YOLO</span><br><span class="line"></span><br><span class="line">model = YOLO(<span class="string">&#x27;yolo11n.pt&#x27;</span>)</span><br><span class="line">model.train(</span><br><span class="line">    data=<span class="string">&#x27;data.yaml&#x27;</span>,  <span class="comment"># Path to the data configuration file</span></span><br><span class="line">    epochs=<span class="number">5</span>,        <span class="comment"># Number of training epochs</span></span><br><span class="line">    imgsz=<span class="number">640</span>,         <span class="comment"># Image size for training</span></span><br><span class="line">    batch=<span class="number">2</span>,          <span class="comment"># Batch size</span></span><br><span class="line">    name=<span class="string">&#x27;yolov8_custom&#x27;</span>,  <span class="comment"># Name of the training run</span></span><br><span class="line">    device=<span class="string">&#x27;mps&#x27;</span>           <span class="comment"># Use GPU (0 for first GPU, &#x27;cpu&#x27; for CPU)</span></span><br><span class="line">)</span><br><span class="line">results = model.val()</span><br></pre></td></tr></table></figure><h1>模型剪枝</h1><p>参考相关文章 <a href="https://openaccess.thecvf.com/content_ICCV_2017/papers/Liu_Learning_Efficient_Convolutional_ICCV_2017_paper.pdf">Learning Efficient Convolutional Networks Through Network Slimming</a><br>进行完模型训练后。</p><blockquote class="alert alert-warning"><p>由于 我们想设计一个 便于在一些内存小的开发板上进行运行的模型，所以我们可以进行一些模型压缩，或者量化进行处理。这里我们采用的是模型剪枝操作。</p></blockquote><p>我们采用的是L1正则化剪枝来对YOLO的网络结构进行剪枝，这里我们可以简单的介绍一下什么是 L1正则化剪枝流程<img src="https://dns.whalefall.fun/pruning.png" alt=""><br>这是一个基本的流程，具体的操作都是可以基于 YOLO的网络结构训练代码进行修改的。接下来我们进行一个详细的介绍</p><blockquote class="alert alert-note"><p>这里的剪枝代码没有给出</p></blockquote><h2 id="通道权重压缩">通道权重压缩</h2><p><img src="https://dns.whalefall.fun/shizi.png" alt=""></p><blockquote class="alert alert-note"><p>归一化就相当于把所有值通过比值关系，全部压缩到 0～1之间</p></blockquote><p>这个是通道进行剪枝的计算公式来对L1层中的通道进行归一化处理，我们先进行 归一化处理，也可以称为<strong>约束训练</strong>,这是在训练过程中添加的部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对BN层进⾏L1正则化，约束训练时启⽤，正常训练时注释掉 </span></span><br><span class="line">l1_lambda = <span class="number">1e-2</span> * (<span class="number">1</span> - <span class="number">0.9</span> * epoch / <span class="variable language_">self</span>.epochs) </span><br><span class="line"><span class="keyword">for</span> k, m <span class="keyword">in</span> <span class="variable language_">self</span>.model.named_modules(): </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.BatchNorm2d):</span><br><span class="line">m.weight.grad.data.add_(l1_lambda * torch.sign(m.weight.data))      </span><br><span class="line">        m.bias.grad.data.add_(<span class="number">1e-2</span> * torch.sign(m.bias.data))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行完约束训练后，会生成一个训练的模型（.pt），然后我们再针对于这个 .pt 模型，进行模型剪枝，剪枝的操作相当于会删除网络结构中 权重小（影响因子小）的节点和边，从而实现<strong>稀少少量精度来实现压缩体积加快速度</strong>的效果。然后通过完剪枝的模型我们不能直接就进行图片推理，我们需要先进行<strong>回调训练</strong>，通过回调训练将模型的精度进行一下调整。就是将约束训练增加的代码给注释掉再进行训练就可以了。</p><p>这样剪枝的整个操作就实现完整了!</p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces</title>
      <link href="/2025/06/10/Codeforces/"/>
      <url>/2025/06/10/Codeforces/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>用于记录 CF比赛 补题</p></blockquote><span id="more"></span><div class="tips"><p><strong>提示</strong><br>这是一个提示</p></div><div class="warning"><p><strong>注意</strong><br>这是一个警告</p></div><div class="danger"><p><strong>警告</strong><br>这是一个危险信号</p></div><div class="success"><p><strong>成功</strong><br>这是一个成功信号</p></div><details open><summary><span class="pre-summary">&nbsp;</span><strong>点击折叠</strong></summary><p>这是被隐藏的内容</p></details><h1>DIV2(1030)</h1><h2 id="B"><a href="https://codeforces.com/contest/2118/problem/B">B</a></h2><div class="success"><p><strong>TipS</strong><br>纯属构造题，一开始思路没问题，但是就是 $操作步骤 \leq 2 * n$, 其实对于每一行操作都是固定的，前面翻转，后面翻转，总体翻转，因为每一行都需要整体翻转，所以是可以省去的。</p></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="number">2</span> * n - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客赛</title>
      <link href="/2025/06/10/%E7%89%9B%E5%AE%A2%E8%B5%9B/"/>
      <url>/2025/06/10/%E7%89%9B%E5%AE%A2%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>汇总牛客线上赛题目</p></blockquote><span id="more"></span><h1>牛客周赛Round-93</h1><h2 id="F">F</h2><blockquote><p>一个线性状态 DP</p></blockquote><p>这个题目的思路比较简单，但是其实实现是有一点考验码量的，那个奇偶性的判断。就是一个线性DP</p><blockquote class="alert alert-note"><p>这个位置与只与上一个位置有关系，所以自然可以想到动态规划，但是这个题目的码量有一点要求，整体思维难度不大。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">vector&lt;vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&gt; <span class="built_in">dp</span>(<span class="number">2</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n + <span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n + <span class="number">3</span>, <span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> t1 = n / <span class="number">2</span>, t2 = n / <span class="number">2</span> + <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t1; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[t1][i] == a[t2][i]) dp[<span class="number">0</span>][i][i]++;</span><br><span class="line"><span class="keyword">if</span>(a[t1][i] == a[t2][i + <span class="number">1</span>]) dp[<span class="number">0</span>][i][i + <span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d = <span class="number">1</span>; d &lt; n / <span class="number">2</span>; d++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">dp[d &amp; <span class="number">1</span>][i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp &amp;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[t1 - d][i] == a[t2 + d][j])&#123;</span><br><span class="line">dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i][j]+dp[d &amp; <span class="number">1</span>][i][j]) % mod;</span><br><span class="line">                        dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i + <span class="number">1</span>][j] +   dp[d &amp; <span class="number">1</span>][i][j])% mod;</span><br><span class="line">                        dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i][j - <span class="number">1</span>] + dp[d &amp; <span class="number">1</span>][i][j])% mod;</span><br><span class="line">                        dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i + <span class="number">1</span>][j - <span class="number">1</span>] + dp[d &amp; <span class="number">1</span>][i][j])% mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">ans = (ans + dp[(n + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span> &amp; <span class="number">1</span>][<span class="number">1</span>][i]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> t1 = (n / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t1; i++)&#123;</span><br><span class="line">dp[<span class="number">0</span>][i][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> d = <span class="number">1</span>; d &lt;= n / <span class="number">2</span>; d++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">dp[d &amp; <span class="number">1</span>][i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp &amp;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[t1-d][i] == a[t1 + d][j])&#123;</span><br><span class="line">dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i][j]+dp[d &amp; <span class="number">1</span>][i][j]) % mod;</span><br><span class="line">                        dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i + <span class="number">1</span>][j] +   dp[d &amp; <span class="number">1</span>][i][j])% mod;</span><br><span class="line">                        dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i][j - <span class="number">1</span>] + dp[d &amp; <span class="number">1</span>][i][j])% mod;</span><br><span class="line">                        dp[d &amp; <span class="number">1</span>][i][j] = (dp[(d - <span class="number">1</span>) &amp; <span class="number">1</span>][i + <span class="number">1</span>][j - <span class="number">1</span>] + dp[d &amp; <span class="number">1</span>][i][j])% mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">ans = (ans +  dp[(n + <span class="number">1</span>)/<span class="number">2</span> - <span class="number">1</span> &amp; <span class="number">1</span>][<span class="number">1</span>][i]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>牛客周赛Round-94</h1><blockquote><p>这一场我感觉偏推理场吧，主要被前面的题目唬到了，然后后面做起来有点害怕，看到了那个类似 成都赛场上面没做出来的一个签到题目，感觉心里很慌。</p></blockquote><h2 id="2024成都区域赛A-Arrow-a-Row"><a href="https://codeforces.com/gym/105486/problem/A">2024成都区域赛A-Arrow a Row</a></h2><blockquote><p>这个好像不是一个拓扑排序的题目，是一个<strong>构造题！</strong></p></blockquote><p>最讨厌看到的显然成立<br><img src="https://s3.bmp.ovh/imgs/2025/06/05/2c5d083b1ad86f3d.png" alt=""></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>&#123;</span><br><span class="line">string s;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> - 的位置要 小于倒数第三个位置 相近的 - 之间的距离必须大于 4</span></span><br><span class="line"><span class="comment">  存储每一对的位置 - 的左右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> ex = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">ex = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ex)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> d[<span class="number">4</span>] = &#123;<span class="number">0</span>, n - <span class="number">1</span>, n - <span class="number">2</span>, n - <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[d[i]] != <span class="string">&#x27;&gt;&#x27;</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; ans;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>( i = n - <span class="number">3</span>; i &gt; <span class="number">1</span>; i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;&gt;&#x27;</span>)&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, i + <span class="number">3</span>&#125;);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">&#x27;&gt;&#x27;</span>)&#123;</span><br><span class="line">ans.<span class="built_in">push_back</span>(&#123;j, i + <span class="number">3</span> - j + <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ans.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>[x, y] : ans)&#123;</span><br><span class="line">cout &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) <span class="built_in">slove</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-小苯的数字操作"><a href="https://ac.nowcoder.com/acm/contest/110696/E">E-小苯的数字操作</a></h2><blockquote class="alert alert-note"><p>知识点：对于一个数字的<strong>二进制形式</strong>，$\times$ 2 相当于在二进制后面新增0，$\div$ 2 相当于删除二进制的最后一位</p></blockquote><p><strong>有一个坑</strong>：如果当 n 为 1的时候，是不要进行特判里面的，因为如果为 1 的时候，他的2 的倍数一定是早就出现过的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="type">int</span> ans = k + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; n != <span class="number">1</span>)&#123;</span><br><span class="line">                ans += (k - i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans ++;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="F-小苯的小球分组"><a href="https://ac.nowcoder.com/acm/contest/110696/F">F-小苯的小球分组</a></h2><blockquote><p>有一个结论</p></blockquote><p><strong>结论</strong><br>定义小球集合$\Bbb S$的函数 $f(\Bbb S)$，表示将小球集合 $\Bbb S$ 分为若干组，满足以下<strong>所有条件</strong>的最少分组个数：</p><ul class="lvl-0"><li class="lvl-3"><p>每组最多有 2 个球</p></li><li class="lvl-3"><p>组内有 2 个球的组，这 2 个球的颜色不同。<br>**这个的最小分组个数为 ：$max(a_{max},(sum/2)_{向上取整}）$</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 牛客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obisidian to Typora</title>
      <link href="/2025/05/21/Obisidian%20to%20Typora/"/>
      <url>/2025/05/21/Obisidian%20to%20Typora/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>还是从 Obisidian 转 Typora了</p></blockquote><span id="more"></span><p>Typora 还是太轻量化了，除了文字过多有一点卡以外，其他还是太无敌了，主要是 Obisidian 太不方便了，他是需要将每一个文件当成一个仓库来使用，然后每一个仓库所对应的主题啊，什么都需要更改还是十分的不方便。以后会使用 Obisidian 来写长时间文章，使用 Typora 来编写一些即时的文章。</p><blockquote class="alert alert-note"><p>为了解决 TYPORA 使用卡顿的问题，我在网络上找了很多相关的资料，对于在 MAC 上的解决办法太少，所以我只能采用分文件的格式来写笔记了，以后会将算法的内容进行分块编写。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora to Obisidian</title>
      <link href="/2025/05/08/Typora-%E8%BD%AC-obisidian/"/>
      <url>/2025/05/08/Typora-%E8%BD%AC-obisidian/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>Typora 转 Obisidian 🎉</p></blockquote><span id="more"></span><p>由于 typora 当文字过多的时候会卡顿，非常影响效率，所以我转Obisidian了，其实 我的笔记软件是 从 Typora $\rightarrow$ notion $\rightarrow$ Obisidian $\rightarrow$ Typora $\rightarrow$ Obisidian了，但是现在终于感觉到了, Obisidian 是比较好用的。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法知识册</title>
      <link href="/2025/05/06/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/"/>
      <url>/2025/05/06/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>本文章是 基于 左神课程 + 牛客课程 进行算法系统式学习的知识汇总。</p></blockquote><span id="more"></span><h1>算法之旅</h1><h2 id="基础算法">基础算法</h2><h4 id="单调队列">单调队列</h4><blockquote class="alert alert-note"><p>这是一次尝试</p></blockquote><h4 id="单调栈">单调栈</h4><h4 id="逆序对">逆序对</h4><ol><li class="lvl-3"><p>树状数组</p></li></ol><blockquote><p>使用树状数组来求逆序队，主要要进行离散化，应为可以 a[i] 的值很大，但是 数组大小有限，不离散化的话，可能树状数组的 tree数组存不下。</p></blockquote><p>思路：从数组的右边开始便利，访问到当前元素的时候，检查树状数组中求和（比当前元素小的元素），因为是从右往左便利，如果有比当前元素小的，肯定在数组中是在当前元素的右边。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> i &amp; -i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= n)&#123;</span><br><span class="line">tree[i] += w;</span><br><span class="line">i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 - r</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(r &gt; <span class="number">0</span>)&#123;</span><br><span class="line">ans += tree[r];</span><br><span class="line">r-= <span class="built_in">lowbit</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)cin &gt;&gt; a[i];</span><br><span class="line"><span class="comment">// 离散化</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">b = a</span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) mp[b[i]] = i + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 求逆序队</span></span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="type">int</span> r = <span class="built_in">sum</span>(mp[a[i]] - <span class="number">1</span>);</span><br><span class="line">ans += r;</span><br><span class="line"><span class="built_in">add</span>(mp[a[i]], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="归并分治">归并分治</h4><blockquote><p>分治的含义是 整体的答案 $?=$ 左边的答案 + 右边的答案</p></blockquote><ol><li class="lvl-3"><p>归并排序</p></li></ol><blockquote><p>归并排序是一个稳定的排序</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>整体的有序 是 <strong>左边有序 + 右边有序 + 合并过程</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> i = l, j = mid + <span class="number">1</span>, t1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)&#123;</span><br><span class="line">help[t1++] = (a[i] &lt;= a[j]) ? a[i++] :a[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) help[t1++] = a[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt;= r) help[t1++] = a[j++];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = r; i &gt;= l; i--)&#123;</span><br><span class="line">a[i] = help[--t1];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">guibin</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">guibin</span>(l, mid);</span><br><span class="line"><span class="built_in">guibin</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="built_in">merge</span>(l, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分治题目：<br><a href="https://leetcode.com/problem-list/divide-and-conquer/">leetcode-分治</a></p><h4 id="随机快排">随机快排</h4><p>$$</p><p>$$</p><h4 id="离散化">离散化</h4><blockquote><p>如果数据规模大，但是数据量小的话，我们可以进行离散化处理。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>给每一个值一个编号</p></li><li class="lvl-2"><p>法一</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">b = a;</span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">size</span>(); i++)&#123;mp[b[i]] = i;&#125;</span><br></pre></td></tr></table></figure><h4 id="类并查集">类并查集</h4><blockquote><p>如果是分联通块进行计算，我们可以不使用并查集，使用一个简单的思路，给每一个联通块<strong>编号</strong>，从而来考虑每一个联通块之间的关系。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><a href="https://codeforces.com/problemset/problem/2060/E">E. Graph Composition(div3)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __()&#123;</span><br><span class="line"><span class="type">int</span> n, m1, m2;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m1 &gt;&gt; m2;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a1</span>(n + <span class="number">1</span>);</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a2</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m1; i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">a1[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">a1[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m2; i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">a2[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">a2[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进行编号</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">col1</span><span class="params">(n + <span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">col2</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> dfs2 = [&amp;](<span class="keyword">auto</span> f,<span class="type">int</span> u, <span class="type">int</span> k) -&gt; <span class="type">void</span>&#123;</span><br><span class="line">col2[u] = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : a2[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(col2[x] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">f</span>(f,x,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> dfs1 = [&amp;](<span class="keyword">auto</span> f, <span class="type">int</span> u, <span class="type">int</span> k) -&gt; <span class="type">int</span>&#123;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">col1[u] = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : a1[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(col1[x] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(col2[x] != k) cnt++;</span><br><span class="line"><span class="keyword">else</span> cnt += <span class="built_in">f</span>(f,x,k);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(col2[i] == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(dfs2,i,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(col1[i] == <span class="number">0</span>)&#123;</span><br><span class="line">ans += <span class="built_in">dfs1</span>(dfs1,i,col2[i]);</span><br><span class="line"><span class="keyword">if</span>(col2[i] &lt; i) ans ++; <span class="comment">// 在前面有代表节点的时候便已经访问过这个节点，但是在F图中这个 i 节点并没有被 初始化，说明前面的代表节点和这个节点之间应该要增加一条边</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> _;</span><br><span class="line">cin &gt;&gt; _;</span><br><span class="line"><span class="keyword">while</span>(_--) __();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="快速幂">快速幂</h4><h6 id="无-mod">无 mod</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fpw</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) res *= a;</span><br><span class="line">a *= a;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="有mod">有mod</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">fpw</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>)&#123;</span><br><span class="line">res = res * a % mod;</span><br><span class="line">&#125;</span><br><span class="line">a = a * a % mod;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="乘法逆元">乘法逆元</h4><h6 id="线性">线性</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">  inv[i] = (<span class="type">long</span> <span class="type">long</span>)(p - p / i) * inv[p % i] % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="扩展欧几里得">扩展欧几里得</h6><h6 id="费马小">费马小</h6><p>$$<br>ax \equiv 1(mod ; b) \<br>x = a^{b - 2}(mod ; b)<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">fpw</span>(a, b<span class="number">-2</span>,b)</span><br></pre></td></tr></table></figure><h2 id="数据结构">数据结构</h2><h4 id="折半搜索">折半搜索</h4><p><a href="https://oi-wiki.org/search/bidirectional/">OI WIKI - Meet in the middle</a></p><h4 id="并查集">并查集</h4><h6 id="基础并查集">基础并查集</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> father[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123; <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) father[i] = i; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x != father[x])&#123;</span><br><span class="line">father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">un</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx != fy)&#123;</span><br><span class="line">father[fx] = fy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="带权并查集">带权并查集</h6><blockquote><p>个人感觉带权并查集有点类似于 树形DP，后续补充</p></blockquote><p>‘hello’</p><h4 id="前缀和-差分">前缀和 + 差分</h4><h6 id="前缀和">前缀和</h6><p>######## 一维</p><p>$$<br>sum[i] = sum[i - 1] + a[i]<br>$$</p><p>######## 二维</p><p>$$<br>sum[i][j] = a[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]<br>$$</p><p>######## 树上前缀和</p><ul class="lvl-0"><li class="lvl-2"><p>点权</p></li></ul><p>$$<br>x\rightarrow y 的路径 = sum_x + sum_y - sum_{lca} - sum_{f_{alca}}<br>$$</p><ul class="lvl-0"><li class="lvl-2"><p>边权</p></li></ul><p>$$<br>x \rightarrow y 的路径 = sum_x + sum_y - 2 * sum_{lca}<br>$$</p><h6 id="差分">差分</h6><blockquote><p>用于快速解决区间修改问题</p></blockquote><p>######## 一维</p><p>$$<br>b_i = a_i - a_{i - 1}<br>$$</p><p>如果存在 [l, r] 区间内的值进行范围修改,在差分数组上面 $b_l + d,b_{r + 1} - d$</p><p>######## 二维</p><p>$$<br>diff[i][j] = a[i][j] - a[i - 1][j] - a[i][j - 1] + a[i - 1][j - 1]<br>$$</p><p>$$<br>a[i][j] = \sum_{t1 = 1}^{i}\sum_{t2 = 1}^{j} diff[t1][t2]<br>$$</p><p>######## 树上差分</p><ul class="lvl-0"><li class="lvl-2"><p>点差分</p></li></ul><blockquote><p>如查询一棵树上 节点被访问的次数</p></blockquote><p>Ex:  s 到 t 路径节点的访问修改<br>$$<br>d_s = d_s + 1 \<br>d_{lca} = d_{lca} - 1\<br>d_t = d_t + 1\<br>d_{f(lca)} = d_{f(lca)} - 1<br>$$<br>当前节点的权重,由于当前节点的权重与子节点有关，便可以很好的解释 上面这个差分访问修改<br>$$<br>a[i] = \sum^{i的子节点}diff[t]<br>$$</p><ul class="lvl-0"><li class="lvl-2"><p>边差分</p></li></ul><p>Ex:  s 到 t 路径的边的访问修改<br>$$<br>d_s = d_s + 1\<br>d_t = d_t + 1\<br>d_{lca} = d_{lca} - 1<br>$$<br>当前节点的权重,由于当前节点的权重与子节点有关，便可以很好的解释 上面这个差分访问修改<br>$$<br>a[i] = \sum^{i的子节点}diff[t]<br>$$</p><h4 id="线段树">线段树</h4><h6 id="基础线段树">基础线段树</h6><blockquote><p>懒更新的意义是，如果这个大区间进行了修改，当访问到这个大区间的子区间时我们再去下发大区间的修改信息。</p></blockquote><p>######## 区间查询，区间变化，区间重置</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">int</span> ad[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> change[<span class="number">4</span> *N];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">4</span> * N];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  区间查询，区间变化，区间重置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">   sum[i] = a[r];</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mod = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l, mod, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mod + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[i] = sum[i &lt;&lt; <span class="number">1</span>] + sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">ad[i] = <span class="number">0</span>;</span><br><span class="line">change[i] = <span class="number">0</span>;</span><br><span class="line">vis[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> ln, <span class="type">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i])&#123;</span><br><span class="line">  sum[i &lt;&lt; <span class="number">1</span>] = change[i] * ln;</span><br><span class="line">  change[i &lt;&lt; <span class="number">1</span>] = change[i];</span><br><span class="line">  vis[i &lt;&lt; <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = change[i] * rn; </span><br><span class="line">  change[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = change[i];</span><br><span class="line">  vis[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  vis[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ad[i] != <span class="number">0</span>)&#123;</span><br><span class="line">sum[i &lt;&lt; <span class="number">1</span>] += (ln * ad[i]);</span><br><span class="line">ad[i &lt;&lt; <span class="number">1</span>] += ad[i];</span><br><span class="line">sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += (rn * ad[i]);</span><br><span class="line">ad[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += ad[i];</span><br><span class="line">ad[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> wov, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= wol &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line">sum[i] += (r - l + <span class="number">1</span>) * wov;</span><br><span class="line">ad[i] += wov;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  l -&gt; mid mid + 1-&gt; r</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">down</span>(i, (mid - l + <span class="number">1</span>), (r - mid));</span><br><span class="line"><span class="keyword">if</span>(wol &lt;= mid)&#123;</span><br><span class="line"><span class="built_in">add</span>(wol, wor, wov, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(wor &gt;= mid + <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(wol, wor, wov, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sum[i] = sum[i &lt;&lt; <span class="number">1</span>] + sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cha</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> wov, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= wol &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line">sum[i] = (r - l + <span class="number">1</span>) * wov;</span><br><span class="line">    change[i] = wov;</span><br><span class="line">    vis[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">down</span>(i, (mid - l + <span class="number">1</span>), (r - mid));</span><br><span class="line"><span class="keyword">if</span>(wol &lt;= mid)&#123;</span><br><span class="line"><span class="built_in">cha</span>(wol, wor, wov, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(wor &gt;= mid + <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cha</span>(wol, wor, wov, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sum[i] = sum[i &lt;&lt; <span class="number">1</span>] + sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(wol &lt;= l &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">down</span>(i, (mid - l + <span class="number">1</span>), (r - mid));</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(wol &lt;= mid)&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(wol, wor, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(wor &gt;= mid + <span class="number">1</span>)&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(wol, wor, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1 1 1 1 6</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">       <span class="type">int</span> n;</span><br><span class="line">       cin &gt;&gt; n;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">       <span class="built_in">build</span>(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> q1,q2;</span><br><span class="line">       cin &gt;&gt; q1;</span><br><span class="line">       <span class="keyword">while</span>(q1--)&#123;</span><br><span class="line">       <span class="type">int</span> t1, t2, t3;</span><br><span class="line">       cin &gt;&gt; t1 &gt;&gt; t2 &gt;&gt; t3;</span><br><span class="line">       <span class="built_in">add</span>(t1, t2, t3,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> chl, chr, chv;</span><br><span class="line">       cin &gt;&gt; chl &gt;&gt; chr &gt;&gt; chv;</span><br><span class="line">       <span class="built_in">cha</span>(chl, chr, chv, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">       cin &gt;&gt; q2;</span><br><span class="line">       <span class="keyword">while</span>(q2--)&#123;</span><br><span class="line">       <span class="type">int</span> l,r;</span><br><span class="line">       cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">       cout &lt;&lt; <span class="built_in">query</span>(l , r, <span class="number">1</span>, n, <span class="number">1</span>) &lt;&lt; endl; </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>######## 区间重置 + 范围查询</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  范围重置 + 范围查询（线段树）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Max[<span class="number">4</span> * N]; <span class="comment">// 需要 4 * N</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="comment">// 懒更新 (访问才往下推)</span></span><br><span class="line"><span class="type">int</span> change[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">bool</span> update[<span class="number">4</span> * N];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ad 表示当前需要下发的信息，当前节点已经修正</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">Max[i] = a[r];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="comment">// 最后一定会达到相等，不会出现越界情况</span></span><br><span class="line"><span class="built_in">build</span>(l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">Max[i] =<span class="built_in">max</span>( Max[i &lt;&lt; <span class="number">1</span>],Max[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">change[i] = <span class="number">0</span>, update[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 懒信息下发</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> ln, <span class="type">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(update[i])&#123;</span><br><span class="line">update[i &lt;&lt; <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">change[i &lt;&lt; <span class="number">1</span>] = change[i];</span><br><span class="line">Max[i &lt;&lt; <span class="number">1</span>] = change[i];</span><br><span class="line">update[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">change[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = change[i]; </span><br><span class="line">Max[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = change[i];</span><br><span class="line">update[i] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(nlog(n)) 范围查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= wol &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line">   <span class="keyword">return</span> Max[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line"><span class="keyword">if</span>(mid &gt;=wol)&#123;</span><br><span class="line">ans =<span class="built_in">max</span>(ans,<span class="built_in">query</span>(wol, wor, l, mid, i &lt;&lt; <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mid + <span class="number">1</span>&lt;= wor)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,<span class="built_in">query</span>(wol, wor, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围i增加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> wov, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(wol &lt;=  l &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line">   change[i] = wov;</span><br><span class="line">   update[i] = <span class="literal">true</span>;</span><br><span class="line">   Max[i] = wov; </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">   <span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">   <span class="keyword">if</span>(wol &lt;= mid)&#123;</span><br><span class="line">   <span class="built_in">up</span>(wol, wor, wov, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(wor &gt;= mid + <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="built_in">up</span>(wol, wor, wov, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   Max[i] = <span class="built_in">max</span>(Max[i &lt;&lt; <span class="number">1</span>], Max[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">   <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; Max[i] &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="type">int</span> n;</span><br><span class="line">       cin &gt;&gt; n;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">       <span class="built_in">build</span>(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> q1;</span><br><span class="line">       cin &gt;&gt; q1;</span><br><span class="line">       <span class="keyword">while</span>(q1--)&#123;</span><br><span class="line">       <span class="type">int</span> l, r, v;</span><br><span class="line">       cin &gt;&gt; l &gt;&gt; r &gt;&gt; v;</span><br><span class="line">       <span class="built_in">up</span>(l, r, v, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> q;</span><br><span class="line">       cin &gt;&gt; q;</span><br><span class="line">       <span class="keyword">while</span>(q --)&#123;</span><br><span class="line">       <span class="type">int</span> l, r;</span><br><span class="line">       cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">       cout &lt;&lt; <span class="built_in">query</span>(l, r, <span class="number">1</span>, n, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>######## 范围修改 + 范围查询</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> PII pair<span class="string">&lt;int,int&gt;</span></span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  范围修改 + 范围查询（线段树）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">4</span> * N]; <span class="comment">// 需要 4 * N</span></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> ad[<span class="number">4</span> * N]; <span class="comment">// 懒更新 (访问才往下推)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  ad 表示当前需要下发的信息，当前节点已经修正</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// O(n)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">sum[i] = a[r];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; <span class="comment">// 最后一定会达到相等，不会出现越界情况</span></span><br><span class="line"><span class="built_in">build</span>(l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">sum[i] = sum[i &lt;&lt; <span class="number">1</span>] + sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">ad[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 懒信息下发</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> ln, <span class="type">int</span> rn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ad[i] != <span class="number">0</span>)&#123;</span><br><span class="line">sum[i &lt;&lt; <span class="number">1</span>] += ln * ad[i];</span><br><span class="line">ad[i &lt;&lt; <span class="number">1</span>] += ad[i];</span><br><span class="line">sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += rn * ad[i];</span><br><span class="line">ad[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += ad[i];</span><br><span class="line">ad[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// O(nlog(n)) 范围查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= wol &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line">   <span class="keyword">return</span> sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line"><span class="keyword">if</span>(mid &gt;=wol)&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(wol, wor, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mid + <span class="number">1</span>&lt;= wor)&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(wol, wor, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围i增加</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> wol, <span class="type">int</span> wor, <span class="type">int</span> wov, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(wol &lt;=  l &amp;&amp; r &lt;= wor)&#123;</span><br><span class="line">   ad[i] += wov; <span class="comment">// 往下传递</span></span><br><span class="line">   sum[i] += wov*(r - l + <span class="number">1</span>); </span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">   <span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">   <span class="keyword">if</span>(wol &lt;= mid)&#123;</span><br><span class="line">   <span class="built_in">add</span>(wol, wor, wov, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(wor &gt;= mid + <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="built_in">add</span>(wol, wor, wov, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   sum[i] = sum[i &lt;&lt; <span class="number">1</span>] + sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="type">int</span> n;</span><br><span class="line">       cin &gt;&gt; n;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">       <span class="built_in">build</span>(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">       <span class="type">int</span> q1;</span><br><span class="line">       cin &gt;&gt; q1;</span><br><span class="line">       <span class="keyword">while</span>(q1--)&#123;</span><br><span class="line">       <span class="type">int</span> l, r, v;</span><br><span class="line">       cin &gt;&gt; l &gt;&gt; r &gt;&gt; v;</span><br><span class="line">       <span class="built_in">add</span>(l, r, v, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> q;</span><br><span class="line">       cin &gt;&gt; q;</span><br><span class="line">       <span class="keyword">while</span>(q --)&#123;</span><br><span class="line">       <span class="type">int</span> l, r;</span><br><span class="line">       cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">       cout &lt;&lt; <span class="built_in">query</span>(l, r, <span class="number">1</span>, n, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>######## 线段树的势能分析</p><p>######## 线段树区间合并</p><blockquote><p>处理 子串 子数组(相互连接) 的信息</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><a href="https://www.luogu.com.cn/problem/P2572">序列操作</a></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> sum[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tree0[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> pre0[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> la0[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tree1[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> pre1[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> la1[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> update[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> up_data[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> reversed[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> ln, <span class="type">int</span> rn)</span> </span>&#123;</span><br><span class="line">    pre0[i] = (pre0[i &lt;&lt; <span class="number">1</span>] == ln) ? (pre0[i &lt;&lt; <span class="number">1</span>] + pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) : pre0[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    pre1[i] = (pre1[i &lt;&lt; <span class="number">1</span>] == ln) ? (pre1[i &lt;&lt; <span class="number">1</span>] + pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) : pre1[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    la0[i] = (pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] == rn) ? (la0[i &lt;&lt; <span class="number">1</span>] + pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) : la0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    la1[i] = (pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] == rn) ? (la1[i &lt;&lt; <span class="number">1</span>] + pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) : la1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    tree0[i] = <span class="built_in">max</span>(&#123;tree0[i &lt;&lt; <span class="number">1</span>], tree0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], la0[i &lt;&lt; <span class="number">1</span>] + pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]&#125;);</span><br><span class="line">    tree1[i] = <span class="built_in">max</span>(&#123;tree1[i &lt;&lt; <span class="number">1</span>], tree1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], la1[i &lt;&lt; <span class="number">1</span>] + pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]&#125;);</span><br><span class="line">    sum[i] = sum[i &lt;&lt; <span class="number">1</span>] + sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    reversed[i] = <span class="literal">false</span>;</span><br><span class="line">    update[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tree0[i] = (a[r] == <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        tree1[i] = (a[r] == <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        sum[i] = a[r];</span><br><span class="line">        la0[i] = pre0[i] = tree0[i];</span><br><span class="line">        la1[i] = pre1[i] = tree1[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (r + l) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(mid + <span class="number">1</span>, r, (i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">up</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> ln, <span class="type">int</span> rn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (update[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (up_data[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            pre1[i &lt;&lt; <span class="number">1</span>] = la1[i &lt;&lt; <span class="number">1</span>] = tree1[i &lt;&lt; <span class="number">1</span>] = ln;</span><br><span class="line">            pre0[i &lt;&lt; <span class="number">1</span>] = la0[i &lt;&lt; <span class="number">1</span>] = tree0[i &lt;&lt; <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = la1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = tree1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = rn;</span><br><span class="line">            pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = la0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = tree0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            sum[i &lt;&lt; <span class="number">1</span>] = ln;</span><br><span class="line">            sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = rn;</span><br><span class="line">            update[i] = <span class="literal">false</span>;</span><br><span class="line">            update[i &lt;&lt; <span class="number">1</span>] = update[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            up_data[i &lt;&lt; <span class="number">1</span>] = up_data[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre0[i &lt;&lt; <span class="number">1</span>] = la0[i &lt;&lt; <span class="number">1</span>] = tree0[i &lt;&lt; <span class="number">1</span>] = ln;</span><br><span class="line">            pre1[i &lt;&lt; <span class="number">1</span>] = la1[i &lt;&lt; <span class="number">1</span>] = tree1[i &lt;&lt; <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = la0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = tree0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = rn;</span><br><span class="line">            pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = la1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = tree1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            sum[i &lt;&lt; <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            update[i] = <span class="literal">false</span>;</span><br><span class="line">            update[i &lt;&lt; <span class="number">1</span>] = update[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            up_data[i &lt;&lt; <span class="number">1</span>] = up_data[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reversed[i &lt;&lt; <span class="number">1</span>] = reversed[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (reversed[i]) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(pre1[i &lt;&lt; <span class="number">1</span>], pre0[i &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(la1[i &lt;&lt; <span class="number">1</span>], la0[i &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(tree0[i &lt;&lt; <span class="number">1</span>], tree1[i &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(pre1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], pre0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(la1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], la0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">swap</span>(tree0[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tree1[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">        sum[i &lt;&lt; <span class="number">1</span>] = ln - sum[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = rn - sum[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        reversed[i &lt;&lt; <span class="number">1</span>] = !reversed[i &lt;&lt; <span class="number">1</span>];</span><br><span class="line">        reversed[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = !reversed[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        reversed[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> jobl, <span class="type">int</span> jobr, <span class="type">int</span> w, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= l &amp;&amp; r &lt;= jobr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">            pre0[i] = la0[i] = tree0[i] = (r - l + <span class="number">1</span>);</span><br><span class="line">            sum[i] = <span class="number">0</span>;</span><br><span class="line">            pre1[i] = la1[i] = tree1[i] = <span class="number">0</span>;</span><br><span class="line">            update[i] = <span class="literal">true</span>;</span><br><span class="line">            up_data[i] = w;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre1[i] = la1[i] = tree1[i] = (r - l + <span class="number">1</span>);</span><br><span class="line">            sum[i] = (r - l + <span class="number">1</span>);</span><br><span class="line">            pre0[i] = la0[i] = tree0[i] = <span class="number">0</span>;</span><br><span class="line">            update[i] = <span class="literal">true</span>;</span><br><span class="line">            up_data[i] = w;</span><br><span class="line">        &#125;</span><br><span class="line">        reversed[i] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">change</span>(jobl, jobr, w, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jobr &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">change</span>(jobl, jobr, w, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">up</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> jobl, <span class="type">int</span> jobr, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= l &amp;&amp; r &lt;= jobr) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= mid) &#123;</span><br><span class="line">        ans += <span class="built_in">query1</span>(jobl, jobr, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jobr &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">        ans += <span class="built_in">query1</span>(jobl, jobr, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  返回 [l, r] 范围上 被 [jobl, jobr] 影响的区域 的 信息</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">query2</span><span class="params">(<span class="type">int</span> jobl, <span class="type">int</span> jobr, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= l &amp;&amp; r &lt;= jobr) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;tree1[i], pre1[i], la1[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a1 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; a2 = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= mid) &#123;</span><br><span class="line">        a1 = <span class="built_in">query2</span>(jobl, jobr, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jobr &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">        a2 = <span class="built_in">query2</span>(jobl, jobr, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max_len = <span class="built_in">max</span>(a1[<span class="number">0</span>], a2[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= mid &amp;&amp; jobr &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">        max_len = <span class="built_in">max</span>(max_len, a1[<span class="number">2</span>] + a2[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> prefix_len = (jobl &lt;= l) ? a1[<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      [l, r]</span></span><br><span class="line"><span class="comment">      [jobl,jobr]</span></span><br><span class="line"><span class="comment">      返回 [l, r] 范围上 被 [jobl, jobr] 影响的区域 的 信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= l &amp;&amp; a1[<span class="number">1</span>] == (mid - l + <span class="number">1</span>) &amp;&amp; jobr &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">        prefix_len += a2[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> suffix_len = (jobr &gt;= r) ? a2[<span class="number">2</span>] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (jobr &gt;= r &amp;&amp; a2[<span class="number">1</span>] == (r - mid) &amp;&amp; jobl &lt;= mid) &#123;</span><br><span class="line">        suffix_len += a1[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;max_len, prefix_len, suffix_len&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> jobl, <span class="type">int</span> jobr, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= l &amp;&amp; r &lt;= jobr) &#123;</span><br><span class="line">        reversed[i] = !reversed[i];</span><br><span class="line">        <span class="built_in">swap</span>(pre1[i], pre0[i]);</span><br><span class="line">        <span class="built_in">swap</span>(la1[i], la0[i]);</span><br><span class="line">        <span class="built_in">swap</span>(tree0[i], tree1[i]);</span><br><span class="line">        sum[i] = (r - l + <span class="number">1</span>) - sum[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">down</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">    <span class="keyword">if</span> (jobl &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(jobl, jobr, l, mid, i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (jobr &gt;= mid + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">reverse</span>(jobl, jobr, mid + <span class="number">1</span>, r, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">up</span>(i, mid - l + <span class="number">1</span>, r - mid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="type">int</span> pos, l, r;</span><br><span class="line">        cin &gt;&gt; pos &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l++; r++;</span><br><span class="line">        <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">change</span>(l, r, <span class="number">0</span>, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">change</span>(l, r, <span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">reverse</span>(l, r, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == <span class="number">3</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query1</span>(l, r, <span class="number">1</span>, n, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos == <span class="number">4</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query2</span>(l, r, <span class="number">1</span>, n, <span class="number">1</span>)[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="开点线段树">开点线段树</h6><ol><li class="lvl-3"><p>问题</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>支持很大的范围，但是查询次数少，查询区间小</p></li></ul><blockquote><p>时间复杂度 2 * m * log(n)，用 cnt 来记录编号，看节点分支是否访问过。</p></blockquote><h6 id="线段树历史最值操作">线段树历史最值操作</h6><blockquote><p>标签回收 → 进行剪枝</p></blockquote><h2 id="图论">图论</h2><h4 id="最短路问题">最短路问题</h4><blockquote><p>遇见过很多 最短路 问题，题目的意思一般都指向明确，就是(i $\rightarrow$ j)的路径最小。</p></blockquote><blockquote class="alert alert-note"><p>但是一般都是 <strong>最短路的扩展</strong>， ex：到达终点时候需要满足什么样的状态</p></blockquote><p>题目链接：</p><ul class="lvl-0"><li class="lvl-2"><p><a href="https://acm.hdu.edu.cn/contest/problem?cid=1159&amp;pid=1006">扩展迷宫问题</a></p></li></ul><blockquote><p>个人认为这道题非常的典，题中还应用了一类 <strong>自定义点</strong>，来管理相同类别的点之间的跳转。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">slove</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, x;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">vector&lt;array&lt;<span class="type">int</span>, 3&gt;&gt; g[<span class="number">2</span> * n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">g[a[i] + n].<span class="built_in">push_back</span>(&#123;i,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">g[i].<span class="built_in">push_back</span>(&#123;a[i] + n, x, <span class="number">1</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">g[u].<span class="built_in">push_back</span>(&#123;v,w,<span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt; array&lt;<span class="type">int</span>,3&gt;, vector&lt;array&lt;<span class="type">int</span>,3&gt;&gt;, greater&lt;array&lt;<span class="type">int</span>,3&gt;&gt;&gt; q;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;);</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(<span class="number">2</span> * n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>, INT_MAX));</span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">vis</span>(<span class="number">2</span> * n + <span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(<span class="number">3</span>,<span class="literal">false</span>));</span><br><span class="line">dist[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">auto</span> temp = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="type">int</span> v = temp[<span class="number">1</span>],step = temp[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">if</span>(vis[v][step]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; v &lt;&lt; &quot; &quot; &lt;&lt; w &lt;&lt; endl;</span></span><br><span class="line">vis[v][step] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>[u, w, l] : g[v])&#123;</span><br><span class="line"><span class="comment">// cout &lt;&lt; u &lt;&lt; &quot; &quot; &lt;&lt; w &lt;&lt; endl;</span></span><br><span class="line"><span class="type">int</span> op = (step + l) % <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(dist[u][op] &gt; dist[v][step] + w)&#123;</span><br><span class="line">dist[u][op] = dist[v][step] + w;</span><br><span class="line">q.<span class="built_in">push</span>(&#123;dist[u][op],u, op&#125;);&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dist[n][<span class="number">0</span>] == INT_MAX)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; dist[n][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) <span class="built_in">slove</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拓扑排序">拓扑排序</h4><blockquote><p>适用于那些 节点状态有先后性的问题。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>如果需要求 最大/最小的拓扑排序的话，可以将存储的 deque 改成 优先队列</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">in</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="type">int</span> u, v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">a[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">in[v]++;</span><br><span class="line">&#125;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)&#123;q.<span class="built_in">push_back</span>(i);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> x = q.<span class="built_in">front</span>(); q.<span class="built_in">pop_front</span>();</span><br><span class="line">cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> t : a[x])&#123;</span><br><span class="line">in[t]--;</span><br><span class="line"><span class="keyword">if</span>(in[t] == <span class="number">0</span>) q.<span class="built_in">push_back</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>板子题：<a href="https://www.luogu.com.cn/problem/P1347">P1347</a></p></li></ul><h4 id="负环-差分约束">负环 差分约束</h4><p>形式</p><ol><li class="lvl-3"><p>$$<br>x_i - x_j \leq C_i \quad \text{($C_i$ 为常数)}\<br>找到一组满足这种式子的解<br>$$</p></li></ol><blockquote><p>根据 小于号 的不等式来建图</p></blockquote><p>$$<br>x_i \leq x_j + C_i<br>$$</p><p>将这个式子应用到 <strong>图</strong>中,如果图中存在负环就不存在满足的解。</p><ul class="lvl-0"><li class="lvl-2"><p>负环判断： 如果这个节点进队列 $\geq$ 所有节点的 个数 - 1</p></li><li class="lvl-2"><p>如果队列为空，dist[n] 便是一组解</p></li></ul><h2 id="数学">数学</h2><h4 id="基础数论">基础数论</h4><ul class="lvl-0"><li class="lvl-2"><p>任何一个整数 都可以分解为 有限个质数的乘积</p></li></ul><p>$$<br>N = p_1^{c_1} * p_2^{c_2} \dots p_x^{c_x}<br>$$</p><p>则 N 的约数集合为<br>$$<br>约数集合 = {p_1^{b_1} * p_2 ^ {b_2} \dots p_x^{b_x}} \<br>0\le b_i \le c_i<br>$$<br>正约数的个数 😒\prod_{i=1}^{m}{(c_i +1)}$</p><ul class="lvl-0"><li class="lvl-2"><p>质数筛的算法只需要 $log{(n)}$</p></li></ul><h4 id="高斯消元">高斯消元</h4><blockquote><p>高斯消元 有三种类别，我们会逐一补充，目前先补充 异或消元，但是其实本质是不变的。</p></blockquote><h4 id="线性基">线性基</h4><blockquote><p>给出一个数组，请找出这个 数组的任意元素进行异或，可以得到多少种情况。</p><p>线性基的大小便决定了 能异或的多少种情况 （2 ^ n - 1)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  线性基</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> _1()&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  查找每一位的 基</span></span><br><span class="line"><span class="comment">  首先 从 每一个数 开始遍历，然后枚举 每一个位置，如果这个位置有 基，将这个数 变成 两者的异或值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> h = <span class="number">61</span>;</span><br><span class="line"><span class="type">bool</span> zero = <span class="literal">false</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">base</span><span class="params">(h + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = h; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(((a[i] &gt;&gt; j) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(base[j] == <span class="number">0</span>)&#123;</span><br><span class="line">base[j] = a[i];</span><br><span class="line">ans.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> a[i] = a[i] ^ base[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">0</span>) zero = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : ans) cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span>(zero) cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>高斯消元</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> _2()&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="number">1</span>, h = <span class="number">61</span>; <span class="comment">// 上面是确定的</span></span><br><span class="line"><span class="type">bool</span> zero = <span class="literal">false</span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">base</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = h; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = len; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(((a[j] &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[len],a[j]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(((a[len] &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(k != len &amp;&amp; ((a[k] &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">a[k] = a[k] ^ a[len];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">len --;</span><br><span class="line"><span class="keyword">if</span>(len != n) zero = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span>(zero) cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="常见考点：">常见考点：</h6><p>######## <strong>求异或最大值</strong></p><blockquote><p>从 最高位开始枚举，来进行更新最大值</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">base</span><span class="params">(<span class="number">53</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">52</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(((a[i] &gt;&gt; k) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(base[k] == <span class="number">0</span>)&#123;</span><br><span class="line">base[k] = a[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">a[i] ^= base[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">52</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, mx ^ base[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; mx &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>######## <strong>求 异或 第 k 小值</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#<span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> fr first</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> sc second</span></span><br><span class="line">#<span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> PII = pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  线性基</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">auto</span> swp = [&amp;](<span class="type">int</span> i, <span class="type">int</span> j) -&gt; <span class="type">void</span>&#123;</span><br><span class="line"><span class="type">int</span> t = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">53</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = len; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(((a[j] &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">swp</span>(j, len);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(((a[len] &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j != len &amp;&amp; (((a[j] &gt;&gt; i) &amp; <span class="number">1</span>) == <span class="number">1</span>))&#123;</span><br><span class="line">a[j] ^= a[len];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">len ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">len --;</span><br><span class="line"><span class="comment">// for(int i = 1; i &lt;= len; i++) cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line"><span class="type">bool</span> zero = (len != n);</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="type">int</span> mx = (<span class="number">1</span> &lt;&lt; len);</span><br><span class="line"><span class="comment">// cout &lt;&lt; mx &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">if</span>(zero) t--;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span> &amp;&amp; zero) cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">0</span> || t &gt;= mx) cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; t &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len, j = <span class="number">0</span>; i &gt;= <span class="number">1</span>; i--, j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((t &amp; (<span class="number">1L</span> &lt;&lt; j)) != <span class="number">0</span>) &#123;</span><br><span class="line">ans ^= a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// cout &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展欧几里得-2">扩展欧几里得</h4><h6 id="中国剩余定理">中国剩余定理</h6><p>由扩展欧几里得算法（后续填完扩展欧几里得会补充）</p><h2 id="动态规划">动态规划</h2><h4 id="区间DP">区间DP</h4><blockquote><p>当实现 区间DP 的时候，如何将递归该迭代</p><ol><li class="lvl-3">首先<strong>枚举每一个长度的区间，然后在枚举每一个区间的开头</strong>（这样可以避免判断边界条件），然后判断这个区间的扩展，因为当你枚举到这个长度的区间的时候，你是一定枚举完这个区间的子区间的。</li><li class="lvl-3">注意 子区间中存在一些特判的情况！</li></ol></blockquote><ul class="lvl-0"><li class="lvl-2"><p><a href="http://leetcode.cn/problems/predict-the-winner/submissions/626649392/">预测赢家</a></p></li></ul><h2 id="计算几何">计算几何</h2><h2 id="博弈论">博弈论</h2><h2 id="杂项">杂项</h2><h4 id="数据">数据</h4><blockquote><p>通过数据量的给出，可以大概的估计是一个什么时间复杂度的算法，从而来推演这个算法的类型。</p></blockquote><h4 id="或-和-与">或( | ) 和 与( &amp; )</h4><p>对于或和与的一些讨论</p><ul class="lvl-0"><li class="lvl-2"><p>或 是只要有一个 1，或值 中这个位置就一定会存在一个 1</p></li></ul><p>可以考虑 这个位置的 一是否需要存在来进行按位判断</p><ul class="lvl-0"><li class="lvl-2"><p>与 是需要全部都是1，与值 中这个位置就一定存在 1</p></li></ul><h4 id="最大公约数-和-最小公倍数-的关系">最大公约数 和 最小公倍数 的关系</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>预处理两个数字的最大公约数</strong></p></li></ul><blockquote><p>这个 <code>g[y][x%y]</code> 其实就相当于一个 动规的转辗相除法的一个应用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt; N; x ++) g[x][<span class="number">0</span>] = g[<span class="number">0</span>][x] = g[x][x] = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">1</span>; x &lt; N; x ++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">1</span>; y &lt; x; y++)&#123;</span><br><span class="line">g[x][y] = g[y][x] = g[y][x % y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>特殊性质对于任何正整数 a1​,a2​,…,an​ 和它们的 GCD g=gcd(a1​,a2​,…,an​)，如果我们定义一个新数组 ai′​=ai​/g，那么新数组 a1′​,a2′​,…,an′​ 的<strong>最大公约数必然是 1</strong></p></li><li class="lvl-2"><p><code>lcm(a, b) * gcd(a, b) = a * b</code></p></li></ul><p>​<code>a * b = 质数</code> → (<code>a = 1, b 为 质数</code>)</p><ul class="lvl-0"><li class="lvl-2"><p>在进行 GCD 的过程中，随着 不断进行 GCD，GCD的值只可能不变或者变小</p></li></ul><h4 id="异或值">异或值</h4><ol><li class="lvl-3"><p>遇到异或值可以考虑 枚举每一个位置，看是不是每一个位置的变化会对答案有影响（规律性）</p></li></ol><p><a href="https://codeforces.com/problemset/problem/2094/E">2094E</a></p><h4 id="二进制">二进制</h4><ul class="lvl-0"><li class="lvl-2"><p>在二进制的位移中   <strong>1</strong>是会被默认当作 (int)类型的</p></li></ul><p>需要 (1ll &lt;&lt; j) 防止溢出</p><blockquote><p>如 （1 &lt;&lt; j) 会被默认为 <strong>int</strong> 类型</p></blockquote><h4 id="图的创新知识">图的创新知识</h4><ul class="lvl-0"><li class="lvl-2"><p>存在多个 起点的时候，可以设置虚点。</p></li><li class="lvl-2"><p>遇到中位数（对顶堆）</p></li><li class="lvl-2"><p>树上的 两个节点之间 <strong>只存在一条最短路径</strong></p></li></ul><h4 id="二分">二分</h4><ul class="lvl-0"><li class="lvl-2"><p>二分是 x 值成立 $\leq or \geq$ x 的值都成立</p></li><li class="lvl-2"><p>二分具有单调性：</p></li><li class="lvl-2"><p><strong>当 x 成立的 时候， 小于 x 的值都是一定成立的。</strong></p></li></ul><h4 id="对于数组中-不同位置的值-能否相互抵消，变成全是-0-的数组">对于数组中 不同位置的值 能否相互抵消，变成全是 0 的数组</h4><p>如果当前 元素的个数大于了 数组的和的一半<strong>肯定是不成立的</strong></p><h4 id="区间异或问题">区间异或问题</h4><p>对于一个区间 [l, r] 来说, <code>l ^ r</code> 中的 最高位的 1，相当于 最高位后面的 1都可以由 [l, r] 中的值异或得到。</p><h4 id="1"><strong>1</strong></h4><p><strong>在计算机中会自动被默认设置为 int 型，所以如果有long long 的话，需要 改变 1 的类型, (long long)</strong></p><h4 id="矩阵问题">矩阵问题</h4><h6 id="矩阵-行列异或">矩阵 行列异或</h6><p><a href="https://ac.nowcoder.com/acm/contest/108589/F">矩阵构造</a></p><ul class="lvl-0"><li class="lvl-2"><p>通用思考：找一下 总的异或 的值的关系</p></li><li class="lvl-2"><p>尝试去构造矩阵</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沉淀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于过去</title>
      <link href="/2025/04/30/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB/"/>
      <url>/2025/04/30/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>今天突然听到“老男孩”，“曾经志在四方少年，羡慕南飞的雁”，</p></blockquote><span id="more"></span><p>如果不着急赶路，语文应该是最美的学科。我一直喜欢语文中那些直击内心的诗词和美句。</p><ul class="lvl-0"><li class="lvl-2"><p>我的青春褪色的很严重，我一度以为我记忆中傍晚的夕阳，冬日飘洒的雪花，那年夜晚中盛放的烟花是我的一场梦，因为这一切都太快了，太快了，快到我的眼角爬出了皱纹，快到了我看不清站在我青春中熠熠生辉的你，快到我不再鲜活的灵魂和老化的身体彻底的合二为一。</p></li><li class="lvl-2"><p>如果最后的最后，我还是没能拥有和时间一样绝不回头的勇气，不是我没找到像钢铁那般牢不可破的心，只怪生命太张扬，生活也从来不是走过场。那些在泥土里压下去的没一个脚印都是真实有力量的，而我们能感知，会心跳，懂得爱，就没什么大不了。所以人要允许自己回头看，即使眼泪再柔软。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YOUTH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex基础公式学习</title>
      <link href="/2025/04/28/Latex%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/04/28/Latex%E5%9F%BA%E7%A1%80%E5%85%AC%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>突然做笔记需要这个就做了一个简单的学习。</p></blockquote><span id="more"></span><h1>Markdown 下的 LATEX</h1><p>在 markdown 下进行 Latex 的式子的编写的方法</p><ul class="lvl-0"><li class="lvl-2"><p>使用 $$ 作为行内式子</p></li><li class="lvl-2"><p>$$ + 回车 作为行间式子</p></li></ul><blockquote><p>以下的公式 皆省去了</p></blockquote><h2 id="符号">符号</h2><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">式子</th><th style="text-align:center">显示效果</th></tr></thead><tbody><tr><td style="text-align:center">上标</td><td style="text-align:center">x^{2}</td><td style="text-align:center">$x^{2}$</td></tr><tr><td style="text-align:center">下标</td><td style="text-align:center">x_{2}</td><td style="text-align:center">$x_{2}$</td></tr><tr><td style="text-align:center">分式</td><td style="text-align:center">\frac{x}{y}</td><td style="text-align:center">$\frac{x}{y}$</td></tr><tr><td style="text-align:center">乘</td><td style="text-align:center">\times</td><td style="text-align:center">$\times$</td></tr><tr><td style="text-align:center">除</td><td style="text-align:center">\div</td><td style="text-align:center">$\div$</td></tr><tr><td style="text-align:center">加减</td><td style="text-align:center">\pm</td><td style="text-align:center">$\pm$</td></tr><tr><td style="text-align:center">减加</td><td style="text-align:center">\mp</td><td style="text-align:center">$\mp$</td></tr><tr><td style="text-align:center">求和</td><td style="text-align:center">\sum</td><td style="text-align:center">$\sum$</td></tr><tr><td style="text-align:center">求和上下标</td><td style="text-align:center">\sum_{infty} ^ {infty}</td><td style="text-align:center">$\sum_{-\infty}^{\infty}$</td></tr><tr><td style="text-align:center">求积</td><td style="text-align:center">\prod</td><td style="text-align:center">$\prod$</td></tr><tr><td style="text-align:center">微分</td><td style="text-align:center">\partial</td><td style="text-align:center">$\partial$</td></tr><tr><td style="text-align:center">积分</td><td style="text-align:center">\int, \displaystyle\int</td><td style="text-align:center">$\int,\displaystyle\int$</td></tr><tr><td style="text-align:center">不等于</td><td style="text-align:center">\neq</td><td style="text-align:center">$\neq$</td></tr><tr><td style="text-align:center">大于等于</td><td style="text-align:center">\geq</td><td style="text-align:center">$\geq$</td></tr><tr><td style="text-align:center">小于等于</td><td style="text-align:center">\leq</td><td style="text-align:center">$\leq$</td></tr><tr><td style="text-align:center">约等于</td><td style="text-align:center">\approx</td><td style="text-align:center">$\approx$</td></tr><tr><td style="text-align:center">不大于等于</td><td style="text-align:center">x + y \ngeq z</td><td style="text-align:center">$x + y \ngeq z$</td></tr><tr><td style="text-align:center">点乘</td><td style="text-align:center">\cdot</td><td style="text-align:center">$\cdot$</td></tr><tr><td style="text-align:center">星乘</td><td style="text-align:center">\ast</td><td style="text-align:center">$\ast$</td></tr><tr><td style="text-align:center">取整函数</td><td style="text-align:center">\left \lfloor \frac{a}{b} \right \rfloot</td><td style="text-align:center">$\left \lfloor \frac{a}{b} \right \rfloor$</td></tr><tr><td style="text-align:center">取顶函数</td><td style="text-align:center">\left \lceil \frac{a}{b} \right \rceil</td><td style="text-align:center">$\left \lceil \frac{a}{b} \right \rceil$</td></tr></tbody></table><h2 id="括号">括号</h2><hr><table><thead><tr><th>符号</th><th>式子</th><th>显示效果</th></tr></thead><tbody><tr><td>圆括号</td><td>\left(\frac{a}{b} \right)</td><td>$\left(\frac{a}{b} \right)$</td></tr><tr><td>方括号</td><td>\left[\frac{a}{b} \ right]</td><td>$\left[\frac{a}{b}\right]$</td></tr><tr><td>花括号</td><td>\left{\frac{a}{b} \right}</td><td>$\lbrace \frac{a}{b} \rbrace$</td></tr><tr><td>混合括号</td><td>\left[ a, b\right)</td><td>$\left [a,b \right)$</td></tr></tbody></table><h2 id="基本函数">基本函数</h2><hr><table><thead><tr><th>符号</th><th>式子</th><th>显示效果</th></tr></thead><tbody><tr><td>对数1</td><td>\log_x{y}</td><td>$\log_x{y}$</td></tr><tr><td>对数2</td><td>\ln{\left(x + y\right)}</td><td>$\ln{\left(x + y\right)}$</td></tr></tbody></table><h2 id="数学符号">数学符号</h2><hr><table><thead><tr><th>符号</th><th>式子</th><th>显示效果</th></tr></thead><tbody><tr><td>无穷</td><td>\infty</td><td>$\infty$</td></tr><tr><td>省略号1</td><td>\cdots</td><td>$\cdots$</td></tr><tr><td>省略号2</td><td>\ldots</td><td>$\ldots$</td></tr><tr><td>省略号3</td><td>\vdots</td><td>$\vdots$</td></tr><tr><td>省略号4</td><td>\ddtos</td><td>$\ddots$</td></tr><tr><td>箭头1</td><td>\rightarrow</td><td>$\rightarrow$</td></tr><tr><td>箭头2</td><td>\leftarrow</td><td>$\leftarrow$</td></tr><tr><td>箭头3</td><td>\Rightarrow</td><td>$\Rightarrow$</td></tr><tr><td>箭头4</td><td>\Leftarrow</td><td>$\Leftarrow$</td></tr><tr><td>箭头5</td><td>\Uparrow</td><td>$\Uparrow$</td></tr><tr><td>箭头6</td><td>\Downarrow</td><td>$\Downarrow$</td></tr><tr><td>箭头7</td><td>\longrightarrow</td><td>$\longrightarrow$</td></tr><tr><td>…</td><td>…</td><td>…(自行脑补)</td></tr><tr><td>|</td><td>\mid</td><td>$\mid$</td></tr><tr><td>\</td><td>\backslash</td><td>$\backslash$</td></tr><tr><td>任意</td><td>\forall</td><td>$\forall$</td></tr><tr><td>存在</td><td>\exists</td><td>$\exists$</td></tr><tr><td>右箭头</td><td>\implies</td><td>$\implies$</td></tr><tr><td>双向箭头</td><td>\iff</td><td>$\iff$</td></tr><tr><td>左箭头</td><td>\impliedby</td><td>$\impliedby$</td></tr></tbody></table><h2 id="高级运算符">高级运算符</h2><hr><table><thead><tr><th>符号</th><th>式子</th><th>显示效果</th></tr></thead><tbody><tr><td>平均数</td><td>\overline{x}</td><td>$\overline{x}$</td></tr><tr><td>求根</td><td>\sqrt{x}</td><td>$\sqrt{x}$</td></tr><tr><td>开方</td><td>\sqrt[n]{x}</td><td>$\sqrt[n]{x}$</td></tr></tbody></table><h2 id="集合运算">集合运算</h2><hr><table><thead><tr><th>符号</th><th>式子</th><th>显示效果</th></tr></thead><tbody><tr><td>属于</td><td>\in</td><td>$a \in b$</td></tr><tr><td>不属于</td><td>\notin</td><td>$a \notin b$</td></tr><tr><td>子集</td><td>\subset</td><td>$a \subset b$</td></tr><tr><td>真子集</td><td>\subseteq</td><td>$a \subseteq b$</td></tr><tr><td>并集</td><td>\cup</td><td>$a \cup b$</td></tr><tr><td>交集</td><td>\cap</td><td>$a \cap b$</td></tr><tr><td>异或</td><td>\bigoplus</td><td>$a \bigoplus b$</td></tr></tbody></table><h2 id="常用表达">常用表达</h2><ol><li class="lvl-3"><p>分段函数</p></li></ol><p>$$<br>y = \begin{cases}<br>2X + 1 &amp; x \leq 0 \<br>x &amp; x &gt; 0<br>\end{cases}<br>$$</p><p>… 后续会更新机器学习方面的表达式</p><p>参考内容：<br><a href="https://www.cnblogs.com/bytesfly/p/markdown-formula.html">Markdown的latex使用教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OrangePi5部署YOLO推理模型</title>
      <link href="/2025/04/15/OrangePi5-%E9%83%A8%E7%BD%B2-YOLO%E6%8E%A8%E7%90%86%E6%A8%A1%E5%9E%8B/"/>
      <url>/2025/04/15/OrangePi5-%E9%83%A8%E7%BD%B2-YOLO%E6%8E%A8%E7%90%86%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>阐述一下我在 YOLO模型转化 和 开发板上配置踩的坑。 <strong>：（</strong></p></blockquote><span id="more"></span><h1>YOLO的 pt 模型 转化为 onnx</h1><blockquote><p>这里有一个 小坑，也是会影响你后面的转化结果。</p></blockquote><p>模型转化用<a href="https://github.com/airockchip/ultralytics_yolov8">ultralytics_yolov8</a> 这个Github库.</p><p>pt 模型直接放到 ultralytics_yolov8路径下，然后输入以下两条指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PYTHONPATH=./</span><br><span class="line">python ./ultralytics/engine/exporter.py</span><br></pre></td></tr></table></figure><p>或者也可以直接调用 进行模型转化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yolo export model=yolov8relupt.pt format=rknn</span><br></pre></td></tr></table></figure><blockquote><p>转化的时候如果显示 yolo 不支持 rknn的格式转化，你就得更新一下yolo（相当于更新 ultralytics库）</p></blockquote><p>无论这两种方法中的哪一种 生成的 onnx模型都需要有 大于一个的检测头。(**这是必须满足的条件，不然后面转化为 rknn 的模型是有问题的)</p><blockquote><p>可以使用 netron 这个网站来查看自己的 onnx 模型样子，几个检测头就相当于有几个分支</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2025/06/13/52c4399f85bdb6db.png" alt=""></p><h1>onnx 转化为 rknn</h1><p>该操作方法照着 <a href="https://blog.csdn.net/A_l_b_ert/article/details/141610417">YOLOv8 部署 rk3588</a>进行操作就可以，我操作的时候没有任何问题。</p><blockquote><p>在这一步你也需要检查的就是 你到导出 的 rknn模型的检测头（用 netron），有几个输出结果便对应着你 有一个标签。如果检测头只有一个或者过少便是你模型转化有问题，请检查前面步骤是不是存在问题。</p></blockquote><h1>rknn 进行模型推理</h1><p>这里的操作也是 <a href="https://blog.csdn.net/A_l_b_ert/article/details/141610417">YOLOv8 部署 rk3588</a>这个博主，他有一个现成的 C++ 调用 NPU的代码可以直接套用，但是他那个代码存在一点缺陷便是，你每一次编译完他那个<strong>读取图片的路径是不能改变</strong>的，建议将他的C++进行调整，将那个 输入的图片的路径 和 输出的图片的路径 作为 运行的 参数调用</p><blockquote><p>这里有一个存在的问题就是 CV2 无法读取图片的问题</p></blockquote><p>如果当你遇到了 CV 无法读取图片的问题的时候（这个问题困扰了我10几个小时，在这个途中我尝试了很多其他来调用rknn模型的代码，发现要不是版本不适配要不就是很麻烦 😭 ，差点给 开发板 变成装垃圾的了）</p><ul class="lvl-0"><li class="lvl-2"><p>图片的尺寸必须和你训练的 <strong>yolo模型</strong>的读取图片的尺寸保持一致，一般来说，yolo的默认读取图片的尺寸是 640*640</p></li><li class="lvl-2"><p>图片的后缀名字必须为 png</p></li></ul><p>最后想感谢的就是 RKNN技术论坛的大佬们，帮我能更快的解决我遇到的问题！真的配环境遇到的问题就是给人一种绝望的感觉，还有就是感谢 <a href="https://blog.csdn.net/A_l_b_ert/article/details/141610417">YOLOv8 部署 rk3588</a>这个博主的教程。</p><p>参考网站：</p><ul class="lvl-0"><li class="lvl-2"><p><a href="https://blog.csdn.net/A_l_b_ert/article/details/141610417">YOLOv8 部署 rk3588</a></p></li><li class="lvl-2"><p><a href="https://github.com/A7bert777/YOLOv8_RK3588_object_detect">rknn调用的 C++ 代码</a></p></li></ul><h2 id="…-博主模型跑通了，放长假ing">… 博主模型跑通了，放长假ing</h2>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACM集训题</title>
      <link href="/2025/04/15/ACM%E9%9B%86%E8%AE%AD%E9%A2%98/"/>
      <url>/2025/04/15/ACM%E9%9B%86%E8%AE%AD%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>Let me alone.</p></blockquote><span id="more"></span><hr><blockquote class="alert alert-note"><p>注意 本集训题在暑假的时候继续更新（因为这个学期集训次数过少。）</p></blockquote><table><thead><tr><th>题目</th></tr></thead><tbody><tr><td>gcd变化次数， <a href="https://ac.nowcoder.com/acm/contest/69791/F">https://ac.nowcoder.com/acm/contest/69791/F</a></td></tr><tr><td>线段树二分， 理解01排序，<a href="https://www.luogu.com.cn/problem/P2824">https://www.luogu.com.cn/problem/P2824</a></td></tr><tr><td><a href="https://ac.nowcoder.com/acm/contest/95323/K">https://ac.nowcoder.com/acm/contest/95323/K</a></td></tr><tr><td>基环树 <a href="https://www.luogu.com.cn/problem/P1399">https://www.luogu.com.cn/problem/P1399</a></td></tr><tr><td><strong>牛客 基础算法班</strong></td></tr></tbody></table><h1><a href="https://ac.nowcoder.com/acm/contest/69791/F">GCD 的变化次数</a></h1><blockquote><p>注意到的性质：<strong>gcd(x, y) &lt;= min(x,y) → gcd(x,y) &lt;= x / 2</strong></p><p>相当于 GCD 要不不变，要不<strong>变小 1/2 O(log(n))</strong></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>对于一个子序列的 最大公约数（GCD），可以认定这个 最大公约数的 可能性是可以枚举的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6e5</span> + <span class="number">10</span>;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; pos[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    pos[<span class="number">1</span>].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>,a[<span class="number">1</span>]&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        pos[i].<span class="built_in">push_back</span>(&#123;i,a[i]&#125;);</span><br><span class="line">        <span class="type">int</span> t = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [x,y] : pos[i - <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="type">int</span> now = <span class="built_in">gcd</span>(t,y);</span><br><span class="line">            <span class="keyword">if</span>(t != now)&#123;</span><br><span class="line">                pos[i].<span class="built_in">push_back</span>(&#123;x,now&#125;);</span><br><span class="line">                t = now;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(a);</span><br><span class="line"><span class="keyword">while</span>(m --)&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [x,y]: pos[r])&#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= l)&#123;</span><br><span class="line">                ans += <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1><a href="https://acm.hdu.edu.cn/contest/problem?cid=1157&amp;pid=1010">枚举</a></h1><blockquote><p>最近尝试的很多题目，都存在一个关键点，便是如果数据量有限，可以进行暴力枚举可能性。</p></blockquote><p><a href="https://acm.hdu.edu.cn/contest/problem?cid=1157&amp;pid=1010">字符串哈希</a></p><ul class="lvl-0"><li class="lvl-2"><p>这个题目不仅应用了枚举还考察了 字符串哈希 不碰撞的特殊性质。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坚持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础学习</title>
      <link href="/2025/04/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/04/12/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p>数据库的基本知识学习</p></blockquote><span id="more"></span><div class="tips"><p><strong>自我评价</strong></p><ul class="lvl-1"><li class="lvl-2">关于数据库的学习，我并没有一直跟随着上课老师的脚步去走，因为正如PYTHON的学习一般，数据库的基础学习不需要花费大量时间，主要是注重语法的调用，然后注重听上课时老师讲的一些易错的点,(ex:NULL的不同场景的表现)，进而去完善自己的学习。</li><li class="lvl-2">数据库更注重于实际应用，我在搭建博客的时候，文章归类问题便是应用数据库的相关知识，并且在做期末项目的时候，思考到了项目应该与我们所学专业相互融合，我们对基础的SQL终端进行了一些“嵌入式”的改良。</li></ul></div><ul class="lvl-0"><li class="lvl-2"><p><a href="https://github.com/jaywcjlove/mysql-tutorial/blob/master/docs/21-minutes-MySQL-basic-entry.md#%E8%A7%A6%E5%8F%91%E5%99%A8">数据库语法</a></p></li><li class="lvl-2"><p><a href="https://sqlmother.yupi.icu/#/levels">数据库语法实操</a>–<strong>已经通关</strong></p></li></ul><h1>基本操作</h1><h2 id="数据类型">数据类型</h2><h3 id="数字类型">数字类型</h3><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>INT/INTEGER</td><td>整数</td></tr><tr><td>SMALLINT</td><td>小范围整数（32位）</td></tr><tr><td>BIGINT</td><td>大范围整数（64位）</td></tr><tr><td>FLOAT</td><td>单精度浮点数</td></tr><tr><td>DOUBLE/REAL</td><td>双精度浮点数</td></tr><tr><td>DECIMAL(n, m) / NUMERIC(n, m)</td><td>精确小数，n位m位小数</td></tr></tbody></table><h3 id="字符串类型">字符串类型</h3><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>CHAR(n)</td><td>固定长度字符串</td></tr><tr><td>VARCHAR(n)</td><td>可变长度字符串</td></tr><tr><td>TEXT/ CLOB</td><td>长文本</td></tr></tbody></table><h3 id="日期时间类型">日期时间类型</h3><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>DATE</td><td>日期</td></tr><tr><td>TIME</td><td>时间</td></tr><tr><td>DATETIME</td><td>日期+时间</td></tr><tr><td>TIMESTAMP</td><td>时间戳，记录时间点</td></tr></tbody></table><h3 id="布尔以及其他类型">布尔以及其他类型</h3><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>ENUM</td><td>枚举类型（const）</td></tr><tr><td>JSON</td><td>JSON数据和事</td></tr><tr><td>UUID</td><td>通用唯一标识符</td></tr></tbody></table><h2 id="基本语法">基本语法</h2><h3 id="创建表格（CREATE-TABLE）">创建表格（CREATE TABLE）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名称 (</span><br><span class="line">  列名称<span class="number">1</span>  数据类型,</span><br><span class="line">  列名称<span class="number">2</span>  数据类型,</span><br><span class="line">  列名称<span class="number">3</span>  数据类型,</span><br><span class="line">  ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">100</span>) unsigned <span class="keyword">NOT NULL</span> AUTO_INCREMENT <span class="keyword">primary key</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">`mobile` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">`<span class="keyword">update</span>` <span class="type">timestamp</span>(<span class="number">6</span>) <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>)</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX id_user_mobile(`mobile`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>COMMENT 表示注释</p></li><li class="lvl-2"><p>UNSIGNED 是非负数</p></li><li class="lvl-2"><p>AUTO_INCREMENT  自动递增标签</p></li><li class="lvl-2"><p>DEFAULT 表示默认</p></li><li class="lvl-2"><p>NOT NULL 表示不为空</p></li><li class="lvl-2"><p>CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6)修改更新时间</p></li></ul><h3 id="删除表格">删除表格</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名称; <span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> Shippers; <span class="comment">-- 不删除表，删除表内数据</span></span><br></pre></td></tr></table></figure><h3 id="SELECT">SELECT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="comment">-- *表示所有</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列数据满足条件</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SELECT S_ID FROM Student WHERE S_ID in (1,10) and S_ID not in (5)</span></span><br><span class="line"><span class="comment">-- SELECT S_ID FROM Student WHERE S_ID in(1, 10) limit 1 只爬取一条数据</span></span><br><span class="line"><span class="comment">-- 结果数据自动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br><span class="line"><span class="comment">-- 数据分组排序统计</span></span><br><span class="line"><span class="built_in">COUNT</span>(列) 计数 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 进行分组 <span class="keyword">order</span> <span class="keyword">by</span> 排序</span><br><span class="line"><span class="keyword">SELECT</span> 列数据，<span class="built_in">COUNT</span>(列) <span class="keyword">FROM</span> 表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> tag <span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line"><span class="keyword">SELECT</span> tag</span><br></pre></td></tr></table></figure><h3 id="UPDATE">UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>，列名称<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span> <span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- update语句设置字段值为另一个结果取出来的字段</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> (<span class="keyword">SELECT</span> name <span class="keyword">from</span> user1 <span class="keyword">WHERE</span> user1 .id <span class="operator">=</span> <span class="number">1</span> )<span class="keyword">WHERE</span> id <span class="operator">=</span> (<span class="keyword">SELECT</span> id <span class="keyword">from</span> user2 <span class="keyword">WHERE</span> user2 .name<span class="operator">=</span><span class="string">&#x27;小苏&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段</span></span><br><span class="line"><span class="keyword">UPDATE</span> orders <span class="keyword">set</span> title<span class="operator">=</span><span class="string">&#x27;这里是标题&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="INSERT">INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名称(列名称，列名称) <span class="keyword">VALUES</span>(值，值)</span><br><span class="line"><span class="keyword">INSERT INTO</span> 表名称 <span class="keyword">SET</span> 列名称 <span class="operator">=</span> 值</span><br><span class="line"><span class="keyword">INSERT INTO</span> 表名称 <span class="keyword">VALUES</span>(值<span class="number">1</span>，值<span class="number">2</span>) <span class="comment">-- 按顺序插入</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> id <span class="keyword">SET</span> a <span class="operator">=</span> <span class="number">1</span>, b <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> id (a, b) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="DELETE-WHERE">DELETE + WHERE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELECT <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"><span class="keyword">SELECT</span> 列 <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 条件</span><br></pre></td></tr></table></figure><h3 id="AND，OR，NOT-IN">AND，OR，NOT,IN</h3><ul class="lvl-0"><li class="lvl-2"><p>AND 相当于&amp;运算，OR相当于｜运算，NOT相当于～运算计算和 算法中一致，先处理括号中的BOOLEAN，不做过多介绍</p></li><li class="lvl-2"><p>IN 表示在某某之中</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称, 列名称, ... <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 条件<span class="number">1</span> <span class="keyword">AND</span> 条件<span class="number">2</span> <span class="keyword">AND</span> 条件<span class="number">3</span> ...;</span><br><span class="line"><span class="keyword">SELECT</span> 列名称<span class="number">1</span>, 列名称<span class="number">2</span>, ... <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 条件<span class="number">1</span> <span class="keyword">OR</span> 条件<span class="number">2</span> <span class="keyword">OR</span> 条件<span class="number">3</span> ...;</span><br><span class="line"><span class="keyword">SELECT</span> 列名称<span class="number">1</span>, 列名称<span class="number">2</span>, ... <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> <span class="keyword">NOT</span> 条件<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY，GROUP-BY">ORDER BY，GROUP BY</h3><ul class="lvl-0"><li class="lvl-2"><p>ORDER BY是根据你选的值进行排序</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称<span class="number">1</span>, 列名称<span class="number">2</span>, ... <span class="keyword">FROM</span> 表名称 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名称<span class="number">1</span>, 列名称<span class="number">2</span>, ... <span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>GROUP BY 根据你选的值进行分组</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称(s)</span><br><span class="line"><span class="keyword">FROM</span> 表名称</span><br><span class="line"><span class="keyword">WHERE</span> 条件</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名称(s)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名称(s);</span><br></pre></td></tr></table></figure><h3 id="UNION">UNION</h3><p>合并多个SELECT语句的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表<span class="number">2</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E_name <span class="keyword">FROM</span> China <span class="keyword">UNION</span> <span class="keyword">SELECT</span> E_name <span class="keyword">FROM</span> English</span><br></pre></td></tr></table></figure><h3 id="BETWEEN，AS">BETWEEN，AS</h3><ul class="lvl-0"><li class="lvl-2"><p>BETWEEN表示在某个区间之中</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列 <span class="keyword">FROM</span> 表 <span class="keyword">BETWEEN</span> 值<span class="number">1</span> <span class="keyword">AND</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>AS为表或者列取别名（&amp; – C++中的引用）</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列 <span class="keyword">AS</span> 别名 <span class="keyword">FROM</span> 表 <span class="comment">-- 为列设置别名</span></span><br><span class="line"><span class="keyword">SELECT</span> 列 <span class="keyword">FROM</span> 表 <span class="keyword">AS</span> 别名 <span class="comment">-- 为表设置别名</span></span><br></pre></td></tr></table></figure><h3 id="JOIN">JOIN</h3><h4 id="INNER-JOIN">INNER JOIN</h4><p>返回两个表中满足条件的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>列 <span class="operator">=</span> 表<span class="number">2.</span>列</span><br></pre></td></tr></table></figure><h4 id="LEFT-JOIN">LEFT JOIN</h4><div class="success"><p><strong>注意</strong><br>即使右表中没有匹配，也会从左表返回所有满足该列的数据</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称(s)</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>列名称 <span class="operator">=</span> 表<span class="number">2.</span>列名称;</span><br></pre></td></tr></table></figure><h4 id="RIGHT-JOIN">RIGHT JOIN</h4><div class="success"><p><strong>注意</strong><br>即使左表中没有匹配，也会从右表返回所有满足该列的数据</p></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称(s)</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>列名称 <span class="operator">=</span> 表<span class="number">2.</span>列名称;</span><br></pre></td></tr></table></figure><h4 id="FULL-OUTER-JOIN">FULL OUTER JOIN</h4><p>没有匹配的也会返回该行，但是不是显示除了主键的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称(s)</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>列名称 <span class="operator">=</span> 表<span class="number">2.</span>列名称</span><br><span class="line"><span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="SQL函数">SQL函数</h2><ul class="lvl-0"><li class="lvl-2"><p>COUNT<br>用于计数</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(列名称) <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>AVG<br>取平均值</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(列名称) <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>SUM<br>求和</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(列名称) <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>MAX，MIN<br>求最大值最小值</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(列名称) <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 条件;</span><br></pre></td></tr></table></figure><h2 id="触发器">触发器</h2> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> <span class="operator">&lt;</span>触发器名称<span class="operator">&gt;</span>  </span><br><span class="line">&#123; before <span class="operator">|</span> after&#125;         <span class="comment">-- 之前或者之后出发  </span></span><br><span class="line"><span class="keyword">insert</span> <span class="operator">|</span> <span class="keyword">update</span> <span class="operator">|</span> <span class="keyword">delete</span>  <span class="comment">-- 指明了激活触发程序的语句的类型  </span></span><br><span class="line"><span class="keyword">on</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>                  <span class="comment">-- 操作哪张表  </span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span>              <span class="comment">-- 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。  </span></span><br><span class="line"><span class="operator">&lt;</span>触发器<span class="keyword">SQL</span>语句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> set_userdate BEFORE <span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">on</span> `message`</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">set</span> <span class="variable">@statu</span> <span class="operator">=</span> new.status; <span class="comment">-- 声明复制变量 statu</span></span><br><span class="line">  if <span class="variable">@statu</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span>       <span class="comment">-- 判断 statu 是否等于 0</span></span><br><span class="line">    <span class="keyword">UPDATE</span> `user_accounts` <span class="keyword">SET</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">WHERE</span> openid<span class="operator">=</span>NEW.openid;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$</span><br><span class="line">DELIMITER ; <span class="comment">-- 恢复结束符号</span></span><br></pre></td></tr></table></figure><p>OLD和NEW不区分大小写</p><ul class="lvl-0"><li class="lvl-2"><p>NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。</p></li><li class="lvl-2"><p>OLD 用OLD.col_name来引用更新前的某一行的列</p></li></ul><h2 id="索引">索引</h2><p>提高查询效率，要求索引唯一</p><h3 id="普通索引">普通索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> `表名字` <span class="keyword">ADD</span> INDEX 索引名字 ( `字段名字` )</span><br><span class="line"><span class="comment">-- 对于字段名字（表中一列数据）提供 `索引名字`作为索引</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">PRIMARY key</span> (id);</span><br></pre></td></tr></table></figure><h3 id="主键索引">主键索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">ALTER TABLE</span> `表名字` <span class="keyword">ADD</span> <span class="keyword">PRIMARY KEY</span> ( `字段名字` )</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">PRIMARY key</span> (id);</span><br></pre></td></tr></table></figure><h3 id="唯一索引">唯一索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> `表名字` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (`字段名字`)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">PRIMARY key</span> (id);</span><br></pre></td></tr></table></figure><h3 id="全文索引">全文索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER TABLE</span> `表名字` <span class="keyword">ADD</span> FULLTEXT (`字段名字`)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> FULLTEXT (description);</span><br></pre></td></tr></table></figure><h3 id="建立索引的时机">建立索引的时机</h3><ul class="lvl-0"><li class="lvl-2"><p>可以使用 <code>LIKE</code> 以通配符%和_作为开头查询时</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> username <span class="keyword">like</span><span class="string">&#x27;admin%&#x27;</span>; <span class="comment">-- 而下句就不会使用：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> Name <span class="keyword">like</span><span class="string">&#x27;%admin&#x27;</span>; <span class="comment">-- 因此，在使用LIKE时应注意以上的区别。</span></span><br></pre></td></tr></table></figure><h2 id="创建表后的修改">创建表后的修改</h2><h3 id="添加列">添加列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">add</span> 列名 列数据类型 [after 插入位置];</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在表students的最后追加列 address: </span></span><br><span class="line"><span class="keyword">alter table</span> students <span class="keyword">add</span> address <span class="type">char</span>(<span class="number">60</span>);</span><br><span class="line"><span class="comment">-- 在名为 age 的列后插入列 birthday: </span></span><br><span class="line"><span class="keyword">alter table</span> students <span class="keyword">add</span> birthday <span class="type">date</span> after age;</span><br><span class="line"><span class="comment">-- 在名为 number_people 的列后插入列 weeks: </span></span><br><span class="line"><span class="keyword">alter table</span> students <span class="keyword">add</span> <span class="keyword">column</span> `weeks` <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">not null</span> <span class="keyword">default</span> &quot;&quot; after `number_people`;</span><br></pre></td></tr></table></figure><h3 id="修改列">修改列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 change 列名称 列新名称 新数据类型;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将表 tel 列改名为 telphone: </span></span><br><span class="line"><span class="keyword">alter table</span> students change tel telphone <span class="type">char</span>(<span class="number">13</span>) <span class="keyword">default</span> &quot;-&quot;;</span><br><span class="line"><span class="comment">-- 将 name 列的数据类型改为 char(16): </span></span><br><span class="line"><span class="keyword">alter table</span> students change name name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">not null</span>;</span><br><span class="line"><span class="comment">-- 修改 COMMENT 前面必须得有类型属性</span></span><br><span class="line"><span class="keyword">alter table</span> students change name name <span class="type">char</span>(<span class="number">16</span>) COMMENT <span class="string">&#x27;这里是名字&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除列">删除列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 <span class="keyword">drop</span> 列名称;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表students中的 birthday 列: </span></span><br><span class="line"><span class="keyword">alter table</span> students <span class="keyword">drop</span> birthday;</span><br></pre></td></tr></table></figure><h3 id="重命名表">重命名表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter table</span> 表名 rename 新表名;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重命名 students 表为 workmates: </span></span><br><span class="line"><span class="keyword">alter table</span> students rename workmates;</span><br></pre></td></tr></table></figure><h3 id="清空表数据">清空表数据</h3><ul class="lvl-0"><li class="lvl-2"><p><code>DELETE:</code>1. DML语言;2. 可以回退;3. 可以有条件的删除;</p></li><li class="lvl-2"><p><code>TRUNCATE:</code>1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名; </span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> &quot;表名&quot;;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 清空表为 workmates 里面的数据，不删除表。 </span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> workmates;</span><br><span class="line"><span class="comment">-- 删除workmates表中的所有数据，且无法恢复</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> workmates;</span><br></pre></td></tr></table></figure><h3 id="删除整张表">删除整张表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 workmates 表: </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> workmates;</span><br></pre></td></tr></table></figure><h3 id="删除整个数据库">删除整个数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>操作实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 samp_db 数据库: </span></span><br><span class="line"><span class="keyword">drop</span> database samp_db;</span><br></pre></td></tr></table></figure><h1>相关数据库的扩展内容</h1><h2 id="事务与索引优化">事务与索引优化</h2><p>事务是一组数据库操作（例如插入、更新、删除），这些操作要么全部成功执行，要么全部失败回滚，确保数据一致性。事务具有 <strong>ACID</strong> 特性：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>A</strong>（Atomicity，原子性）：事务操作不可分割，要么全做，要么全不做</p></li><li class="lvl-2"><p><strong>C</strong>（Consistency，一致性）：事务完成后，数据库保持一致状态</p></li><li class="lvl-2"><p><strong>I</strong>（Isolation，隔离性）：多个事务并发执行时，互不干扰</p></li><li class="lvl-2"><p><strong>D</strong>（Durability，持久性）：事务一旦提交，数据永久保存<br><strong>索引优化</strong><br>索引是数据库中用于加速查询的特殊结构，类似于书的目录。常见的索引类型包括：</p></li><li class="lvl-2"><p><strong>B+树索引</strong>：适合范围查询和排序 （二分）</p></li><li class="lvl-2"><p><strong>哈希索引</strong>：适合精确匹配查询</p></li><li class="lvl-2"><p><strong>全文索引</strong>：用于文本搜索</p></li></ul><p><strong>操作实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行多条 SQL 操作</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> balance <span class="operator">=</span> balance <span class="operator">+</span> <span class="number">100</span> <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务（成功时）</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者回滚事务（失败时）</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为 user 表的 email 字段添加 B+树索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_email <span class="keyword">ON</span> <span class="keyword">user</span>(email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看查询计划，优化索引使用</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> email <span class="operator">=</span> <span class="string">&#x27;test@example.com&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="关系数据库范式">关系数据库范式</h2><p><strong>关系数据库范式</strong>（Normalization）是设计数据库表结构的一套规则，旨在减少数据冗余、确保数据一致性。常见的范式包括：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>第一范式（1NF）</strong>：确保表中每个字段值不可再分（原子性），且每行有唯一标识（主键）。</p></li><li class="lvl-2"><p><strong>第二范式（2NF）</strong>：在 1NF 基础上，确保非主键字段完全依赖于主键（消除部分依赖）。</p></li><li class="lvl-2"><p><strong>第三范式（3NF）</strong>：在 2NF 基础上，确保非主键字段之间没有传递依赖。</p></li><li class="lvl-2"><p><strong>反范式化</strong>：在某些场景（如高性能查询需求）下，可能有意违反范式，增加冗余以提升查询效率。</p></li><li class="lvl-2"><p><strong>操作实例</strong></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 未规范化表（违反 1NF，address 字段可再分）</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> bad_order (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="comment">-- 包含城市、街道等</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 规范化到 1NF（拆分 address）</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> good_order (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    street <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 规范化到 2NF（将客户信息单独拆出，消除部分依赖）</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> customer (</span><br><span class="line">    customer_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    customer_name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    city <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    street <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> <span class="keyword">order</span> (</span><br><span class="line">    order_id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (customer_id) <span class="keyword">REFERENCES</span> customer(customer_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><div class="warning"><p><strong>警告</strong><br>后续是想在我们的国创中设计一个应用可以需要一个前后端开发的软件，到时候会更新数据库做项目的具体细节</p></div>]]></content>
      
      
      <categories>
          
          <category> 日常学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老算法笔记</title>
      <link href="/2025/03/25/%E8%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/25/%E8%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p><strong>代码的开始，算法学习的开始</strong></p></blockquote><span id="more"></span><h1>左神课程笔记</h1><h1>前置基本问题：</h1><h2 id="1-归并分治算法">1. 归并分治算法</h2><h3 id="大范围的答案-等不等于-左边部分-右边部分-跨越左右两边的答案">大范围的答案  等不等于 左边部分 + 右边部分 + 跨越左右两边的答案</h3><p>💡考虑跨左右 <strong>有序</strong>是否能提升便捷性。</p><ul class="lvl-0"><li class="lvl-2"><p><strong>归并排序：</strong></p></li></ul><p>💡归并排序是一个稳定的排序。</p><p><strong>分成左右，merge排序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> help[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>{</span><br><span class="line">    <span class="type">int</span> i = l, j = ((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>, t1 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(i &lt;= ((l + r)&gt;&gt; <span class="number">1</span>) &amp;&amp; j &lt;= r){</span><br><span class="line">          help[t1++] = (a[i] &lt;= a[j]) ? a[i++] : a[j++];}</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= ((l + r)&gt;&gt; <span class="number">1</span>) ){. help[t1++] = a[i++];  }</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= r){. help[t1++] = a[j++];  }</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(i = r; i &gt;=l; i--){. a[i] = help[--t1];  }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">guibin</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r,<span class="type">int</span> n)</span></span>{</span><br><span class="line">     <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> ;</span><br><span class="line"> </span><br><span class="line">     <span class="built_in">guibin</span>(l, (l + r) &gt;&gt; <span class="number">1</span>, n);</span><br><span class="line">     <span class="built_in">guibin</span>(((l + r) &gt;&gt; <span class="number">1</span>)<span class="number">+1</span>, r, n);</span><br><span class="line">     <span class="built_in">merge</span>(l, r);</span><br><span class="line">}</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>归并分治</strong></p></li></ul><p>💡</p><p>归并分治是基于归并排序，在归并排序的基础上进行分 <strong>左右 + 左右中的过渡</strong>，主要是<strong>分析左右中的过渡过程是否跟左右部分的有序性相关。</strong></p><h2 id="2-随机快速排序">2. 随机快速排序</h2><p><strong>基本内容与快速排序保持一致，只是在选择pivot的时候是随机选择。</strong></p><aside>💡<p>pivot的随机选择是从概率上讲快速排序的时间复杂度降低到<strong>O(nlogn)</strong></p><p><strong>快排的重要部分是 partition函数 部分</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> nums[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span>{</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">part</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span>{</span><br><span class="line">    <span class="type">int</span>  i = l; <span class="comment">// 小于区域 a 大于区域 b</span></span><br><span class="line">    a = l, b = r;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= b){</span><br><span class="line">         <span class="keyword">if</span>(nums[i] &lt; x){</span><br><span class="line">            <span class="built_in">swap</span>(i++,a++);</span><br><span class="line">         }<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] &gt; x){</span><br><span class="line">            <span class="built_in">swap</span>(i, b--);</span><br><span class="line">         }<span class="keyword">else</span> i++;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick__sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r){</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="type">int</span> pivot = nums[l];</span><br><span class="line">    <span class="built_in">part</span>(l, r, pivot);</span><br><span class="line">    <span class="built_in">quick__sort</span>(l,a<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">quick__sort</span>(b<span class="number">+1</span>,r);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="可以用-partition-来寻找-第k大-第k小-荷兰国旗问题">可以用 partition 来寻找 第k大 第k小 (荷兰国旗问题)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> nums[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span></span>{</span><br><span class="line">    <span class="type">int</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">partition</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span></span>{</span><br><span class="line">    <span class="type">int</span> i = l;</span><br><span class="line">    a = l, b = r;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= b){</span><br><span class="line">          <span class="keyword">if</span>(nums[i] &lt; x){</span><br><span class="line">            <span class="built_in">swap</span>(i++,a++);</span><br><span class="line">          }<span class="keyword">else</span> <span class="keyword">if</span>(nums[i] &gt; x){</span><br><span class="line">            <span class="built_in">swap</span>(i, b--);</span><br><span class="line">          }<span class="keyword">else</span> i++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>, r = n; l &lt;= r;){</span><br><span class="line">        <span class="built_in">partition</span>(l, r, nums[l]);</span><br><span class="line">        <span class="keyword">if</span>(k &lt; a){</span><br><span class="line">            r = a <span class="number">-1</span>;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(k &gt; b){</span><br><span class="line">            l = b + <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            ans = nums[k];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构建前缀信息（46）">构建前缀信息（46）</h2><p>常见构建</p><ul class="lvl-0"><li class="lvl-2"><p>构建前缀信息 （<strong>最早 最晚） 出现的位置</strong></p></li></ul><ol><li class="lvl-3"><p>前缀和来 求区间和</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>sum[i] = sum[i-1] + a[i]</p></li><li class="lvl-2"><p>{l , r} → sum[r + 1] - sum[l]</p><ol start="2"><li class="lvl-6">求 区间累加和 为确定值的 最长长度（子数组个数）</li></ol></li><li class="lvl-2"><p>记录 t = sum[i] - aim 的最早出现次数（i 之前的 t 的出现个数）</p><ol start="3"><li class="lvl-5">正数 和 负数 相等的 最长数组长度</li></ol></li><li class="lvl-2"><p>正数相当于 1 负数相当于 -1 求区间为 0 1的子数组最长长度</p></li></ul><ol start="4"><li class="lvl-4"><p>区间大于 0 的最长数组长度 （值只有 -1, 1）</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>aim = sum[i] - sum[j] ≥ 0</p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox3"><label for="checkbox3"> if sum[i] &gt; 0 → ans = i</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox4"><label for="checkbox4"> if sum[i] ≤ 0 → sum[i] -1 最早出现的位置</label></p></li></ul><ol start="5"><li class="lvl-4"><p>移除最短的数组子数组长度 sum 能被 p 整数</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>与 余数相关</p></li><li class="lvl-2"><p>sum1 %  p = a  // sum2 % p = b</p></li><li class="lvl-2"><p>if(a + b % p == 0)  (sum1 + sum2) % p == 0</p></li><li class="lvl-2"><p>整体 aim = sum(总) % p → 看哪个区间的 的余数 (t + aim) % p == 0</p></li><li class="lvl-2"><p>find = (t + p - aim) % p <strong>(同余原理) → 与环也有关</strong></p></li><li class="lvl-2"></li></ul><p>💡</p><p>单调队列 和 单调栈 一样，保存着对于答案的可能性，并且从栈中弹出的时候，进行计算，不进行后续的计算，一般应用于 区间问题。</p><p><strong>核心思想 ： 越往后的 满足要求更好的选择 更好</strong></p><h2 id="单调队列">单调队列</h2><p>单调队列基本用法 → 用来维护一个<strong>窗口里面的最值（左闭右开）</strong></p><aside>💡因为从左弹出的时候，这个队列无论如何是没有过期下标的（要不一开始被最值从右边顶出去了，要不越界被左边弹出去了）<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (l = r = <span class="number">0</span>; r &lt; n; r++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>() &amp;&amp; a[r] &gt;= a[q.<span class="built_in">back</span>()])</span><br><span class="line">        {</span><br><span class="line">            q.<span class="built_in">pop_back</span>();</span><br><span class="line">        }</span><br><span class="line">        q.<span class="built_in">push_back</span>(r);</span><br><span class="line">        <span class="keyword">if</span> (q.<span class="built_in">size</span>() == limit + <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (l++ == q.<span class="built_in">front</span>())</span><br><span class="line">            {</span><br><span class="line">                q.<span class="built_in">pop_front</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></table></figure><h3 id="优先队列扩展">优先队列扩展</h3><ol><li class="lvl-3"><p>区间和 小于 定值的 最短长度</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">shortestSubarray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">   <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">   <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">sum</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">   deque&lt;<span class="type">int</span>&gt; q; <span class="comment">// 小 -&gt; 大</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">       sum[i] = sum[i<span class="number">-1</span>] + nums[i<span class="number">-1</span>];</span><br><span class="line">   }</span><br><span class="line">   <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">   q.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">       <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; sum[i] - sum[q.<span class="built_in">front</span>()] &gt;= k){</span><br><span class="line">           <span class="comment">//cout &lt;&lt; ans &lt;&lt; " " &lt;&lt; i - q.front() &lt;&lt; endl;</span></span><br><span class="line">           ans = <span class="built_in">min</span>(ans,i - q.<span class="built_in">front</span>());</span><br><span class="line">           q.<span class="built_in">pop_front</span>();</span><br><span class="line">       }           </span><br><span class="line">       <span class="keyword">while</span>(!q.<span class="built_in">empty</span>() &amp;&amp; sum[i] &lt;= sum[q.<span class="built_in">back</span>()]){</span><br><span class="line">           q.<span class="built_in">pop_back</span>();</span><br><span class="line">       }</span><br><span class="line">       q.<span class="built_in">push_back</span>(i);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> ans == INT_MAX ? <span class="number">-1</span> : ans;</span><br><span class="line">   }</span><br></pre></td></tr></table></figure><h3 id="双端队列吃药任务安排">双端队列吃药任务安排</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">int</span> n, s;</span><br><span class="line">cin &gt;&gt; n &gt;&gt;s;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i]; <span class="comment">// 人的体力</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cin &gt;&gt; b[i]; <span class="comment">// 任务的需求</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>; <span class="comment">// 最少的药丸次数</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      先看每一个的力所能及 放入队列中</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">    <span class="keyword">while</span>(p &lt; n &amp;&amp; b[p] &lt;= a[i]){</span><br><span class="line">        q.<span class="built_in">push_back</span>(b[p++]); </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(!q.<span class="built_in">empty</span>() &amp;&amp; a[i] &gt;= q.<span class="built_in">front</span>()){</span><br><span class="line">       q.<span class="built_in">pop_front</span>();</span><br><span class="line">    }<span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">while</span>(p &lt; n &amp;&amp; b[p] &lt; a[i] + s){</span><br><span class="line">            q.<span class="built_in">push_back</span>(b[p++]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">empty</span>()){</span><br><span class="line">            cout &lt;&lt; <span class="string">"can't do it"</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            ans++;</span><br><span class="line">            q.<span class="built_in">pop_back</span>(); <span class="comment">// 吃药取最大</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="单调栈">单调栈</h2><ul class="lvl-0"><li class="lvl-2"><p>基本使用方法 维护 <strong>左右侧</strong> 比 当前元素 <strong>大或者小</strong> 的最近位置</p></li></ul><aside>💡<p>构建一个 栈 → 越后出现的值 有更大的<strong>影响力</strong></p><p><strong>找出 以某个值为最值的 子数组（最长 或者 对这个子数组进行一些计算）</strong></p><p><strong>同时间维护左右的 最近的 最值</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; s; <span class="comment">// 记录下标</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &gt;= a[i]){</span><br><span class="line">        <span class="comment">// i 为右边</span></span><br><span class="line">        <span class="type">int</span> cur = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>(); <span class="comment">// 中间</span></span><br><span class="line">        <span class="type">int</span> l = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>(); <span class="comment">// 左边</span></span><br><span class="line">    }</span><br><span class="line">    s.<span class="built_in">push</span>(i);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>()){</span><br><span class="line">    <span class="type">int</span> cur = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="type">int</span> l = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>();</span><br><span class="line">    ans += (cur - l) * (n - cur) * a[cur];</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>创新 ：</p><p>求 <strong>子数组中的最小值的和</strong></p><aside>💡<p>用 单调栈 → 求出左右两边 小于(大于) 这个值的位置 → 在这个中间 i位置的值便是最值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在子数组中 cur 位置为最小 i 为 右边</span></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; s; <span class="comment">// 记录下标</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>() &amp;&amp; a[s.<span class="built_in">top</span>()] &gt;= a[i]){</span><br><span class="line">            <span class="type">int</span> cur = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>(); <span class="comment">// 中间</span></span><br><span class="line">            <span class="type">int</span> l = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>(); <span class="comment">// 左边</span></span><br><span class="line">            ans += (cur - l) * (i - cur) * a[cur];</span><br><span class="line">        }</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()){</span><br><span class="line">        <span class="type">int</span> cur = s.<span class="built_in">top</span>(); s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> l = s.<span class="built_in">empty</span>() ? <span class="number">-1</span> : s.<span class="built_in">top</span>();</span><br><span class="line">        ans += (cur - l) * (n - cur) * a[cur];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="实现最小字典序（单调栈）">实现最小字典序（单调栈）</h3><aside>💡<p>利用单调栈来维护一个从小到大的 stack</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++){</span><br><span class="line">     in[a[i] - <span class="string">'a'</span>]++;</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> stack&lt;pair&lt;<span class="type">char</span>,<span class="type">int</span>&gt;&gt; s;</span><br><span class="line"> <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(<span class="number">26</span>,<span class="literal">false</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i++){</span><br><span class="line"> <span class="keyword">if</span>(!vis[a[i] - <span class="string">'a'</span>]){</span><br><span class="line"> <span class="keyword">while</span>(!s.<span class="built_in">empty</span>() &amp;&amp; s.<span class="built_in">top</span>().first &gt; a[i] &amp;&amp; in[s.<span class="built_in">top</span>().first - <span class="string">'a'</span>] &gt;= <span class="number">1</span>){</span><br><span class="line">         vis[s.<span class="built_in">top</span>().first- <span class="string">'a'</span>] = <span class="literal">false</span>;</span><br><span class="line">         s.<span class="built_in">pop</span>();</span><br><span class="line">     }</span><br><span class="line"> vis[a[i] - <span class="string">'a'</span>] = <span class="literal">true</span>;</span><br><span class="line"> s.<span class="built_in">push</span>({a[i], i});</span><br><span class="line"> }</span><br><span class="line"> in[a[i] - <span class="string">'a'</span>]--;</span><br><span class="line"> }</span><br><span class="line"> string ans = <span class="string">""</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()){</span><br><span class="line">     ans = s.<span class="built_in">top</span>().first + ans;</span><br><span class="line">     s.<span class="built_in">pop</span>();</span><br><span class="line"> }</span><br></pre></td></tr></table></figure><h2 id="滑动窗口-双指针（视频）">滑动窗口 + 双指针（视频）</h2><h1>数据结构</h1><h2 id="前缀树（字典树）">前缀树（字典树）</h2><aside>💡<p>前缀树有点像链式前向星，是一个用静态数组来连接。</p><p><strong>重点部分</strong></p><p><strong>cnt：用序号表示连接，如果这个节点没有使用过，他把这个节点用cnt来编号，然后cur会使用它来跳转，会到达一个没有去过的层次。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>; <span class="comment">// 层次编号</span></span><br><span class="line"><span class="comment">// 插入单词</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>{</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    pass[cur]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : word) {</span><br><span class="line">        <span class="type">int</span> path = ch - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (tree[cur][path] == <span class="number">0</span>) {</span><br><span class="line">            tree[cur][path] = ++cnt;</span><br><span class="line">        }</span><br><span class="line">         cur = tree[cur][path];</span><br><span class="line">        pass[cur]++;</span><br><span class="line">    }</span><br><span class="line">    end[cur]++;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 查询前缀的数量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prefixNumber</span><span class="params">(<span class="type">const</span> string&amp; prefix)</span> </span>{</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> ch : prefix) {</span><br><span class="line">        <span class="type">int</span> path = ch - <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">if</span> (tree[cur][path] == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        cur = tree[cur][path];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pass[cur];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 删除单词</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteWord</span><span class="params">(<span class="type">const</span> string&amp; word)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">prefixNumber</span>(word) &gt; <span class="number">0</span>) {</span><br><span class="line">        <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : word) {</span><br><span class="line">            <span class="type">int</span> path = ch - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (--pass[tree[cur][path]] == <span class="number">0</span>) {</span><br><span class="line">                tree[cur][path] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            cur = tree[cur][path];</span><br><span class="line">        }</span><br><span class="line">        end[cur]--;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 清空前缀树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(tree, <span class="number">0</span>, <span class="built_in">sizeof</span>(tree));</span><br><span class="line">    <span class="built_in">memset</span>(pass, <span class="number">0</span>, <span class="built_in">sizeof</span>(pass));</span><br><span class="line">    <span class="built_in">memset</span>(end, <span class="number">0</span>, <span class="built_in">sizeof</span>(end));</span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="以下是关于-字典树-二进制运算：">以下是关于 <strong>字典树 + 二进制</strong>运算：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pass[N];</span><br><span class="line"><span class="type">int</span> End[N];</span><br><span class="line"><span class="type">int</span> tree[N][M];</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> s)</span></span>{</span><br><span class="line">     <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--){</span><br><span class="line">         <span class="type">int</span> temp = ((<span class="number">1</span> &lt;&lt; i) &amp; s) &gt;&gt;i;</span><br><span class="line">         <span class="comment">//cout &lt;&lt; temp &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">if</span>(tree[cur][temp] == <span class="number">0</span>){</span><br><span class="line">            tree[cur][temp] = ++cnt;</span><br><span class="line">        }</span><br><span class="line">        cur = tree[cur][temp];</span><br><span class="line">     }</span><br><span class="line">     <span class="comment">// 我如何取到这个二进制上面的值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exam</span><span class="params">(<span class="type">int</span> t)</span></span>{</span><br><span class="line">    <span class="type">int</span> cur = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i--){</span><br><span class="line">        <span class="type">int</span> temp = (t &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 最好 temp ^ aim == 1 aim == 1 ^ temp</span></span><br><span class="line">        <span class="type">int</span> aim = <span class="number">1</span> ^ temp;</span><br><span class="line">        <span class="keyword">if</span>(tree[cur][aim] == <span class="number">0</span>){</span><br><span class="line">           aim ^= <span class="number">1</span>; </span><br><span class="line">        }</span><br><span class="line">        Max |= ((temp ^ aim) &lt;&lt; i);</span><br><span class="line">        cur = tree[cur][aim];</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">return</span> Max;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="单调栈-单调队列">单调栈 + 单调队列</h2><p>stack<int> st 便是单调栈的形式，只是栈中的元素是单调的。</int></p><p>priority_queue<int> q 便是单调队列（优先队列）的形式，在优先队列中的元素是单调的。</int></p><h2 id="并查集（模版）">并查集（模版）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> father[N];</span><br><span class="line"><span class="comment">// 初始化并查集</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        father[i] = i;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 查找元素的根，并进行路径压缩</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> i)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (i != father[i]) {</span><br><span class="line">        father[i] = <span class="built_in">find</span>(father[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> father[i];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 判断两个元素是否属于同一个集合</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isSameSet</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 合并两个集合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unite</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">    father[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本建图方法">基本建图方法</h3><ul class="lvl-0"><li class="lvl-2"><p>vector <strong>数组建图</strong></p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;a[<span class="number">10005</span>];</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>链式前向星</strong></p></li></ul><aside>💡     **初始的 cnt 是没有使用过的    然后将这个 cnt 对应 v节点    next 表示 下一条边的编号    head[u] 节点的 头部边的编号**---<p><strong>u -&gt; new -&gt; old<br>一开始的 head[u] -&gt; old<br>现在将 head[u] -&gt; new 将 new 的 next -&gt; old</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> head[N];</span><br><span class="line"><span class="keyword">struct</span>{</span><br><span class="line">    <span class="type">int</span> to, next, w;</span><br><span class="line">}edge[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++){</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">        edge[i].next = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span>{</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 遍历方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ex</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> u ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e = head[u]; e &gt; <span class="number">0</span>; e = edge[e].next){</span><br><span class="line">        <span class="type">int</span> v = edge[e].to;</span><br><span class="line">     }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="拓扑排序">拓扑排序</h2><aside>💡 所谓的拓扑排序，其实是图论里面的一个常见手段，常用于有前后关系的节点状态问题。<p>常从 <strong>入度为0</strong> 的节点开始访问**。（与 priority_queue<int> 小根堆结合应用）**</int></p><p><em>如果无法把所有的点都删掉，说明有向图里有环</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> queue[N]; <span class="comment">// 可以用 STL 代替 （queue）</span></span><br><span class="line"><span class="type">int</span> indegree[N];</span><br></pre></td></tr></table></figure><h3 id="拓扑排序扩展知识（类似树型dp）">拓扑排序扩展知识（类似树型dp）</h3><aside>💡<p>将 上游节点的信息 → 推送到下游节点</p><h2 id="倍增算法-ST表（用于区间查询最值，gcd）-先看-基础dp">倍增算法 + ST表（用于区间查询最值，gcd）(先看 基础dp )</h2><aside>💡<p>原理：<strong>每一个数字 都能用 二进数 来表示 //  尽量逼进 目标值</strong></p><p>应用: 可重复贡献问题</p><p>前提：后面的点 跳的距离 会 大于等于 前面的点</p><p>跳跃公式：<strong>ST[ i ][ p ] = ST[ ST[ i ][ p-1 ] ][ p-1]</strong>    p → 跳 2 的 p 次方</p><p>从 <strong>大 → 小</strong> 尝试</p><p>仅需 初始化 ST[ i ][ 0 ] ，其余 可以用 跳跃公式 解决 //  从列开始填</p><aside>💡<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ST[i][p] = <span class="built_in">max</span>(ST[i][p<span class="number">-1</span>], ST[i + <span class="number">2</span> ^ p<span class="number">-1</span>][p<span class="number">-1</span>])</span><br><span class="line">ST[i][p] = <span class="built_in">min</span>(ST[i][p<span class="number">-1</span>], ST[i + <span class="number">2</span> ^ p<span class="number">-1</span>][p<span class="number">-1</span>])</span><br><span class="line">ST[i][p] = <span class="built_in">gcd</span>(ST[i][p<span class="number">-1</span>], ST[i + <span class="number">2</span> ^ p<span class="number">-1</span>][p<span class="number">-1</span>])</span><br><span class="line">     </span><br><span class="line">(i , j) -&gt; <span class="built_in">max</span>(ST[i][p], ST[j - <span class="number">2</span> ^ p + <span class="number">1</span>][p])  </span><br><span class="line">        <span class="comment">// p == log2(i - j + 1)</span></span><br></pre></td></tr></table></figure></aside><p>Max，Min的基本代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Log2[N];</span><br><span class="line"><span class="type">int</span> stmax[N][N];</span><br><span class="line"><span class="type">int</span> stmin[N][N];</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> n)</span></span>{</span><br><span class="line">    Log2[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">        Log2[i] = Log2[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        stmax[i][<span class="number">0</span>] = num[i];</span><br><span class="line">        stmin[i][<span class="number">0</span>] = num[i]; </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p = <span class="number">1</span>; p &lt;= Log2[n]; p ++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">            stmax[i][p] = <span class="built_in">max</span>(stmax[i][p<span class="number">-1</span>],stmax[i + (<span class="number">1</span> &lt;&lt; (p<span class="number">-1</span>))][ p<span class="number">-1</span> ]);</span><br><span class="line">            stmin[i][p] = <span class="built_in">min</span>(stmin[i][p<span class="number">-1</span>],stmin[i + (<span class="number">1</span> &lt;&lt; p<span class="number">-1</span>)][p<span class="number">-1</span>]); </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>扩展的可重复贡献区间问题:</p><p><strong>区间与 区间或 (两个相同的数字 与 或 不会影响结果)</strong></p><h2 id="树上问题">树上问题</h2><h3 id="树上倍增-LCA">树上倍增 + LCA</h3><ol><li class="lvl-3"><p>tarjian算法</p></li></ol><aside>💡<p>批量 离线 查询</p><p>如果访问的 ans -&gt; u 的对应节点v 访问过 ans = v 的代表节点</p><p>理解：</p><pre><code>      因为 你到这个节点的时候，对应的节点访问过了的话，那些节点是在一个集合里面的，然后 节点遍历是 属于 DFS，所以都是 分支访问，访问完这个 分支， 节点进行汇总集合。</code></pre></aside><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span></span>{</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e = head[u]; e != <span class="number">0</span>; e = ed[e].next){</span><br><span class="line">        <span class="type">int</span> v = ed[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v != f){</span><br><span class="line">            <span class="built_in">tarjan</span>(v, u);</span><br><span class="line">            father[v] = u;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e = q_head[u]; e != <span class="number">0</span>; e = que[e].next){</span><br><span class="line">        <span class="type">int</span> v = que[e].to;</span><br><span class="line">        <span class="keyword">if</span>(vis[v]){</span><br><span class="line">            ans[que[e].w] = <span class="built_in">find</span>(v);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>ST表</p></li></ol><aside>💡<p>当 Deep 深度数组 到达同一层的时候 所对应的 节点 是否相同</p><p>相同 ： LCA = Deep 小的</p><p>不相同：</p><p>再次同时间跳（only 不跳到同一节点我们才跳）</p><p>ST表实现的问题 ： 加快 Deep数组的跳跃过程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        u在下面    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>(Deep[u] &lt; Deep[v]){</span><br><span class="line">        <span class="type">int</span> t = u;</span><br><span class="line">        u = v;</span><br><span class="line">        v = t;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = power; i &gt;= <span class="number">0</span>; i--){</span><br><span class="line">        <span class="keyword">if</span>(Deep[ST[u][i]] &gt;= Deep[v]){</span><br><span class="line">            u = ST[u][i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(u == v){</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = power; i &gt;= <span class="number">0</span>; i--){</span><br><span class="line">        <span class="keyword">if</span>(ST[u][i] != ST[v][i]){</span><br><span class="line">            u = ST[u][i];</span><br><span class="line">            v = ST[v][i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ST[v][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="树的重心（有一个或者两个）">树的重心（有一个或者两个）</h3><p>树的重心的基本定义：</p><ul class="lvl-0"><li class="lvl-2"><p>最大子树的节点数 足够小</p></li><li class="lvl-2"><p>每棵子树的节点数 不超过 总节点数的一半</p></li><li class="lvl-2"><p>所有节点 汇聚到 重心的 步数最少</p></li></ul><p>补充性质：</p><ul class="lvl-0"><li class="lvl-2"><p>一棵树最多有两个重心，两个重心一定相邻</p></li><li class="lvl-2"><p>如果树上增加或者删除一个叶节点，重心最多移动一条边</p></li><li class="lvl-2"><p>将两棵树连起来，新树的重心一定在两个原来重心的连线上</p></li><li class="lvl-2"><p>如果边权为正，所有节点走向重心的 总距离和 最小</p></li></ul><ol><li class="lvl-3"><p>求法一 : 最大子树 足够小</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ans = <span class="number">0</span>, best = INT_MAX;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  重心：</span></span><br><span class="line"><span class="comment">   以当前节点为 重心，所有子树中 最大数量的子树的 数量足够小</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span></span>{</span><br><span class="line">    Size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v = head[u]; v != <span class="number">0</span>; v = edge[v].next){</span><br><span class="line">        <span class="type">int</span> e = edge[v].to;</span><br><span class="line">        <span class="keyword">if</span>(e != f){</span><br><span class="line">            <span class="built_in">dfs</span>(e,u);</span><br><span class="line">            Size[u] += Size[e];</span><br><span class="line">            mx = <span class="built_in">max</span>(mx, Size[e]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    mx = <span class="built_in">max</span>(mx, n - Size[u]);</span><br><span class="line">    <span class="keyword">if</span>(mx &lt; best || (mx  == best &amp;&amp; u &lt; ans)){</span><br><span class="line">        ans = u;</span><br><span class="line">        mx = best;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>求法二 ：每棵子树的节点数 不超过总节点的一半</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Size[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span></span>{</span><br><span class="line">    Size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> Mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e = head[u]; e != <span class="number">0</span>; e =edge[e].next){</span><br><span class="line">        <span class="type">int</span> v = edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v != f){</span><br><span class="line">            <span class="built_in">dfs</span>(v,u);</span><br><span class="line">            Size[u] += Size[v];</span><br><span class="line">            Mx = <span class="built_in">max</span>(Size[v], Mx);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Mx = <span class="built_in">max</span>(Mx, n - Size[u]);</span><br><span class="line">    <span class="keyword">if</span>(Mx &lt;= n / <span class="number">2</span>){</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>扩展： 带 点权的树 如何求重心</p><p>仅 修改一个 → Size[u] 的初始值 变成了 点权重 56分以上</p><aside>💡<p>首先：重心 是与 边权 没有关系的，所谓的点权，可以理解为一个独立的树，树中的节点数量 就是 点的权重</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Size[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="type">int</span> sum; <span class="comment">// sum 是总点权和</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span></span>{</span><br><span class="line">    Size[u] = a[u];</span><br><span class="line">    <span class="type">int</span> Mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e = head[u]; e != <span class="number">0</span>; e =edge[e].next){</span><br><span class="line">        <span class="type">int</span> v = edge[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v != f){</span><br><span class="line">            <span class="built_in">dfs</span>(v,u);</span><br><span class="line">            Size[u] += Size[v];</span><br><span class="line">            Mx = <span class="built_in">max</span>(Size[v], Mx);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    Mx = <span class="built_in">max</span>(Mx, sum - Size[u]);</span><br><span class="line">    <span class="keyword">if</span>(Mx &lt;= sum / <span class="number">2</span>){</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h3 id="树的直径">树的直径</h3><p><strong>树上的最长路径</strong></p><ul class="lvl-0"><li class="lvl-2"><p>两次 DFS（仅使用没有 负边权）</p></li></ul><aside>💡能得到路径信息1. 从根节点 找离根节点最远的点2. 在从 这个节点找离这个节点最远的点<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  法一： 两次dfs</span></span><br><span class="line"><span class="comment">  优点：能得到路径信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> start, End;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> di[N]; <span class="comment">// 记录从规定节点到 当前节点到距离</span></span><br><span class="line"><span class="type">int</span> la[N]; <span class="comment">// 记录路径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f, <span class="type">int</span> w)</span></span>{</span><br><span class="line">      la[u] = f;</span><br><span class="line">      di[u] = di[f] + w;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> e = head[u]; e != <span class="number">0</span>; e = ed[e].next){</span><br><span class="line">        <span class="type">int</span> v = ed[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v != f){</span><br><span class="line">            <span class="built_in">dfs</span>(v, u, ed[e].w);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">}</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">find_road</span><span class="params">(<span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    start = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">        <span class="keyword">if</span>(di[i] &gt; di[start]){</span><br><span class="line">            start = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">dfs</span>(start, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    End = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">        <span class="keyword">if</span>(di[i] &gt; di[End]){</span><br><span class="line">           End = i;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> {start, End};</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>树型dp</p></li></ul><aside>💡<p>只能得到 直径长度</p><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image%201.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Max_dia = INT_MIN;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> e = head[u];  e != <span class="number">0</span>; e = ed[e].next){</span><br><span class="line">        <span class="type">int</span> v = ed[e].to;</span><br><span class="line">        <span class="keyword">if</span>(v != f){</span><br><span class="line">            <span class="built_in">dp</span>(v, u);</span><br><span class="line">            Max_dia = <span class="built_in">max</span>(Max_dia, dist[u] + dist[v] + ed[e].w);</span><br><span class="line">            dist[u] = <span class="built_in">max</span>(dist[u], dist[v] + ed[e].w);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>相关结论（边权为正）</p><ol><li class="lvl-3"><p>如果有 多条直径，这多条直径一定 有一个 <strong>公共路段</strong></p></li><li class="lvl-3"><p>树上任意一点，相隔最远的点的集合，<strong>直径的两端点至少有一个在其中。</strong></p></li></ol><h3 id="树上差分">树上差分</h3><ol><li class="lvl-3"><p>点差分</p></li></ol><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image%202.png" alt="image.png"></p><aside>💡<p><strong>1.计算公式</strong> （子节点的 变化 会<strong>向上传递</strong>)</p><p>(x → y) + v</p><pre><code>x += vy += v</code></pre><p>LCA -= v</p><p>LCA_father -= v</p><p><strong>2.合并</strong></p><p>num[i] += num[所有孩子]</p></aside><ol><li class="lvl-3"><p>边差分</p></li></ol><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image%203.png" alt="image.png"></p><aside>💡<ol><li class="lvl-3"><p>计算公式</p></li></ol><p>点权变化:</p><pre><code>   (x → y) + v    x += v    y += v    LCA -=  2*v</code></pre><ol start="2"><li class="lvl-6"><p>更新权重</p></li></ol><p>num[ i → j 边] += weight[ j ]（点权）</p><p>weight[ i ] += weight[ 所有子节点 ]</p><h2 id="树状数组（视频）">树状数组（视频）</h2><p>树状数组 是 处理区间查询 的方法。</p><ul class="lvl-0"><li class="lvl-2"><p>一般处理 <strong>可差分信息 （总体 是 由部分构成的）| 下标一定从 1 开始</strong></p></li><li class="lvl-2"><p>怎么得到 最右边的 1 → i &amp; -i</p></li></ul><p><strong>常见有以下四种查询类型</strong></p><ul class="lvl-0"><li class="lvl-2"><p>单点增加 + 范围查询</p></li></ul><p>管理范围                                                     (去除最右边的 1（ lowbit(i) ） + 1， 自己)</p><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image%204.png" alt="image.png"></p><aside>💡<p>输入的时候 tree数组 用add 方法进行添加</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="comment">// 单点增加  区间查询</span></span><br><span class="line"><span class="type">int</span> n; <span class="comment">//数组长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span>{</span><br><span class="line">    <span class="comment">// 取最右边的 1</span></span><br><span class="line">    <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> w)</span></span>{</span><br><span class="line">     <span class="comment">// 下标 + 最右边的 1 的地方 + w</span></span><br><span class="line">     <span class="keyword">while</span>(i &lt;= n){</span><br><span class="line">        tree[i] += w;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">     }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 1 -- r 的范围和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> r)</span></span>{</span><br><span class="line">    <span class="comment">// sum = tree[x] 自己 然后不断去除最右边的 1</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &gt; <span class="number">0</span>){</span><br><span class="line">        ans += tree[r];</span><br><span class="line">        r -= <span class="built_in">lowbit</span>(r);</span><br><span class="line">    }               </span><br><span class="line">    <span class="keyword">return</span> ans;                                                              </span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>范围增加 + 单点查询 （改成差分数组）</p></li></ul><aside>💡<p>原数组 a[i] = sum(delat[1] + …+ delat[i])</p><p>delat[i] = a[i] - a[i - 1]</p><p>差分数组 可以 实现 原数组的 区间增减</p><p>delat[l] + w, delat[r + 1] - w.</p><blockquote><p>构建 tree数组的时候, add_sum( i , w);</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="comment">// 单点增加  区间查询</span></span><br><span class="line"><span class="type">int</span> n; <span class="comment">//数组长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span>{</span><br><span class="line">    <span class="comment">// 取最右边的 1</span></span><br><span class="line">    <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> w)</span></span>{</span><br><span class="line">     <span class="comment">// 下标 + 最右边的 1 的地方 + w</span></span><br><span class="line">     <span class="keyword">while</span>(i &lt;= n){</span><br><span class="line">        tree[i] += w;</span><br><span class="line">        i += <span class="built_in">lowbit</span>(i);</span><br><span class="line">     }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 查询 r 位置的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> r)</span></span>{</span><br><span class="line">    <span class="comment">// sum = tree[x] 自己 然后不断去除最右边的 1</span></span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &gt; <span class="number">0</span>){</span><br><span class="line">        ans += tree[r];</span><br><span class="line">        r -= <span class="built_in">lowbit</span>(r);</span><br><span class="line">    }               </span><br><span class="line">    <span class="keyword">return</span> ans;                                                              </span><br><span class="line">}</span><br><span class="line"><span class="comment">// 增加 l -&gt; r 的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_sum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="built_in">add</span>(l, w),<span class="built_in">add</span>(r + <span class="number">1</span>, -w);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>范围增加 + 范围查询</p></li></ul><aside>💡<p>sum(1 → r)</p><p>= r * Sum( delat[1 → r] ) - sum(1 → r)[(i - 1) * delat[i] ]\</p><h3 id="维护-两个差分数组-Di-（i-1-Di">维护 两个差分数组 Di  +  （i - 1) * Di</h3><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image%205.png" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">// Di</span></span><br><span class="line"><span class="type">int</span> tree1[N];</span><br><span class="line"><span class="comment">// (i - 1) * Di</span></span><br><span class="line"><span class="type">int</span> tree2[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> w)</span></span>{</span><br><span class="line">    <span class="type">int</span> t = i;</span><br><span class="line">    <span class="keyword">while</span>(t &lt;= n){</span><br><span class="line">        tree1[t] += w;</span><br><span class="line">        t += <span class="built_in">lowbit</span>(t);</span><br><span class="line">    }</span><br><span class="line">    t = i;</span><br><span class="line">    <span class="type">int</span> W = (i - <span class="number">1</span>) * w;</span><br><span class="line">    <span class="keyword">while</span>(t &lt;= n){</span><br><span class="line">        tree2[t] += W;</span><br><span class="line">        t += <span class="built_in">lowbit</span>(t);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> w)</span></span>{</span><br><span class="line">    <span class="built_in">add</span>(l, w); <span class="built_in">add</span>(r + <span class="number">1</span>, -w);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 1 -&gt; i 的和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span></span>{</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, t = i;</span><br><span class="line">    <span class="keyword">while</span>(t &gt; <span class="number">0</span>){</span><br><span class="line">        ans += (tree1[t] * i);</span><br><span class="line">        ans -= tree2[t];</span><br><span class="line">        t = t - <span class="built_in">lowbit</span>(t);</span><br><span class="line">    }  </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>二维的单点增加 + 范围查询</p></li></ul><p>要从 1 1开始</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> tree[N][M];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> i &amp; -i;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> w)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = x; i += <span class="built_in">lowbit</span>(i); i &lt;= n){</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j = y; j += <span class="built_in">lowbit</span>(j); j &lt;= m){</span><br><span class="line">        tree[i][j] += w;</span><br><span class="line">       }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 1 -&gt; x 1 -&gt; y</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>{</span><br><span class="line">     <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="built_in">lowbit</span>(i)){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = y; j &gt; <span class="number">0</span>; j-= <span class="built_in">lowbit</span>(j)){</span><br><span class="line">            ans += tree[i][j];</span><br><span class="line">        }</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>二维数组的 范围增加 + 范围查询</p></li></ul><aside>💡<p>delat[i] = a[i][j] - a[i-1][j] - a[i][j-1] + a[i-1][j-1]</p><p>a[i][j] =  (1, 1) → (i, j) 的 delat 累加和</p></aside><p><img src="%E5%B7%A6%E7%A5%9E%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%2017ae0092222580e58afce9620b5d2463/image%206.png" alt="image.png"></p><h3 id="逆序队问题">逆序队问题</h3><h2 id="线段树">线段树</h2><p>基本线段树</p><h1>动态规划（先做题目）</h1><h2 id="背包dp-（66-75）">背包dp （66 - 75）</h2><h2 id="区间dp">区间dp</h2><p>将大范围 划分为 若干个 小范围 的问题</p><aside>💡<p>可能性展开：</p><p>基于 <strong>两侧端点</strong> 讨论</p><p>基于 <strong>范围划分</strong> 讨论</p><h2 id="状态dp">状态dp</h2><p>利用 二进制 的 0 1 来表示 节点 状态</p><h2 id="树型dp">树型dp</h2><p>将 子树的 信息 返回给父亲</p><aside>💡<p>父亲节点的 ans <strong>依赖于 子树的信息</strong></p></aside><h2 id="数位dp">数位dp</h2><p>判断 <strong>数字的 可能性</strong></p><aside>💡<p>大部分都是 从左 向 右 进行尝试（线性展开）</p><h2 id="换根dp">换根dp</h2><p>将 根节点 互换，要求值的变化</p><h2 id="轮廓线dp">轮廓线dp</h2><h2 id="三进制状压dp">三进制状压dp</h2><h2 id="dp优化">dp优化</h2><h1>字符串</h1><h2 id="KMP">KMP</h2><p><strong>前缀函数</strong></p><aside>💡<p>NEXT 函数构建</p><pre><code> 前后缀 匹配长度</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Next[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(string s)</span></span>{</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    Next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>, cn = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Next[i] 表示的是 1 - i-1 的最长前后缀匹配长度</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; s.<span class="built_in">size</span>()){</span><br><span class="line">        <span class="keyword">if</span>(s[i - <span class="number">1</span>] == s[cn]){</span><br><span class="line">            Next[i++] = ++cn;</span><br><span class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(cn &gt; <span class="number">0</span>){</span><br><span class="line">            cn = Next[cn];</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            Next[i++] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></table></figure><aside>💡<p>KMP 是依靠这个 前缀函数来实现的</p><p>如果当前 的字符不匹配</p><p>需要检测的 字符，根据 NEXT 数组 向前跳转</p><h3 id="扩展-KMP-（Z数组）前缀匹配问题">扩展 KMP （Z数组）前缀匹配问题</h3><p>动态图展示 🔗：<a href="https://personal.utdallas.edu/~besp/demo/John2010/z-algorithm.htm">https://personal.utdallas.edu/~besp/demo/John2010/z-algorithm.htm</a></p><aside>💡<p><strong>Z[i] 表示 s[0 - n-1] 和 s[i - n-1] 的最长匹配长度</strong></p><p>线性加速过程：</p><pre><code>   如果在最右的最长前缀匹配区间中，会加速前缀加速匹配过程</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> z[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Z</span><span class="params">(string s)</span></span>{</span><br><span class="line">     z[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">     <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, r = <span class="number">0</span>, l = <span class="number">0</span>; i &lt; n;i++){</span><br><span class="line">         <span class="keyword">if</span>(i &lt;= r &amp;&amp; z[i - l] &lt; r - i + <span class="number">1</span>){</span><br><span class="line">            z[i] = z[i - l];</span><br><span class="line">         }<span class="keyword">else</span>{</span><br><span class="line">            z[i] = <span class="built_in">max</span>(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(i + z[i] &lt; n &amp;&amp; s[z[i]] == s[i + z[i]]) z[i]++;</span><br><span class="line">            <span class="keyword">if</span>(i + z[i] - <span class="number">1</span> &gt; r){</span><br><span class="line">                r = i + z[i] - <span class="number">1</span>;</span><br><span class="line">                l = i;</span><br><span class="line">            }</span><br><span class="line">     }</span><br><span class="line">     }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="Manacher">Manacher</h2><aside>💡<p><strong>P[i] 数组是保留了更新的数组的回文串长度</strong></p><p><strong># a # a # a #          总长度 为 2 * n + 1</strong></p><p><strong>1 2 3 4 3 2 1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e7</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> Max = <span class="number">0</span>;</span><br><span class="line"><span class="function">string <span class="title">c</span><span class="params">(string s)</span></span>{</span><br><span class="line">    string s1 = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : s){</span><br><span class="line">       s1 += x;</span><br><span class="line">       s1 += <span class="string">'#'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> s1;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manacher</span><span class="params">(string s)</span></span>{</span><br><span class="line">     <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">     <span class="type">int</span> c = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, len; i &lt; n; i++){</span><br><span class="line">        len = r &gt; i ? <span class="built_in">min</span>(p[<span class="number">2</span> * c - i], r - i) : <span class="number">1</span>; <span class="comment">// 至少的回文半径区域</span></span><br><span class="line">        <span class="keyword">while</span>(i  + len &lt; n &amp;&amp; i - len &gt;= <span class="number">0</span> &amp;&amp; s[i + len] == s[i - len] ){</span><br><span class="line">            len ++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(i + len &gt; r){</span><br><span class="line">            c = i;</span><br><span class="line">            r = i + len;</span><br><span class="line">        }</span><br><span class="line">        Max = <span class="built_in">max</span>(Max, len);</span><br><span class="line">         p[i] = len;</span><br><span class="line">     }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="AC自动机">AC自动机</h2><h2 id="字符串哈希">字符串哈希</h2><h1>数学</h1><h2 id="埃式筛">埃式筛</h2><aside>💡<p>如果这个 元素 没有访问过，便是质数，并且 <strong>这个质数的所有倍数的值 就不是质数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ehrlich</span><span class="params">(<span class="type">int</span> n)</span></span>{</span><br><span class="line">    <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(n + <span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++){</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i * i; j &lt;= n; j +=i){</span><br><span class="line">                vis[j] = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>; <span class="comment">// 质数 记数 vis 未访问过的 便是质数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++){</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]){</span><br><span class="line">            cnt ++;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        }</span><br><span class="line">    }cout &lt;&lt; endl;</span><br><span class="line">    }</span><br></pre></td></tr></table></figure><h2 id="乘法逆元">乘法逆元</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="18.415ex" height="4.613ex" role="img" focusable="false" viewBox="0 -1342 8139.6 2039"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">逆</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">元</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">含</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">义</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(5000,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5849.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(7127.6,0)"><g data-mml-node="mn" transform="translate(256,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><rect width="772" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p><strong>法一 ：扩展欧几里得 求逆元</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="function">LL <span class="title">ExGCD</span><span class="params">(LL a, LL mod, LL &amp;x, LL &amp;y)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(mod == <span class="number">0</span>){</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    }</span><br><span class="line">    LL d = <span class="built_in">ExGCD</span>(mod, a % mod, x, y), t = x;</span><br><span class="line">    x = y; y = t - a / mod * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ExGcdInv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> mod)</span></span>{</span><br><span class="line">    LL x, y;</span><br><span class="line">    <span class="built_in">ExGCD</span>(a, mod, x, y);</span><br><span class="line">    <span class="keyword">return</span> (x + mod) % mod;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>法二 ： 快速幂 求逆元</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">fastpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span></span>{</span><br><span class="line">    LL ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b){</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) ret = ret * a % mod;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"><span class="function">LL <span class="title">FermatInv</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> mod)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fastpow</span>(a, mod - <span class="number">2</span>, mod);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p><strong>法三 ： 费马小递推 求逆元</strong></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.267ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 16471.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(834,0)"></path></g><g data-mml-node="mo" transform="translate(1362,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1640,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1985,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2540.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3596.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" transform="translate(3985.6,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mo" transform="translate(6096.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7097,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" transform="translate(7486,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mo" transform="translate(9597.2,0)"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g><g data-mml-node="mi" transform="translate(10597.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10942.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11331.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11942.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mtext" transform="translate(12942.9,0)"><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(278,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(834,0)"></path></g><g data-mml-node="mo" transform="translate(14304.9,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mtext" transform="translate(14582.9,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g></g></g></svg></mjx-container></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> invList[mod+ <span class="number">10</span>];</span><br><span class="line"><span class="built_in">voidGetInv</span>(<span class="type">int</span> mod)</span><br><span class="line">{</span><br><span class="line">    invList[<span class="number">1</span>]= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">2</span>; i&lt; mod; i++)</span><br><span class="line">        invList[i]= <span class="number">1LL</span>* (mod- mod/ i)* invList[mod% i]% mod;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="容斥原理">容斥原理</h2><p><strong>奇 ➕ 偶 ➖</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="42.426ex" height="2.261ex" role="img" focusable="false" viewBox="0 -750 18752.3 999.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><text data-variant="bold" transform="scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">两</text><text data-variant="bold" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">个</text><text data-variant="bold" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">集</text><text data-variant="bold" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">合</text><text data-variant="bold" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">：</text></g><g data-mml-node="mstyle" transform="translate(5000,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mo" transform="translate(6000,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(6278,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(7250.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"></path></g><g data-mml-node="mi" transform="translate(8139.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(8898.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(9454.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(10510,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(10788,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(11538,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(12038.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(13038.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(13316.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(14075.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(14575.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mo" transform="translate(15575.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(15853.9,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(16826.1,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mi" transform="translate(17715.3,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(18474.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></p><p>$$<br>\textbf{三个集合：} \quad<br>|A \cup B \cup C| = |A| + |B| + |C|</p><ul class="lvl-0"><li class="lvl-2"><p>|A \cap B| - |A \cap C| - |B \cap C|</p></li></ul><ul class="lvl-0"><li class="lvl-2"><p>|A \cap B \cap C|<br>$$</p></li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.94ex;" xmlns="http://www.w3.org/2000/svg" width="90.249ex" height="6.889ex" role="img" focusable="false" viewBox="0 -1745.4 39890.3 3044.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="1D427" d="M40 442Q217 450 218 450H224V407L225 365Q233 378 245 391T289 422T362 448Q374 450 398 450Q428 450 448 447T491 434T529 402T551 346Q553 335 554 198V62H623V0H614Q596 3 489 3Q374 3 365 0H356V62H425V194V275Q425 348 416 373T371 399Q326 399 288 370T238 290Q236 281 235 171V62H304V0H295Q277 3 171 3Q64 3 46 0H37V62H106V210V303Q106 353 104 363T91 376Q77 380 50 380H37V442H40Z"></path><path data-c="20" d="" transform="translate(639,0)"></path><text data-variant="bold" transform="translate(889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">个</text><text data-variant="bold" transform="translate(1889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">集</text><text data-variant="bold" transform="translate(2889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">合</text><text data-variant="bold" transform="translate(3889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">的</text><text data-variant="bold" transform="translate(4889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">情</text><text data-variant="bold" transform="translate(5889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">况</text><text data-variant="bold" transform="translate(6889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">（</text><text data-variant="bold" transform="translate(7889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">容</text><text data-variant="bold" transform="translate(8889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">斥</text><text data-variant="bold" transform="translate(9889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">原</text><text data-variant="bold" transform="translate(10889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">理</text><text data-variant="bold" transform="translate(11889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">）</text><text data-variant="bold" transform="translate(12889,0) scale(1,-1)" font-size="884px" font-family="serif" font-weight="bold">：</text></g><g data-mml-node="mstyle" transform="translate(13889,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mrow" transform="translate(15055.7,0)"><g data-mml-node="mo"><svg width="278" height="2990.8" y="-1245.4" x="27.5" viewBox="0 -370.5 278 2990.8"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,4.491)"></path></svg></g><g data-mml-node="munderover" transform="translate(333,0)"><g data-mml-node="mo" transform="translate(18.3,0) translate(0 -0.5)"><path data-c="22C3" d="M56 911Q58 926 71 938T103 950Q120 950 134 939T152 911Q153 907 153 463Q153 16 154 6Q165 -143 279 -247T556 -352Q716 -352 830 -248T956 6Q957 16 957 463Q957 907 958 911Q962 928 975 939T1006 950T1037 939T1054 911Q1055 906 1055 451Q1054 -5 1053 -16Q1029 -207 889 -328T555 -449Q363 -449 226 -331T62 -45Q57 -16 57 25T55 451Q55 906 56 911Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1087.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(361.7,1149.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="msub" transform="translate(1647.3,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(783,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2724.3,0)"><svg width="278" height="2990.8" y="-1245.4" x="27.5" viewBox="0 -370.5 278 2990.8"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,4.491)"></path></svg></g></g><g data-mml-node="mo" transform="translate(18390.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(19446.5,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(86,-1107.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(20890.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(21279.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(22057.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(22557.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="munder" transform="translate(24468.2,0)"><g data-mml-node="mo" transform="translate(2290.8,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(1278,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(378,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(2059.6,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msub" transform="translate(2837.6,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(378,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3619.1,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mo" transform="translate(4397.1,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(5569.1,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msub" transform="translate(6347.1,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(7143.5,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(7921.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(30660.5,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(378,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1885.9,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="msub" transform="translate(2775.1,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(378,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(4383,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="mo" transform="translate(5272.2,0)"><path data-c="22EF" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250ZM525 250Q525 274 542 292T585 310Q609 310 627 294T646 251Q646 226 629 208T586 190T543 207T525 250ZM972 250Q972 274 989 292T1032 310Q1056 310 1074 294T1093 251Q1093 226 1076 208T1033 190T990 207T972 250Z"></path></g><g data-mml-node="mo" transform="translate(6666.4,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"></path></g><g data-mml-node="msub" transform="translate(7555.6,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" transform="translate(783,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(8951.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></g></svg></mjx-container></p><p>相关题目：</p><ul class="lvl-0"><li class="lvl-2"><p>计算区间 [1,n] 内不被给定质数整除的整数个数</p></li></ul><aside>💡<p>因为 需要随机选 a0 → an 中的任意几个数的组合，所以用 <strong>二进制的形式</strong> 来计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> a / __gcd(a, b) * b;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="type">int</span> k, n;</span><br><span class="line">    cin &gt;&gt; k &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(k)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x : a){</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">    }</span><br><span class="line">    LL t = <span class="number">1</span> &lt;&lt; k; </span><br><span class="line">    LL result = <span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++){</span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, bits = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++){</span><br><span class="line">           <span class="keyword">if</span>(i &amp; (<span class="number">1</span> &lt;&lt; j)){</span><br><span class="line">             bits++;</span><br><span class="line">             <span class="keyword">if</span>(l &gt; n / a[i]){</span><br><span class="line">                l = n + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 相当于 没必要进行后续计算 因为 n / l == 0</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             }</span><br><span class="line">             l = <span class="built_in">lcm</span>(l, a[i]);</span><br><span class="line">           }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(bits % <span class="number">2</span>) result += n / l;</span><br><span class="line">        <span class="keyword">else</span> result -= n / l;</span><br><span class="line">    }</span><br><span class="line">    cout &lt;&lt; n - result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>计算非互质整数对的个数</p></li><li class="lvl-2"><p>计算符合排列条件的方案数（n！的排列中，至少有 k 个字符 在原位上的 个数）</p></li></ul><h2 id="快速幂">快速幂</h2><ul class="lvl-0"><li class="lvl-2"><p>基本快速幂</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function">LL <span class="title">fastpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>{</span><br><span class="line">    LL ant = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b){</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>){</span><br><span class="line">            ant = ant * a %mod;</span><br><span class="line">        }</span><br><span class="line">        a = a * a %mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ant % mod;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>矩阵快速幂</p></li></ul><aside>💡<p>矩阵快速幂 常用于 DP（固定线性递归）问题</p><ol><li class="lvl-3"><p><strong>一维 k阶</strong>（k 个式子） <strong>时间复杂度 ：O(logn * 2^k)</strong></p></li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="49.088ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 21696.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1539,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2205.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3261.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(4131.1,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4681.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5070.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5892.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6892.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7392.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8003.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9004,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(9873.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(10423.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10812.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11634.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(12635,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(13135,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13746.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(14746.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(16140.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(17140.9,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(18025.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(18575.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(18964.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(19786.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(20786.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(21307.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><ol><li class="lvl-3"><p><strong>k维一阶</strong></p></li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.258ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 6744 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D417" d="M327 0Q306 3 174 3Q52 3 43 0H33V62H98L162 63L360 333L157 624H48V686H59Q80 683 217 683Q368 683 395 686H408V624H335L393 540L452 458L573 623Q573 624 528 624H483V686H494Q515 683 646 683Q769 683 778 686H787V624H658L575 511Q493 398 493 397L508 376Q522 356 553 312T611 229L727 62H835V0H824Q803 3 667 3Q516 3 489 0H476V62H513L549 63L401 274L247 63Q247 62 292 62H338V0H327Z"></path></g></g><g data-mml-node="mi" transform="translate(869,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1746.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2802.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3552.6,0)"><g data-mml-node="mi"><path data-c="1D417" d="M327 0Q306 3 174 3Q52 3 43 0H33V62H98L162 63L360 333L157 624H48V686H59Q80 683 217 683Q368 683 395 686H408V624H335L393 540L452 458L573 623Q573 624 528 624H483V686H494Q515 683 646 683Q769 683 778 686H787V624H658L575 511Q493 398 493 397L508 376Q522 356 553 312T611 229L727 62H835V0H824Q803 3 667 3Q516 3 489 0H476V62H513L549 63L401 274L247 63Q247 62 292 62H338V0H327Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4421.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></p><aside>💡<p>相当于 第 i 位置的 ans 需要第 i-1 位置的 ans（可能是二维的，以为着需要 i-1 位置的多个答案）</p><h3 id="矩阵快速幂的基本伪代码">矩阵快速幂的基本伪代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">multiply</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; a, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; b){</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> m = b[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> k = a[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m));</span><br><span class="line">    <span class="comment">// ans[i][j] == a的 第i行 * b的 第j列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++){</span><br><span class="line">            <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt; k; t++){</span><br><span class="line">                ans[i][j] +=a[i][t] * b[t][j];</span><br><span class="line">            }</span><br><span class="line">         </span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">power</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; a, <span class="type">int</span> t){</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t){</span><br><span class="line">        <span class="keyword">if</span>(t &amp; <span class="number">1</span>) ans = <span class="built_in">multiply</span>(ans, a);</span><br><span class="line">        a = <span class="built_in">multiply</span>(a, a);</span><br><span class="line">        t &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="矩阵快速幂的使用">矩阵快速幂的使用</h3><p><strong>怎么求关系矩阵</strong></p><ol><li class="lvl-3"><p>一维 k 阶</p></li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="49.088ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 21696.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1539,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2205.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(3261.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(4131.1,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4681.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5070.1,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5892.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(6892.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(7392.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8003.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(9004,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(9873.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(10423.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10812.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11634.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(12635,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(13135,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13746.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(14746.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(16140.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(17140.9,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mi" transform="translate(18025.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(18575.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(18964.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(19786.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(20786.7,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(21307.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>$$<br>V_n =<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.521ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15700.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mtable" transform="translate(278,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1539,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mtd" transform="translate(2928,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1761.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2761.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3261.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mtd" transform="translate(7578.4,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(9750.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1761.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2761.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3504.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4504.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(5004.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(15422.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></svg></mjx-container></p><p>矩阵递推关系：<br>V_n = V_{n-1} \times T{\prime}<br>$$</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="117.895ex" height="4.07ex" role="img" focusable="false" viewBox="0 -1149.5 52109.6 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">关</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">系</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">矩</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">阵</text></g><g data-mml-node="mi" transform="translate(4000,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4704,0)"><g data-mml-node="mi"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(5256.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(6312.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"></path></g><g data-mml-node="mtable" transform="translate(472,0)"><g data-mml-node="mtr" transform="translate(0,-385)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(1869.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(3369.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(4869.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(6369.6,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(8541.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(750,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(11161.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(12661.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(14161.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(15661.1,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(17833.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(750,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(20452.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(21952.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(23452.7,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(24952.7,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(27124.7,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(750,0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(29152.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(30430.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(31708.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(32986.7,0)"><g data-mml-node="mo"><path data-c="22F1" d="M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z"></path></g></g><g data-mml-node="mtd" transform="translate(35268.7,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(528,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(37681.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(39181.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(40681.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mtd" transform="translate(42181.1,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(44353.1,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(45325.1,0) translate(0 -0.5)"><path data-c="5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"></path></g></g></g></g></svg></mjx-container></p><ol><li class="lvl-3"><p>k维 一阶</p></li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="18.024ex" height="1.805ex" role="img" focusable="false" viewBox="0 -716 7966.4 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D417" d="M327 0Q306 3 174 3Q52 3 43 0H33V62H98L162 63L360 333L157 624H48V686H59Q80 683 217 683Q368 683 395 686H408V624H335L393 540L452 458L573 623Q573 624 528 624H483V686H494Q515 683 646 683Q769 683 778 686H787V624H658L575 511Q493 398 493 397L508 376Q522 356 553 312T611 229L727 62H835V0H824Q803 3 667 3Q516 3 489 0H476V62H513L549 63L401 274L247 63Q247 62 292 62H338V0H327Z"></path></g></g><g data-mml-node="mi" transform="translate(869,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1746.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2802.6,0)"><g data-mml-node="mi"><path data-c="1D417" d="M327 0Q306 3 174 3Q52 3 43 0H33V62H98L162 63L360 333L157 624H48V686H59Q80 683 217 683Q368 683 395 686H408V624H335L393 540L452 458L573 623Q573 624 528 624H483V686H494Q515 683 646 683Q769 683 778 686H787V624H658L575 511Q493 398 493 397L508 376Q522 356 553 312T611 229L727 62H835V0H824Q803 3 667 3Q516 3 489 0H476V62H513L549 63L401 274L247 63Q247 62 292 62H338V0H327Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3671.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(6216.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(7216.4,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="40.98ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 18113 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">状</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">态</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="msub" transform="translate(5000,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D417" d="M327 0Q306 3 174 3Q52 3 43 0H33V62H98L162 63L360 333L157 624H48V686H59Q80 683 217 683Q368 683 395 686H408V624H335L393 540L452 458L573 623Q573 624 528 624H483V686H494Q515 683 646 683Q769 683 778 686H787V624H658L575 511Q493 398 493 397L508 376Q522 356 553 312T611 229L727 62H835V0H824Q803 3 667 3Q516 3 489 0H476V62H513L549 63L401 274L247 63Q247 62 292 62H338V0H327Z"></path></g></g><g data-mml-node="mi" transform="translate(902,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6654,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(7709.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(7987.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(8996.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9385.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9985.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10374.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(10819,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(11827.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(12216.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(12816.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13205.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(13650.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(14988.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(15433.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(16457,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(16846,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(17446,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17835,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p><p>$$<br>x_1(n) = c_1 x_1(n-1) + c_2 x_2(n-1) + \dots + c_k x_k(n-1)\<br>x_2(n) = d_1 x_1(n-1) + d_2 x_2(n-1) + \dots + d_k x_k(n-1)\</p><p>x_3(n) = e_1 x_1(n-1) + e_2 x_2(n-1) + \dots + e_k x_k(n-1)</p><p><span>\</span>dots\</p><p>x_k(n) = f_1 x_1(n-1) + f_2 x_2(n-1) + \dots + f_k x_k(n-1)<br>$$</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.469ex;" xmlns="http://www.w3.org/2000/svg" width="103.597ex" height="4.07ex" role="img" focusable="false" viewBox="0 -1149.5 45789.8 1799"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(2083.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M224 -649V1150H455V1099H275V-598H455V-649H224Z"></path></g><g data-mml-node="mtable" transform="translate(472,0)"><g data-mml-node="mtr" transform="translate(0,-385)"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(1869.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3826.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mn" transform="translate(499,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(5728.7,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(7900.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtext" transform="translate(926.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(1176.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(10946.8,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(12903.3,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mn" transform="translate(499,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(14805.9,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(16977.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtext" transform="translate(926.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(1176.6,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mn" transform="translate(466,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(20024,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(21980.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mn" transform="translate(499,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(23883.1,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(26055.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtext" transform="translate(926.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1176.6,0)"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(28509.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(29787.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(31065.6,0)"><g data-mml-node="mo"><path data-c="22F1" d="M133 760Q133 784 150 802T193 820Q217 820 235 804T254 761Q254 736 237 718T194 700T151 717T133 760ZM580 460Q580 484 597 502T640 520Q664 520 682 504T701 461Q701 436 684 418T641 400T598 417T580 460ZM1027 160Q1027 184 1044 202T1087 220Q1111 220 1129 204T1148 161Q1148 136 1131 118T1088 100T1045 117T1027 160Z"></path></g></g><g data-mml-node="mtd" transform="translate(33347.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="22EE" d="M78 30Q78 54 95 72T138 90Q162 90 180 74T199 31Q199 6 182 -12T139 -30T96 -13T78 30ZM78 440Q78 464 95 482T138 500Q162 500 180 484T199 441Q199 416 182 398T139 380T96 397T78 440ZM78 840Q78 864 95 882T138 900Q162 900 180 884T199 841Q199 816 182 798T139 780T96 797T78 840Z"></path></g></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msub" transform="translate(528,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(35760,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(37731.4,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(39648.8,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(41820.8,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(43234.3,0) translate(0 -0.5)"><path data-c="5D" d="M16 1099V1150H247V-649H16V-598H196V1099H16Z"></path></g></g></g></g></svg></mjx-container></p></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside></aside>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热爱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客！新的世界！</title>
      <link href="/2025/03/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AB%AF/"/>
      <url>/2025/03/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p><strong>这是第一篇标记，也是 一个博客的开端。</strong></p></blockquote><span id="more"></span><p>hello world</p><p><img src="https://dns.whalefall.fun/121.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坚持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PYTHON 算法学习</title>
      <link href="/2025/03/24/PYTHON%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/24/PYTHON%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<blockquote class="alert alert-note"><p><strong>14天 PY 成神计划</strong></p></blockquote><span id="more"></span><div class="warning"><p><strong>OVER</strong><br>学习结束！可能以后都不会用PYTHON写算法题目了，因为PYTHON的一些算法语法基础不牢固导致一道题看了2个小时！</p></div><table><thead><tr><th>时间</th><th>题目链接</th><th>完成情况</th></tr></thead><tbody><tr><td>3.29</td><td><a href="https://ac.nowcoder.com/acm/contest/106557">比赛链接：https://www.nowcoder.com/acm/contest/106557</a></td><td>百分之50</td></tr><tr><td>3.30</td><td><a href="https://ac.nowcoder.com/acm/contest/106558">比赛链接：https://www.nowcoder.com/acm/contest/106558</a></td><td></td></tr><tr><td>3.31</td><td><a href="https://ac.nowcoder.com/acm/contest/106559">比赛链接：https://www.nowcoder.com/acm/contest/106559</a></td><td></td></tr><tr><td>4.1</td><td><a href="https://ac.nowcoder.com/acm/contest/106560">比赛链接：https://www.nowcoder.com/acm/contest/106560</a></td><td></td></tr><tr><td>4.2</td><td><a href="https://ac.nowcoder.com/acm/contest/106562">比赛链接：https://www.nowcoder.com/acm/contest/106562</a></td><td>优先队列 + 并查集</td></tr><tr><td>4.3</td><td><a href="https://ac.nowcoder.com/acm/contest/106563">比赛链接：https://www.nowcoder.com/acm/contest/106563</a></td><td>搜索 + 剪枝</td></tr><tr><td>4.4</td><td><a href="https://ac.nowcoder.com/acm/contest/106564">比赛链接：https://www.nowcoder.com/acm/contest/106564</a></td><td>动态规划1</td></tr><tr><td>4.5</td><td><a href="https://ac.nowcoder.com/acm/contest/106565">比赛链接：https://www.nowcoder.com/acm/contest/106565</a></td><td>动态规划2</td></tr><tr><td>4.6</td><td><a href="https://ac.nowcoder.com/acm/contest/106566">比赛链接：https://www.nowcoder.com/acm/contest/106566</a></td><td>图论 + 最短路</td></tr><tr><td>4.7</td><td><a href="https://ac.nowcoder.com/acm/contest/106567">比赛链接：https://www.nowcoder.com/acm/contest/106567</a></td><td>数学</td></tr><tr><td>4.8</td><td><a href="https://ac.nowcoder.com/acm/contest/106568">比赛链接：https://www.nowcoder.com/acm/contest/106568</a></td><td>线段树 + 树状数组</td></tr><tr><td>4.9</td><td><a href="https://ac.nowcoder.com/acm/contest/106569">比赛链接：https://www.nowcoder.com/acm/contest/106569</a></td><td>LCA + RMQ</td></tr><tr><td>4.10</td><td></td><td></td></tr><tr><td>4.11</td><td></td><td></td></tr><tr><td>4.12</td><td>蓝桥杯</td><td></td></tr></tbody></table><h1>知识点完成情况</h1><table><thead><tr><th>待办</th><th></th><th></th></tr></thead><tbody><tr><td>数学</td><td></td><td></td></tr><tr><td>LCA + RMQ树上问题</td><td></td><td></td></tr></tbody></table><hr><h1>PY 笔记</h1><h2 id="递归">递归</h2><blockquote><p><strong>先递归的后算</strong>，递归的特性是 自下而上</p></blockquote><figure class="highlight python"><figcaption><span>fold title:递归</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="keyword">if</span> exam():</span><br><span class="line">       <span class="keyword">return</span> </span><br><span class="line">   <span class="keyword">return</span> fun(min_x)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DFS-和-BFS-的实现">DFS 和 BFS 的实现</h3><blockquote><p>DFS 是属于 递归迭代 的算法过程， BFS 是属于 层次扩展（队列完成）</p><p>因为有时候<strong>DFS</strong>的时间复杂度是 2 的n次方，所以如果层次足够少的话，便可以使用BFS来实现</p></blockquote><h2 id="PY中的DP-缓存">PY中的DP 缓存</h2><figure class="highlight python"><figcaption><span>fold title:DP缓存</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp = &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PY-内置函数">PY 内置函数</h2><figure class="highlight python"><figcaption><span>fold title:内置函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 快速幂</span><br><span class="line"><span class="built_in">pow</span>(a,b,mod)</span><br><span class="line"><span class="built_in">pow</span>(a,b)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> gcd（最大公约数）</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.gcd(a,b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">a, b</span>):</span><br><span class="line"><span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">return</span> gcd(b, a % b)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 找满足值</span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>) <span class="keyword">if</span> <span class="keyword">not</span> fa[i])</span><br></pre></td></tr></table></figure><h2 id="Deque-队列">Deque(队列)</h2><figure class="highlight python"><figcaption><span>fold title:队列基本操作</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">origin = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">q = deque([origin]) <span class="comment"># 需要列表存入</span></span><br><span class="line"></span><br><span class="line">x1, x2 = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">q.append(x1)</span><br><span class="line">q.appendleft(x2)</span><br><span class="line"></span><br><span class="line">x = q.popleft()</span><br><span class="line">y = q.pop()</span><br><span class="line"><span class="built_in">print</span>(q[<span class="number">0</span>],q[-<span class="number">1</span>],x,y,<span class="built_in">len</span>(q))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> q:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;YES&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序算法">排序算法</h2><h3 id="基础排序">基础排序</h3><figure class="highlight python"><figcaption><span>fold title:结构体排序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nums.sort(key=())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b,c</span>):</span><br><span class="line"><span class="variable language_">self</span>.a = a</span><br><span class="line"><span class="variable language_">self</span>.b = b</span><br><span class="line"><span class="variable language_">self</span>.c = c</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> <span class="string">f&#x27;(<span class="subst">&#123;self.a&#125;</span>, <span class="subst">&#123;self.b&#125;</span>, <span class="subst">&#123;self.c&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line">t = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nodes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">a, b, c = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">nodes.append(Node(a,b,c))</span><br><span class="line"></span><br><span class="line">nodes = <span class="built_in">sorted</span>(nodes, key = <span class="keyword">lambda</span> x : (x.a, -x.b,x.c))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基数排序（基于每一位的大小排序）">基数排序（基于每一位的大小排序）</h3><h4 id="归并排序">归并排序</h4><figure class="highlight python"><figcaption><span>fold title:归并算法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guibing</span>(<span class="params">arr</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">mid = (<span class="built_in">len</span>(arr)) // <span class="number">1</span></span><br><span class="line">left = guibing(arr[:mid])</span><br><span class="line">right = guibing(arr[mid:])</span><br><span class="line"><span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">left ,right</span>):</span><br><span class="line">ans = []</span><br><span class="line">i = j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right)):</span><br><span class="line"><span class="keyword">if</span>(left[i] &lt; right[j]):</span><br><span class="line">ans.append(left[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ans.appemd(right[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">ans.extend(left[i:])</span><br><span class="line">ans.extend(right[j:])</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="归并排序-求-逆序队">归并排序 求 逆序队</h4><figure class="highlight python"><figcaption><span>fold title:逆序队</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">left, right</span>):</span><br><span class="line"><span class="keyword">global</span> count</span><br><span class="line">ans = []</span><br><span class="line">i = j = <span class="number">0</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line"><span class="keyword">if</span>(left[i] &lt;= right[j]): <span class="comment"># 一定要 = </span></span><br><span class="line">ans.append(left[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ans.append(right[j])</span><br><span class="line">count += (<span class="built_in">len</span>(left) - i)</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">ans.extend(left[i:])</span><br><span class="line">ans.extend(right[j:])</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">arr</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">mid = <span class="built_in">len</span>(arr) // <span class="number">2</span></span><br><span class="line">left = f(arr[:mid])</span><br><span class="line">right = f(arr[mid:])</span><br><span class="line"><span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="快排">快排</h4><ul class="lvl-0"><li class="lvl-2"><p>理解 第一种快排的排序方法</p></li></ul><figure class="highlight python"><figcaption><span>fold title:C++版本</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">l, r,arr</span>):</span><br><span class="line"><span class="keyword">if</span> l &gt;= r:</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">i ,j = l, r</span><br><span class="line">x = arr[l]</span><br><span class="line"><span class="keyword">while</span> i &lt; j:</span><br><span class="line"><span class="keyword">while</span> i &lt; j <span class="keyword">and</span> arr[j] &gt;= x:</span><br><span class="line">j -= <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; j <span class="keyword">and</span> arr[i] &lt;= x:</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &lt; j:</span><br><span class="line">arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line"></span><br><span class="line">arr[l], arr[i] = arr[i], arr[l]</span><br><span class="line">quick_sort(l, i - <span class="number">1</span>, arr)</span><br><span class="line">quick_sort(i + <span class="number">1</span>, r, arr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>fold title:PY版本</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort1</span>(<span class="params">arr</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt;= <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">povit = arr[<span class="number">0</span>]</span><br><span class="line">left = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= povit]</span><br><span class="line">right = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; povit]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> quick_sort1(left) + [povit] + quick_sort1(right) </span><br></pre></td></tr></table></figure><h2 id="建树">建树</h2><figure class="highlight python"><figcaption><span>fold title:vector 建树</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 有权</span><br><span class="line">dj = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">dj[a].append((b,w))</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 无权</span><br><span class="line">dj[a].append(b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分查找">二分查找</h2><p>C++</p><ul class="lvl-0"><li class="lvl-2"><p>lower_bound() 查找可插入元素的最小位置</p></li><li class="lvl-2"><p>upper_bound() 查找可插入元素的最大位置</p></li><li class="lvl-2"><p>binary_bound() 查找元素是否存在</p></li></ul><p>PY</p><figure class="highlight python"><figcaption><span>fold title:bisect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">bisect.bisect_left() <span class="comment"># 靠左 &gt;= 严格大于等于</span></span><br><span class="line">bisect.bisect_right() <span class="comment"># 靠右 &gt; 严格大于</span></span><br><span class="line"><span class="comment"># 从 lo -&gt; hi</span></span><br><span class="line"> x = bisect.bisect_right(a, need, lo=<span class="number">1</span>, hi=i) </span><br></pre></td></tr></table></figure><h2 id="三分">三分</h2><blockquote><p>三分用来求<strong>函数极值</strong></p><p>一般 有 先增后减，先减后增 的特性</p></blockquote><p><strong>三分模版</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> l &lt; r:</span><br><span class="line">       mid1 = l + (r - l) // <span class="number">3</span></span><br><span class="line">       mid2 = r - (r - l) // <span class="number">3</span></span><br><span class="line">       <span class="keyword">if</span> f(mid1) &gt; f(mid2):</span><br><span class="line">           r = mid2 - <span class="number">1</span></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           l = mid1 + <span class="number">1</span></span><br><span class="line">   <span class="built_in">print</span>(f(l))</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>常考<strong>三分嵌套</strong>问题</p><ol><li class="lvl-5"><p>最小圆覆盖问题</p><p>🔗：<a href="https://ac.nowcoder.com/acm/contest/106559/1009">https://ac.nowcoder.com/acm/contest/106559/1009</a></p></li></ol></li></ul><h2 id="分治常见题目">分治常见题目</h2><h4 id="解决最近曼哈顿距离">解决最近曼哈顿距离</h4><h2 id="优先队列-heapq">优先队列 heapq</h2><blockquote><p>heapq是 默认为 <strong>小根堆</strong><br>需要用大根堆的话可以 可以用 值 * -1来存储</p></blockquote><p>当 a 初始化 为heapq后, 优先队列的长度 和 是否为空的判断都是 判断 <strong>a 这个列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">a = []</span><br><span class="line"><span class="comment"># 插入</span></span><br><span class="line">heapq.heappush(a, item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 弹出</span></span><br><span class="line">heapq.heappop(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为空 或者 长度 以 a 为判断</span></span><br><span class="line"><span class="built_in">len</span>(a)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要将 list(a) 直接变成 优先队列</span></span><br><span class="line">heapq.heapify(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取 前 n 大 用队列存</span></span><br><span class="line">heapq.nlargest(n, a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取 钱前 n 小 用队列存</span></span><br><span class="line">heapq.nsmallest(n, a)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优先队列-自定义排序结构">优先队列 自定义排序结构</h3><figure class="highlight python"><figcaption><span>fold title:自定义排序结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">heapq.heappush(a, (-item[<span class="number">0</span>], item[<span class="number">1</span>], item[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><h3 id="优先队列相关问题">优先队列相关问题</h3><ul class="lvl-0"><li class="lvl-2"><p>中位数问题：</p><blockquote><p>一个小根堆，一个大根队来维护中位数</p></blockquote></li><li class="lvl-2"><p>前 k 大问题</p><blockquote><p>一个 <strong>长度为 k</strong>  小根堆来维护</p></blockquote></li></ul><h2 id="Python-的输入处理">Python 的输入处理</h2><figure class="highlight python"><figcaption><span>fold title:快读</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">input</span> = sys.stdin.readline</span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>单个读取：n = int(input())</p></li><li class="lvl-3"><p>一行读取：a = list(map(int, input().split()))</p></li><li class="lvl-3"><p>多行读取 每行一个元素：nums = [int(input()) for _ in range(n)]</p></li><li class="lvl-3"><p>多行读取 每行多个元素：nums = [list(map(int, input().split())) for _ in range(n)]</p></li></ol><h3 id="Python-的输出处理">Python 的输出处理</h3><ul class="lvl-0"><li class="lvl-2"><p>将字符串连接:</p><ul class="lvl-2"><li class="lvl-4"><strong>‘m’.join(list)</strong>：将列表中的字符串用m连接起来</li></ul></li><li class="lvl-2"><p>将列表中的元素先转化为 字符串再输出：</p><ul class="lvl-2"><li class="lvl-4"><strong>‘m’.join(map(str, list))</strong><ul class="lvl-4"><li class="lvl-6">map的意思是将list中的每一个元素都转化为字符</li></ul></li></ul></li><li class="lvl-2"><p>格式化输出：</p><ul class="lvl-2"><li class="lvl-4">print(f “{x : .2f}”) 保留两位小数</li><li class="lvl-4">print(f&quot;{name} got {score} points.&quot;)</li><li class="lvl-4">print(x, end = ’ ')</li></ul></li></ul><h2 id="多组测试">多组测试</h2><figure class="highlight python"><figcaption><span>fold title:多组测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:            </span><br><span class="line">    <span class="keyword">except</span> EOFError:  <span class="comment"># 输入结束时退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:  <span class="comment"># 无效输入时退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="字典的操作">字典的操作</h2><ul class="lvl-0"><li class="lvl-2"><p>基础map</p></li></ul><figure class="highlight python"><figcaption><span>fold title:ma</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mp = &#123;&#125;</span><br><span class="line"><span class="comment"># 防止访问没有存在的字典，如果不存在 就返回 k</span></span><br><span class="line">mp.get(a[r], k)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>更方便的map</p></li></ul><figure class="highlight python"><figcaption><span>fold title:MAP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># 可以避免访问不存在的字典出现报错</span></span><br><span class="line">mp = defaultdict(<span class="built_in">int</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><strong>MAP去重离散化</strong></p></li></ul><figure class="highlight python"><figcaption><span>fold title:离散化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排序 + 去重</span></span><br><span class="line"><span class="built_in">sorted</span>(<span class="built_in">set</span>(arr))</span><br><span class="line"><span class="comment"># enumerate 返回的是 (index, vavlue)</span></span><br><span class="line"><span class="comment"># 现在需要的是 key : index</span></span><br><span class="line"><span class="comment"># 所以需要 将 i, x 反转</span></span><br><span class="line">mp = &#123;x : i <span class="keyword">for</span> i , x <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">sorted</span>(<span class="built_in">set</span>(arr)))&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="栈和队列">栈和队列</h2><blockquote><p>在 PY 中， 栈和队列都可以使用 deque(双端队列)来实现</p></blockquote><h3 id="栈">栈</h3><figure class="highlight python"><figcaption><span>fold title:栈</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">stack = deque()</span><br><span class="line">stack.append(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问栈头</span></span><br><span class="line">top = stack[-<span class="number">1</span>]</span><br><span class="line">top = stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空栈</span></span><br><span class="line">stack.clear()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="队列">队列</h3><figure class="highlight python"><figcaption><span>fold title:队列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">q = deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入</span></span><br><span class="line">q.append(x)</span><br><span class="line">q.appendleft(x)</span><br><span class="line">q.insert(l, item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出队</span></span><br><span class="line">left = q.popleft()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="01-分数规划">01 分数规划</h2><blockquote><p>最大化 (∑a[i]) / (∑b[i])</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>二分 + 贪心</strong><br>设 X = (∑a[i]) / (∑b[i]) -&gt; ∑a[i] - X * ∑b[i] = 0<br>二分查找 X，看 X 对于 这个式子的影响是过大还是过小。</p></li></ul><figure class="highlight python"><figcaption><span>fold title:浮点二分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l = <span class="number">0</span></span><br><span class="line">r = <span class="number">1e6</span></span><br><span class="line">eps = <span class="number">1e-6</span></span><br><span class="line"><span class="keyword">while</span> (r - l) &gt; eps:</span><br><span class="line">    mid = (r + l) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> exam(mid):</span><br><span class="line">        l = mid</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = mid</span><br></pre></td></tr></table></figure><h2 id="动态规划">动态规划</h2><blockquote><p>一定是 <strong>从最优 到 最优</strong></p></blockquote><blockquote><p>计算当前节点时，统计需要的历史信息（dp的存储）</p></blockquote><h3 id="01-背包-完全背包">01 背包 / 完全背包</h3><p><code>dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i])</code></p><blockquote><p>一个是 价值 <strong>从小到大</strong>（完全背包）   一个是 价值 <strong>从大到小</strong>（01 背包）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 01 背包</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(C, w[i]-<span class="number">1</span>, -<span class="number">1</span>): </span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i])</span><br><span class="line"><span class="comment"># 完全背包</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(C, w[i]-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i])</span><br></pre></td></tr></table></figure><h3 id="多重背包">多重背包</h3><p>问题：每一个物品有 选择次数限制 s[i]</p><blockquote><p>使用二进制优化 转化成<strong>01</strong>背包</p><p>将 <strong>s[i]</strong> 使用二进制进行拆分 (k * w, k * v) k是 2 的 n次方</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">w, v, s = W[i], V[i], S[i]</span><br><span class="line">k = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> k &lt; s:</span><br><span class="line">new.append((w * k, v * k))</span><br><span class="line">s -= k</span><br><span class="line">k &lt;&lt;= <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> s &gt; <span class="number">0</span>:</span><br><span class="line">new.append((w * s, v * s))</span><br><span class="line"><span class="comment"># 转化成新的 01 背包</span></span><br></pre></td></tr></table></figure><h3 id="分组背包">分组背包</h3><hr><p>问题：分成 n 组，每一组 选 一个 的最大价值</p><p><code>dp[i][j] = max(dp[i][j],dp[i - 1][j - w[i]] + v[i])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> group <span class="keyword">in</span> groups:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(V,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> w,v <span class="keyword">in</span> group:</span><br><span class="line"><span class="keyword">if</span> j &gt;= w:</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j],f[j - w] + v)</span><br></pre></td></tr></table></figure><h3 id="有依赖背包">有依赖背包</h3><h3 id="树型DP">树型DP</h3><h3 id="区间DP">区间DP</h3><h2 id="数论">数论</h2><h3 id="埃式筛">埃式筛</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">prime = []</span><br><span class="line">is_prime = [<span class="literal">True</span>] * (n + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">    <span class="keyword">if</span> if_prime[i]:</span><br><span class="line">        prime.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * i, n + <span class="number">1</span>, i):</span><br><span class="line">            is_prime[j] = <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> prime</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="拆分因子">拆分因子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ans = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">int</span>(n ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">        ans.add(i)</span><br><span class="line">        ans.add(n // i)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sorted</span>(ans)</span><br></pre></td></tr></table></figure><h4 id="因子预处理">因子预处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fac = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n + <span class="number">1</span>, i):</span><br><span class="line">fac[j].append(i)</span><br><span class="line"><span class="keyword">return</span> fac</span><br></pre></td></tr></table></figure><h2 id="Python-解决字符串分割问题">Python 解决字符串分割问题</h2><blockquote><p>巧妙的使用 split(‘char’)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>().strip()</span><br><span class="line"></span><br><span class="line">terms = s.split(<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> fa <span class="keyword">in</span> terms:</span><br><span class="line">s1 = fa.split(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">temp = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> fac <span class="keyword">in</span> s1:</span><br><span class="line"><span class="keyword">if</span> fac:</span><br><span class="line">temp *= <span class="built_in">int</span>(fac)</span><br><span class="line">ans += temp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><h3 id="KMP">KMP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NEXT[I] 表示 前 i - 1 个元素的 最长前后缀匹配长度</span></span><br><span class="line"><span class="built_in">next</span> = [<span class="number">0</span>] * <span class="built_in">len</span>(s2) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_next</span>(<span class="params">s2</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(s2)</span><br><span class="line">    <span class="built_in">next</span>[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">    <span class="built_in">next</span>[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    i, cn = <span class="number">2</span>,<span class="number">0</span> <span class="comment"># cn 表示 i - 1 的next值</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">if</span> s2[i - <span class="number">1</span>] == s2[cn]:</span><br><span class="line">            <span class="built_in">next</span>[i++] = ++cn</span><br><span class="line">        <span class="keyword">elif</span> cn &gt; <span class="number">0</span>:</span><br><span class="line">            cn = <span class="built_in">next</span>[cn]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">next</span>[i++] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kmp</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    n, m = <span class="built_in">len</span>(s1),<span class="built_in">len</span>(s2)</span><br><span class="line">    x, y = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    get_next(s2)</span><br><span class="line">    <span class="keyword">while</span> x &lt; n <span class="keyword">and</span> y &lt; m:</span><br><span class="line">        <span class="keyword">if</span> s1[x] == s2[y]:</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> y == <span class="number">0</span>:</span><br><span class="line">            x += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            y = <span class="built_in">next</span>[y]</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字典树">字典树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">cnt = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n, s <span class="comment"># n 表示 层, s 表示 种类</span></span><br><span class="line"><span class="comment"># 第一层什么不都存储，相当于空字符</span></span><br><span class="line">tree = [[<span class="number">0</span>]*s <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="comment"># pass 表示 每一个前缀的 访问次数</span></span><br><span class="line"><span class="keyword">pass</span> = [<span class="number">0</span>] * N </span><br><span class="line"><span class="comment"># end 表示 每一个字符串的结尾 访问次数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">word</span>):</span><br><span class="line">cur = <span class="number">1</span></span><br><span class="line">    <span class="keyword">pass</span>[cur] += <span class="number">1</span> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> word:</span><br><span class="line">       path = x - <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> tree[cur][path] == <span class="number">0</span>:</span><br><span class="line">            tree[cur][path] = ++cnt</span><br><span class="line">        cur = tree[cur][path]</span><br><span class="line">        <span class="keyword">pass</span>[cur] += <span class="number">1</span></span><br><span class="line">    end[cur] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prenum</span>(<span class="params">pre</span>):</span><br><span class="line">    cur = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> pre:</span><br><span class="line">        path = x - <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> tree[cur][path] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        cur = tree[cur][path]</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">pass</span>[cur]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">word</span>):</span><br><span class="line">    <span class="keyword">if</span> prenum(word) &gt; <span class="number">0</span>:</span><br><span class="line">        cur = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> word:</span><br><span class="line">            path = x - <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            <span class="keyword">pass</span>[tree[cur][path]] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">pass</span>[tree[cur][path]] == <span class="number">0</span>:</span><br><span class="line">            tree[cur][path] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            cur = tree[cur][path]</span><br><span class="line">        end[cur] -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Dijkstra">Dijkstra</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dj</span>(<span class="params">n, g, start</span>):</span><br><span class="line">    dist = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * n</span><br><span class="line">    dist[start] = <span class="number">0</span></span><br><span class="line">    heap = [(<span class="number">0</span>,start)]</span><br><span class="line">    <span class="keyword">while</span> heap:</span><br><span class="line">        d, u = heapq.heappop(heap)</span><br><span class="line">        <span class="keyword">if</span> d &gt; dist[u]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> v, w <span class="keyword">in</span> g[u]:</span><br><span class="line">            <span class="keyword">if</span> dist[v] &gt; dist[u] + w:</span><br><span class="line">                dist[v] = dist[u] + w</span><br><span class="line">                heapq.heappush(heap,(dist[v],v))</span><br><span class="line">     <span class="keyword">return</span> dist</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
